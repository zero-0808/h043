
jhd_app_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08010ee8  08010ee8  00020ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801102c  0801102c  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  0801102c  0801102c  0002102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011034  08011034  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011034  08011034  00021034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011038  08011038  00021038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  24000000  0801103c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020dec  2400011c  08011158  0003011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24020f08  08011158  00030f08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e806  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d6e  00000000  00000000  0007e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  000876c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  000893e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000400df  00000000  00000000  0008ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df5c  00000000  00000000  000caf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001664dd  00000000  00000000  000f8e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025f340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c4  00000000  00000000  0025f394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400011c 	.word	0x2400011c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010ed0 	.word	0x08010ed0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000120 	.word	0x24000120
 80002d4:	08010ed0 	.word	0x08010ed0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b090      	sub	sp, #64	; 0x40
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80005d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]
 8000602:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 8000604:	4b47      	ldr	r3, [pc, #284]	; (8000724 <MX_FMC_Init+0x154>)
 8000606:	4a48      	ldr	r2, [pc, #288]	; (8000728 <MX_FMC_Init+0x158>)
 8000608:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 800060a:	4b46      	ldr	r3, [pc, #280]	; (8000724 <MX_FMC_Init+0x154>)
 800060c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000610:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_DISABLE;
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <MX_FMC_Init+0x154>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <MX_FMC_Init+0x154>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 800061e:	4b41      	ldr	r3, [pc, #260]	; (8000724 <MX_FMC_Init+0x154>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8000624:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <MX_FMC_Init+0x154>)
 8000626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800062a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 3;
 800062c:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MX_FMC_Init+0x154>)
 800062e:	2203      	movs	r2, #3
 8000630:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000632:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <MX_FMC_Init+0x154>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8000638:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <MX_FMC_Init+0x154>)
 800063a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000640:	4b38      	ldr	r3, [pc, #224]	; (8000724 <MX_FMC_Init+0x154>)
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MX_FMC_Init+0x154>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 64;
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <MX_FMC_Init+0x154>)
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 2;
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <MX_FMC_Init+0x154>)
 8000654:	2202      	movs	r2, #2
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_FMC_Init+0x154>)
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_FMC_Init+0x154>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  ComSpaceTiming.WaitSetupTime = 6;
 800066c:	2306      	movs	r3, #6
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  ComSpaceTiming.HoldSetupTime = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  ComSpaceTiming.HiZSetupTime = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 6;
 800067c:	2306      	movs	r3, #6
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  AttSpaceTiming.HoldSetupTime = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  AttSpaceTiming.HiZSetupTime = 5;
 8000684:	2305      	movs	r3, #5
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000688:	f107 0220 	add.w	r2, r7, #32
 800068c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000690:	4619      	mov	r1, r3
 8000692:	4824      	ldr	r0, [pc, #144]	; (8000724 <MX_FMC_Init+0x154>)
 8000694:	f005 fb74 	bl	8005d80 <HAL_NAND_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_FMC_Init+0xd2>
  {
    Error_Handler( );
 800069e:	f000 fb63 	bl	8000d68 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_FMC_Init+0x15c>)
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <MX_FMC_Init+0x160>)
 80006a6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_FMC_Init+0x15c>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_FMC_Init+0x15c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_FMC_Init+0x15c>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_FMC_Init+0x15c>)
 80006bc:	2210      	movs	r2, #16
 80006be:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_FMC_Init+0x15c>)
 80006c2:	2240      	movs	r2, #64	; 0x40
 80006c4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_FMC_Init+0x15c>)
 80006c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006cc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_FMC_Init+0x15c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_FMC_Init+0x15c>)
 80006d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006da:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_FMC_Init+0x15c>)
 80006de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_FMC_Init+0x15c>)
 80006e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80006f0:	2309      	movs	r3, #9
 80006f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80006f4:	2306      	movs	r3, #6
 80006f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80006f8:	2306      	movs	r3, #6
 80006fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006fc:	2303      	movs	r3, #3
 80006fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8000700:	2303      	movs	r3, #3
 8000702:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 6;
 8000704:	2306      	movs	r3, #6
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <MX_FMC_Init+0x15c>)
 800070e:	f008 fafd 	bl	8008d0c <HAL_SDRAM_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_FMC_Init+0x14c>
  {
    Error_Handler( );
 8000718:	f000 fb26 	bl	8000d68 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800071c:	bf00      	nop
 800071e:	3740      	adds	r7, #64	; 0x40
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	240001cc 	.word	0x240001cc
 8000728:	52004080 	.word	0x52004080
 800072c:	2400020c 	.word	0x2400020c
 8000730:	52004140 	.word	0x52004140

08000734 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000748:	4b43      	ldr	r3, [pc, #268]	; (8000858 <HAL_FMC_MspInit+0x124>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d17e      	bne.n	800084e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8000750:	4b41      	ldr	r3, [pc, #260]	; (8000858 <HAL_FMC_MspInit+0x124>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <HAL_FMC_MspInit+0x128>)
 8000758:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800075c:	4a3f      	ldr	r2, [pc, #252]	; (800085c <HAL_FMC_MspInit+0x128>)
 800075e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000762:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <HAL_FMC_MspInit+0x128>)
 8000768:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800076c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000774:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000778:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000786:	230c      	movs	r3, #12
 8000788:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <HAL_FMC_MspInit+0x12c>)
 8000790:	f003 fc06 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a4:	230c      	movs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	482d      	ldr	r0, [pc, #180]	; (8000864 <HAL_FMC_MspInit+0x130>)
 80007ae:	f003 fbf7 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_5
 80007b2:	f248 3337 	movw	r3, #33591	; 0x8337
 80007b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c4:	230c      	movs	r3, #12
 80007c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4826      	ldr	r0, [pc, #152]	; (8000868 <HAL_FMC_MspInit+0x134>)
 80007ce:	f003 fbe7 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_4
 80007d2:	f24c 7333 	movw	r3, #50995	; 0xc733
 80007d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007e4:	230c      	movs	r3, #12
 80007e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <HAL_FMC_MspInit+0x138>)
 80007ee:	f003 fbd7 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80007f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000804:	230c      	movs	r3, #12
 8000806:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4818      	ldr	r0, [pc, #96]	; (8000870 <HAL_FMC_MspInit+0x13c>)
 800080e:	f003 fbc7 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000822:	230c      	movs	r3, #12
 8000824:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <HAL_FMC_MspInit+0x140>)
 800082c:	f003 fbb8 	bl	8003fa0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000830:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_FMC_MspInit+0x138>)
 8000848:	f003 fbaa 	bl	8003fa0 <HAL_GPIO_Init>
 800084c:	e000      	b.n	8000850 <HAL_FMC_MspInit+0x11c>
    return;
 800084e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	24000138 	.word	0x24000138
 800085c:	58024400 	.word	0x58024400
 8000860:	58021000 	.word	0x58021000
 8000864:	58020400 	.word	0x58020400
 8000868:	58021800 	.word	0x58021800
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58021400 	.word	0x58021400
 8000874:	58021c00 	.word	0x58021c00

08000878 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8000880:	f7ff ff58 	bl	8000734 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000894:	f7ff ff4e 	bl	8000734 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	4b66      	ldr	r3, [pc, #408]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a64      	ldr	r2, [pc, #400]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	623b      	str	r3, [r7, #32]
 80008d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b5e      	ldr	r3, [pc, #376]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	4a5d      	ldr	r2, [pc, #372]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e4:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a55      	ldr	r2, [pc, #340]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 80008fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b53      	ldr	r3, [pc, #332]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	4a4e      	ldr	r2, [pc, #312]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000920:	4b4b      	ldr	r3, [pc, #300]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a46      	ldr	r2, [pc, #280]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	4a3f      	ldr	r2, [pc, #252]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095c:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_GPIO_Init+0x1b0>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	482a      	ldr	r0, [pc, #168]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80009ac:	f003 fcc0 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b6:	4828      	ldr	r0, [pc, #160]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80009b8:	f003 fcba 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(use_en_GPIO_Port, use_en_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c2:	4826      	ldr	r0, [pc, #152]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 80009c4:	f003 fcb4 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(beep_GPIO_Port, beep_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4824      	ldr	r0, [pc, #144]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 80009ce:	f003 fcaf 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009de:	2302      	movs	r3, #2
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80009ea:	f003 fad9 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 80009ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2302      	movs	r3, #2
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 8000a08:	f003 faca 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = use_en_Pin;
 8000a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(use_en_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000a26:	f003 fabb 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = beep_Pin;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(beep_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 8000a42:	f003 faad 	bl	8003fa0 <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3738      	adds	r7, #56	; 0x38
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	58024400 	.word	0x58024400
 8000a54:	58021000 	.word	0x58021000
 8000a58:	58021800 	.word	0x58021800
 8000a5c:	58020000 	.word	0x58020000
 8000a60:	58020800 	.word	0x58020800

08000a64 <led_init>:
#include "led.h"
#include"main.h"

void   led_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	LED_OFF	;
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <led_init+0x20>)
 8000a6e:	f003 fc5f 	bl	8004330 <HAL_GPIO_WritePin>
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <led_init+0x24>)
 8000a7a:	f003 fc59 	bl	8004330 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58021000 	.word	0x58021000
 8000a88:	58021800 	.word	0x58021800

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a92:	f002 feb1 	bl	80037f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a96:	f000 f8a1 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f7ff ff01 	bl	80008a0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000a9e:	f7ff fd97 	bl	80005d0 <MX_FMC_Init>
  MX_FATFS_Init();
 8000aa2:	f00a fa1f 	bl	800aee4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000aa6:	f00f fdb9 	bl	801061c <MX_USB_HOST_Init>
  MX_QUADSPI_Init();
 8000aaa:	f000 f963 	bl	8000d74 <MX_QUADSPI_Init>
  MX_UART5_Init();
 8000aae:	f001 f95d 	bl	8001d6c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000ab2:	f001 f9a7 	bl	8001e04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  w25qxx_Init();
 8000ab6:	f002 fbc1 	bl	800323c <w25qxx_Init>
  w25qxx_EnterQPI();
 8000aba:	f002 fd07 	bl	80034cc <w25qxx_EnterQPI>
  led_init();
 8000abe:	f7ff ffd1 	bl	8000a64 <led_init>
  LED_RED;
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <main+0x12c>)
 8000ac8:	f003 fc32 	bl	8004330 <HAL_GPIO_WritePin>
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad2:	483a      	ldr	r0, [pc, #232]	; (8000bbc <main+0x130>)
 8000ad4:	f003 fc2c 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_6);//蜂鸣器控�????
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4839      	ldr	r0, [pc, #228]	; (8000bc0 <main+0x134>)
 8000adc:	f003 fc41 	bl	8004362 <HAL_GPIO_TogglePin>
  HAL_Delay(1);  //延时1MS等待USB稳定
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f002 ff1b 	bl	800391c <HAL_Delay>

  uint32_t gotoapptime = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  gotoapptime = HAL_GetTick();
 8000aea:	f002 ff0b 	bl	8003904 <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000af0:	f00f fdba 	bl	8010668 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if((HAL_GetTick() - gotoapptime) > 2800)//u disk and sd disk use 500ms can mount 3 secound can just sub
 8000af4:	f002 ff06 	bl	8003904 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000b02:	d800      	bhi.n	8000b06 <main+0x7a>
    MX_USB_HOST_Process();
 8000b04:	e7f4      	b.n	8000af0 <main+0x64>
	{
		break;
 8000b06:	bf00      	nop
	}
  }

  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_11 , GPIO_PIN_RESET); //关闭usb电源
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	482d      	ldr	r0, [pc, #180]	; (8000bc4 <main+0x138>)
 8000b10:	f003 fc0e 	bl	8004330 <HAL_GPIO_WritePin>
  HAL_NVIC_DisableIRQ(OTG_HS_IRQn);//关闭�????有用到的外设
 8000b14:	204d      	movs	r0, #77	; 0x4d
 8000b16:	f003 f858 	bl	8003bca <HAL_NVIC_DisableIRQ>
   __HAL_RCC_USB_OTG_HS_CLK_DISABLE();
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <main+0x13c>)
 8000b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <main+0x13c>)
 8000b22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f383 8810 	msr	PRIMASK, r3
}
 8000b34:	bf00      	nop
	__set_PRIMASK(1);
	SysTick->CTRL = 0;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <main+0x140>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <main+0x140>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <main+0x140>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
	/*clear all interrupt , set 1 to clear*/
	for (uint8_t i = 0; i < 8; i++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	75fb      	strb	r3, [r7, #23]
 8000b4c:	e010      	b.n	8000b70 <main+0xe4>
	{
		NVIC->ICER[i]=0xFFFFFFFF;
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <main+0x144>)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	3320      	adds	r3, #32
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		NVIC->ICPR[i]=0xFFFFFFFF;
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <main+0x144>)
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	3360      	adds	r3, #96	; 0x60
 8000b62:	f04f 31ff 	mov.w	r1, #4294967295
 8000b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 8; i++)
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	75fb      	strb	r3, [r7, #23]
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d9eb      	bls.n	8000b4e <main+0xc2>
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f383 8810 	msr	PRIMASK, r3
}
 8000b80:	bf00      	nop
	}
	__set_PRIMASK(0);
	{
		JumpToApplication = (pFunction) (*( __IO unsigned int*) (APPLICATION_ADDRESS + 4));
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <main+0x148>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <main+0x14c>)
 8000b8a:	601a      	str	r2, [r3, #0]
		__set_MSP(*( uint32_t*) APPLICATION_ADDRESS);
 8000b8c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f383 8808 	msr	MSP, r3
}
 8000b9a:	bf00      	nop
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	f383 8814 	msr	CONTROL, r3
}
 8000ba6:	bf00      	nop
		__set_CONTROL(0);
		JumpToApplication();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <main+0x14c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4798      	blx	r3
 8000bae:	2300      	movs	r3, #0
	}
  /* USER CODE END 3 */
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58021000 	.word	0x58021000
 8000bbc:	58021800 	.word	0x58021800
 8000bc0:	58020800 	.word	0x58020800
 8000bc4:	58020000 	.word	0x58020000
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	e000e010 	.word	0xe000e010
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	90000004 	.word	0x90000004
 8000bd8:	24000240 	.word	0x24000240

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0cc      	sub	sp, #304	; 0x130
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000be6:	224c      	movs	r2, #76	; 0x4c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f010 f8a0 	bl	8010d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f010 f899 	bl	8010d30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	23bc      	movs	r3, #188	; 0xbc
 8000c06:	461a      	mov	r2, r3
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f010 f891 	bl	8010d30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f005 f900 	bl	8005e14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <SystemClock_Config+0x180>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <SystemClock_Config+0x180>)
 8000c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <SystemClock_Config+0x180>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <SystemClock_Config+0x184>)
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	4a4a      	ldr	r2, [pc, #296]	; (8000d60 <SystemClock_Config+0x184>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <SystemClock_Config+0x184>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	f003 0201 	and.w	r2, r3, #1
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	bf00      	nop
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <SystemClock_Config+0x180>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5c:	d1f8      	bne.n	8000c50 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c96:	2308      	movs	r3, #8
 8000c98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fd3f 	bl	8006730 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000cb8:	f000 f856 	bl	8000d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	233f      	movs	r3, #63	; 0x3f
 8000cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f006 f92b 	bl	8006f50 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000d00:	f000 f832 	bl	8000d68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART5
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <SystemClock_Config+0x188>)
 8000d0a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2200      	movs	r2, #0
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2200      	movs	r2, #0
 8000d1a:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	2200      	movs	r2, #0
 8000d22:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2200      	movs	r2, #0
 8000d2a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fc93 	bl	8007668 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x170>
  {
    Error_Handler();
 8000d48:	f000 f80e 	bl	8000d68 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000d4c:	f005 f89c 	bl	8005e88 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000d50:	bf00      	nop
 8000d52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024800 	.word	0x58024800
 8000d60:	58000400 	.word	0x58000400
 8000d64:	03040003 	.word	0x03040003

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <MX_QUADSPI_Init+0x54>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d86:	2210      	movs	r2, #16
 8000d88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000d98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d9c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_QUADSPI_Init+0x50>)
 8000db2:	f005 f879 	bl	8005ea8 <HAL_QSPI_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f7ff ffd4 	bl	8000d68 <Error_Handler>
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000244 	.word	0x24000244
 8000dc8:	52005000 	.word	0x52005000

08000dcc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_QSPI_MspInit+0x148>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	f040 808d 	bne.w	8000f0a <HAL_QSPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000df0:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000df2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000df6:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e00:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0e:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a39      	ldr	r2, [pc, #228]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a2a      	ldr	r2, [pc, #168]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <HAL_QSPI_MspInit+0x14c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e86:	2304      	movs	r3, #4
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e96:	2309      	movs	r3, #9
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481e      	ldr	r0, [pc, #120]	; (8000f1c <HAL_QSPI_MspInit+0x150>)
 8000ea2:	f003 f87d 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <HAL_QSPI_MspInit+0x154>)
 8000ec4:	f003 f86c 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec8:	2340      	movs	r3, #64	; 0x40
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <HAL_QSPI_MspInit+0x158>)
 8000ee4:	f003 f85c 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000ee8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000efa:	2309      	movs	r3, #9
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <HAL_QSPI_MspInit+0x15c>)
 8000f06:	f003 f84b 	bl	8003fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	52005000 	.word	0x52005000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58021000 	.word	0x58021000
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58021800 	.word	0x58021800
 8000f28:	58021400 	.word	0x58021400

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f002 fc96 	bl	80038dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <OTG_HS_IRQHandler+0x10>)
 8000fba:	f003 fc7d 	bl	80048b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24020c34 	.word	0x24020c34

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f00f fe52 	bl	8010ca0 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24080000 	.word	0x24080000
 8001028:	00000400 	.word	0x00000400
 800102c:	2400013c 	.word	0x2400013c
 8001030:	24020f08 	.word	0x24020f08

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <SystemInit+0xec>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a38      	ldr	r2, [pc, #224]	; (8001120 <SystemInit+0xec>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001048:	4b36      	ldr	r3, [pc, #216]	; (8001124 <SystemInit+0xf0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	2b06      	cmp	r3, #6
 8001052:	d807      	bhi.n	8001064 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <SystemInit+0xf0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	4a31      	ldr	r2, [pc, #196]	; (8001124 <SystemInit+0xf0>)
 800105e:	f043 0307 	orr.w	r3, r3, #7
 8001062:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <SystemInit+0xf4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <SystemInit+0xf4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <SystemInit+0xf4>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <SystemInit+0xf4>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	492b      	ldr	r1, [pc, #172]	; (8001128 <SystemInit+0xf4>)
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <SystemInit+0xf8>)
 800107e:	4013      	ands	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemInit+0xf0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemInit+0xf0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	4a23      	ldr	r2, [pc, #140]	; (8001124 <SystemInit+0xf0>)
 8001098:	f043 0307 	orr.w	r3, r3, #7
 800109c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemInit+0xf4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <SystemInit+0xf4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemInit+0xf4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <SystemInit+0xf4>)
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <SystemInit+0xfc>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <SystemInit+0xf4>)
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <SystemInit+0x100>)
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <SystemInit+0xf4>)
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <SystemInit+0x104>)
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <SystemInit+0xf4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <SystemInit+0xf4>)
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <SystemInit+0x104>)
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <SystemInit+0xf4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <SystemInit+0xf4>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <SystemInit+0x104>)
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <SystemInit+0xf4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <SystemInit+0xf4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <SystemInit+0xf4>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <SystemInit+0xf4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <SystemInit+0x108>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <SystemInit+0x10c>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010fe:	d202      	bcs.n	8001106 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <SystemInit+0x110>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <SystemInit+0x114>)
 8001108:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800110c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SystemInit+0xec>)
 8001110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001114:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	52002000 	.word	0x52002000
 8001128:	58024400 	.word	0x58024400
 800112c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001130:	02020200 	.word	0x02020200
 8001134:	01ff0000 	.word	0x01ff0000
 8001138:	01010280 	.word	0x01010280
 800113c:	5c001000 	.word	0x5c001000
 8001140:	ffff0000 	.word	0xffff0000
 8001144:	51008108 	.word	0x51008108
 8001148:	52004000 	.word	0x52004000

0800114c <read_source>:

uint32_t read_source(FIL file,uint8_t * buf,uint32_t size);


uint32_t read_source(FIL file,uint8_t * buf,uint32_t size)
{
 800114c:	b084      	sub	sp, #16
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	f107 0c20 	add.w	ip, r7, #32
 8001158:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t size1,size2,temp_size,bw;
    uint8_t * p;
    uint8_t res;

    if(buf == NULL)
 800115c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <read_source+0x1c>
    {
        return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e02a      	b.n	80011be <read_source+0x72>
    }

    size1 = size;
 8001168:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800116c:	613b      	str	r3, [r7, #16]
    size2 = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	

    while(size2 < size1)
 8001172:	e01d      	b.n	80011b0 <read_source+0x64>
    {
        p = buf + size2;
 8001174:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
        temp_size = ((size1 - size2) > (TEMP_SIZE)) ? (TEMP_SIZE) : (size1 - size2);
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001188:	bf28      	it	cs
 800118a:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 800118e:	60bb      	str	r3, [r7, #8]
        res = f_read(&file,(void *)p,temp_size,&bw);
 8001190:	463b      	mov	r3, r7
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	f107 0020 	add.w	r0, r7, #32
 800119a:	f00e fdf3 	bl	800fd84 <f_read>
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
        if(res == FR_OK)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <read_source+0x6e>
        {
		    size2 += temp_size;
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	4413      	add	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
    while(size2 < size1)
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3dd      	bcc.n	8001174 <read_source+0x28>
 80011b8:	e000      	b.n	80011bc <read_source+0x70>
		}
		else
		{
		    break;
 80011ba:	bf00      	nop
		}
    }

    return size2;
 80011bc:	697b      	ldr	r3, [r7, #20]
    
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <save_source>:



static uint8_t save_source(uint32_t addr,FIL file,uint32_t lseek,uint32_t size)
{
 80011cc:	b084      	sub	sp, #16
 80011ce:	b590      	push	{r4, r7, lr}
 80011d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80011d4:	af8a      	add	r7, sp, #552	; 0x228
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80011dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t block,page;
	uint32_t size1,size2,temp_size;
	uint8_t * buffer;
//	uint8_t * p;
	
	buffer = (uint8_t *) my_malloc(nand_dev.page_mainsize);
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <save_source+0xfc>)
 80011e2:	8bdb      	ldrh	r3, [r3, #30]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f9f1 	bl	80025cc <my_malloc>
 80011ea:	6178      	str	r0, [r7, #20]
	
	if(buffer == NULL)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <save_source+0x2a>
	{
		return 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e060      	b.n	80012b8 <save_source+0xec>



	//read_source(file, buffer,size);
	
	block = (addr >> 16) & 0XFFFF;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	83fb      	strh	r3, [r7, #30]
	page = (addr) & 0XFFFF;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	83bb      	strh	r3, [r7, #28]
	size1 = size;
 8001200:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001204:	613b      	str	r3, [r7, #16]
	size2 = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
	
	while(size2 < size1)
 800120a:	e04d      	b.n	80012a8 <save_source+0xdc>
	{
		//p = buffer + size2;
		temp_size = (size1 - size2)>(nand_dev.page_mainsize)?(nand_dev.page_mainsize):(size1-size2);
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <save_source+0xfc>)
 8001214:	8bd2      	ldrh	r2, [r2, #30]
 8001216:	4293      	cmp	r3, r2
 8001218:	bf28      	it	cs
 800121a:	4613      	movcs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
		read_source(file, buffer,temp_size);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	9389      	str	r3, [sp, #548]	; 0x224
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	9388      	str	r3, [sp, #544]	; 0x220
 8001226:	4668      	mov	r0, sp
 8001228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800122c:	f44f 7208 	mov.w	r2, #544	; 0x220
 8001230:	4619      	mov	r1, r3
 8001232:	f00f fd6f 	bl	8010d14 <memcpy>
 8001236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123c:	f7ff ff86 	bl	800114c <read_source>
		if(crypt.flag>0)
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <save_source+0x100>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <save_source+0x8a>
        {
            crypt.encrypt_decrypt(crypt.cal_user_key,buffer,temp_size);
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <save_source+0x100>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <save_source+0x100>)
 800124e:	7910      	ldrb	r0, [r2, #4]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6979      	ldr	r1, [r7, #20]
 8001254:	4798      	blx	r3
        }
		nand_dev.page_program(NAND_LBNToPBN(block),page,buffer,0);
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <save_source+0xfc>)
 8001258:	691c      	ldr	r4, [r3, #16]
 800125a:	8bfb      	ldrh	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f001 ff91 	bl	8003184 <NAND_LBNToPBN>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	8bb9      	ldrh	r1, [r7, #28]
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	47a0      	blx	r4
		size2 += temp_size;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
		f_lseek(&file,size2+lseek);
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800127c:	441a      	add	r2, r3
 800127e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f00e ff64 	bl	8010152 <f_lseek>
		page ++;
 800128a:	8bbb      	ldrh	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	83bb      	strh	r3, [r7, #28]
		if(page >= nand_dev.block_pagenum)
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <save_source+0xfc>)
 8001292:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001296:	b29b      	uxth	r3, r3
 8001298:	8bba      	ldrh	r2, [r7, #28]
 800129a:	429a      	cmp	r2, r3
 800129c:	d304      	bcc.n	80012a8 <save_source+0xdc>
		{
			page = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	83bb      	strh	r3, [r7, #28]
			block ++;
 80012a2:	8bfb      	ldrh	r3, [r7, #30]
 80012a4:	3301      	adds	r3, #1
 80012a6:	83fb      	strh	r3, [r7, #30]
	while(size2 < size1)
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3ad      	bcc.n	800120c <save_source+0x40>
		}
	}

	my_free(buffer);
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f001 fa0b 	bl	80026cc <my_free>

	return 0;
 80012b6:	2300      	movs	r3, #0

	
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012c2:	b004      	add	sp, #16
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	24000008 	.word	0x24000008
 80012cc:	240003a8 	.word	0x240003a8

080012d0 <update_tci_source>:




static void update_tci_source(FIL file,uint32_t lseek,uint16_t block)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80012d8:	af8c      	add	r7, sp, #560	; 0x230
 80012da:	f107 0c10 	add.w	ip, r7, #16
 80012de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint32_t size,addr;
//    size = f_size(&file);
	size = merge.size[merge.num];
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <update_tci_source+0x60>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <update_tci_source+0x60>)
 80012e8:	3308      	adds	r3, #8
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	607b      	str	r3, [r7, #4]
    addr = (block << 16) & (0XFFFF0000);
 80012f2:	f8b7 3244 	ldrh.w	r3, [r7, #580]	; 0x244
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	603b      	str	r3, [r7, #0]
    save_source(addr,file,lseek,size);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	938a      	str	r3, [sp, #552]	; 0x228
 80012fe:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001302:	9389      	str	r3, [sp, #548]	; 0x224
 8001304:	4668      	mov	r0, sp
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	f44f 7209 	mov.w	r2, #548	; 0x224
 800130e:	4619      	mov	r1, r3
 8001310:	f00f fd00 	bl	8010d14 <memcpy>
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff ff56 	bl	80011cc <save_source>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132a:	b004      	add	sp, #16
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24000140 	.word	0x24000140

08001334 <update_source>:
static uint16_t pic_cnt=0;

uint8_t update_source(void)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
 800133a:	af8a      	add	r7, sp, #552	; 0x228
	FIL file;
    FATFS fs;
	uint16_t temp[9],block_num,tmp;
	uint16_t pic_w,pic_h;
	//uint8_t flag = 2;
	uint32_t size,lseek=0;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	uint32_t block_size,screen_size,pic_offset;
	uint32_t page,block;
    uint16_t nand_block_off=0;
 8001342:	2300      	movs	r3, #0
 8001344:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
	uint8_t * buf;
	uint32_t  bw;
	uint8_t * buf1 = NULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
    uint8_t * buf2 = NULL;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
	BMP_HEAD head;
	
	for(i=0;i<MERGE_NUM;i++)
 8001354:	2300      	movs	r3, #0
 8001356:	f887 34e6 	strb.w	r3, [r7, #1254]	; 0x4e6
 800135a:	e00c      	b.n	8001376 <update_source+0x42>
	{
		temp[i] = 0xffff;
 800135c:	f897 24e6 	ldrb.w	r2, [r7, #1254]	; 0x4e6
 8001360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001368:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<MERGE_NUM;i++)
 800136c:	f897 34e6 	ldrb.w	r3, [r7, #1254]	; 0x4e6
 8001370:	3301      	adds	r3, #1
 8001372:	f887 34e6 	strb.w	r3, [r7, #1254]	; 0x4e6
 8001376:	f897 34e6 	ldrb.w	r3, [r7, #1254]	; 0x4e6
 800137a:	2b07      	cmp	r3, #7
 800137c:	d9ee      	bls.n	800135c <update_source+0x28>
	}

    res = f_mount (&fs,"0:",1);
 800137e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001382:	2201      	movs	r2, #1
 8001384:	49d2      	ldr	r1, [pc, #840]	; (80016d0 <update_source+0x39c>)
 8001386:	4618      	mov	r0, r3
 8001388:	f00e faf8 	bl	800f97c <f_mount>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	
	if(res != FR_OK)
 8001392:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <update_source+0x6a>
	{
		return 1;
 800139a:	2301      	movs	r3, #1
 800139c:	e357      	b.n	8001a4e <update_source+0x71a>
	}
    
	res = f_open(&file,"0:/JHD_CFG/JHD_CFG.out",FA_READ);
 800139e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013a2:	2201      	movs	r2, #1
 80013a4:	49cb      	ldr	r1, [pc, #812]	; (80016d4 <update_source+0x3a0>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00e fb2e 	bl	800fa08 <f_open>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

	if(res != FR_OK)
 80013b2:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <update_source+0x8a>
	{
        return 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e347      	b.n	8001a4e <update_source+0x71a>

		   
	}
    LED_RED
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	48c5      	ldr	r0, [pc, #788]	; (80016d8 <update_source+0x3a4>)
 80013c4:	f002 ffb4 	bl	8004330 <HAL_GPIO_WritePin>
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	48c3      	ldr	r0, [pc, #780]	; (80016dc <update_source+0x3a8>)
 80013d0:	f002 ffae 	bl	8004330 <HAL_GPIO_WritePin>
    buf = (uint8_t *)my_malloc(MERGE_HEAD_SIZE);
 80013d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013d8:	f001 f8f8 	bl	80025cc <my_malloc>
 80013dc:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
        
    res = f_read(&file,(void *)buf,MERGE_HEAD_SIZE,&bw);
 80013e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e4:	f507 7020 	add.w	r0, r7, #640	; 0x280
 80013e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ec:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80013f0:	f00e fcc8 	bl	800fd84 <f_read>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
    res = analysis_merge_head(buf,&merge);
 80013fa:	49b9      	ldr	r1, [pc, #740]	; (80016e0 <update_source+0x3ac>)
 80013fc:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	; 0x4d4
 8001400:	f000 fb36 	bl	8001a70 <analysis_merge_head>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
    if(res!=0)
 800140a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <update_source+0xe2>
    {
        return 1;
 8001412:	2301      	movs	r3, #1
 8001414:	e31b      	b.n	8001a4e <update_source+0x71a>
    }
    merge.num = 0;
 8001416:	4bb2      	ldr	r3, [pc, #712]	; (80016e0 <update_source+0x3ac>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    my_free(buf);
 800141c:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	; 0x4d4
 8001420:	f001 f954 	bl	80026cc <my_free>
    
	nand_dev.create_lut(0);
 8001424:	4baf      	ldr	r3, [pc, #700]	; (80016e4 <update_source+0x3b0>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2000      	movs	r0, #0
 800142a:	4798      	blx	r3

	block_size = nand_dev.block_pagenum * nand_dev.page_mainsize;
 800142c:	4bad      	ldr	r3, [pc, #692]	; (80016e4 <update_source+0x3b0>)
 800142e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001432:	461a      	mov	r2, r3
 8001434:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <update_source+0x3b0>)
 8001436:	8bdb      	ldrh	r3, [r3, #30]
 8001438:	fb03 f302 	mul.w	r3, r3, r2
 800143c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
    block_num = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
    
    temp[0] = 0;
 8001446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]
    lseek += MERGE_HEAD_SIZE;
 800144e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8001452:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001456:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	res = f_lseek(&file, lseek);
 800145a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800145e:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8001462:	4618      	mov	r0, r3
 8001464:	f00e fe75 	bl	8010152 <f_lseek>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if(res != FR_OK)
 800146e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <update_source+0x150>
	{
		f_close(&file);
 8001476:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800147a:	4618      	mov	r0, r3
 800147c:	f00e fe3f 	bl	80100fe <f_close>
		return 1;
 8001480:	2301      	movs	r3, #1
 8001482:	e2e4      	b.n	8001a4e <update_source+0x71a>
	}
    
    //font.bin
    update_tci_source(file,lseek,temp[merge.num]);
 8001484:	4b96      	ldr	r3, [pc, #600]	; (80016e0 <update_source+0x3ac>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800148e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001492:	f507 7420 	add.w	r4, r7, #640	; 0x280
 8001496:	9389      	str	r3, [sp, #548]	; 0x224
 8001498:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800149c:	9388      	str	r3, [sp, #544]	; 0x220
 800149e:	4668      	mov	r0, sp
 80014a0:	f104 0310 	add.w	r3, r4, #16
 80014a4:	f44f 7208 	mov.w	r2, #544	; 0x220
 80014a8:	4619      	mov	r1, r3
 80014aa:	f00f fc33 	bl	8010d14 <memcpy>
 80014ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014b2:	f7ff ff0d 	bl	80012d0 <update_tci_source>
    size = merge.size[merge.num];
 80014b6:	4b8a      	ldr	r3, [pc, #552]	; (80016e0 <update_source+0x3ac>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4a89      	ldr	r2, [pc, #548]	; (80016e0 <update_source+0x3ac>)
 80014bc:	3308      	adds	r3, #8
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
    block_num = size / block_size;
 80014c8:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80014cc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
    if(size % block_size)
 80014d8:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80014dc:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80014e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80014e4:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 80014e8:	fb01 f202 	mul.w	r2, r1, r2
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <update_source+0x1c8>
    {
        block_num++;
 80014f2:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
    }
    nand_block_off+= block_num;
 80014fc:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	; 0x4da
 8001500:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 8001504:	4413      	add	r3, r2
 8001506:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
    //block_num = 0;
    lseek += merge.size[merge.num];
 800150a:	4b75      	ldr	r3, [pc, #468]	; (80016e0 <update_source+0x3ac>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4a74      	ldr	r2, [pc, #464]	; (80016e0 <update_source+0x3ac>)
 8001510:	3308      	adds	r3, #8
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 800151c:	4413      	add	r3, r2
 800151e:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
    f_lseek(&file, lseek);
 8001522:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001526:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800152a:	4618      	mov	r0, r3
 800152c:	f00e fe11 	bl	8010152 <f_lseek>
    merge_next_file(&merge);
 8001530:	486b      	ldr	r0, [pc, #428]	; (80016e0 <update_source+0x3ac>)
 8001532:	f000 fbac 	bl	8001c8e <merge_next_file>
    temp[merge.num] = nand_block_off;
 8001536:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <update_source+0x3ac>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001540:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	; 0x4da
 8001544:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    
    //12.bin  
    buf = (uint8_t *)my_malloc(28);
 8001548:	201c      	movs	r0, #28
 800154a:	f001 f83f 	bl	80025cc <my_malloc>
 800154e:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
    f_read(&file,(void *)buf,merge.size[merge.num],&bw);
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <update_source+0x3ac>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4a62      	ldr	r2, [pc, #392]	; (80016e0 <update_source+0x3ac>)
 8001558:	3308      	adds	r3, #8
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001564:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8001568:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800156c:	f00e fc0a 	bl	800fd84 <f_read>
    if(crypt.flag>0)
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <update_source+0x3b4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <update_source+0x254>
    {
        crypt.encrypt_decrypt(crypt.cal_user_key,(void*)buf,28);
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <update_source+0x3b4>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	4a5a      	ldr	r2, [pc, #360]	; (80016e8 <update_source+0x3b4>)
 800157e:	7910      	ldrb	r0, [r2, #4]
 8001580:	221c      	movs	r2, #28
 8001582:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8001586:	4798      	blx	r3
    }
    size = merge.size[merge.num];
 8001588:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <update_source+0x3ac>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <update_source+0x3ac>)
 800158e:	3308      	adds	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
    bsp_EraseCpuFlash((uint32_t)para_flash_area);
 800159a:	4b54      	ldr	r3, [pc, #336]	; (80016ec <update_source+0x3b8>)
 800159c:	4618      	mov	r0, r3
 800159e:	f000 feed 	bl	800237c <bsp_EraseCpuFlash>
//    EEPROM_Erase(2);
//	EEPROM_Write(0,2,(void*)buf,MODE_8_BIT,size);
//    my_free(buf);
//    buf = NULL;
    bsp_WriteCpuFlash((uint32_t)para_flash_area + 32*0,(void*)buf,size);
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <update_source+0x3b8>)
 80015a4:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80015a8:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 ff18 	bl	80023e2 <bsp_WriteCpuFlash>
	my_free(buf);
 80015b2:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	; 0x4d4
 80015b6:	f001 f889 	bl	80026cc <my_free>
	buf = NULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

    lseek += merge.size[merge.num];
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <update_source+0x3ac>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4a46      	ldr	r2, [pc, #280]	; (80016e0 <update_source+0x3ac>)
 80015c6:	3308      	adds	r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 80015d2:	4413      	add	r3, r2
 80015d4:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
    f_lseek(&file, lseek);
 80015d8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80015dc:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00e fdb6 	bl	8010152 <f_lseek>
    merge_next_file(&merge);
 80015e6:	483e      	ldr	r0, [pc, #248]	; (80016e0 <update_source+0x3ac>)
 80015e8:	f000 fb51 	bl	8001c8e <merge_next_file>
    temp[merge.num] = nand_block_off;
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <update_source+0x3ac>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f6:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	; 0x4da
 80015fa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    
	while(merge.num<MERGE_NUM-1)/*图片资源单独处理*/
 80015fe:	e061      	b.n	80016c4 <update_source+0x390>
	{
	    update_tci_source(file,lseek,temp[merge.num]);
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <update_source+0x3ac>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800160a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800160e:	f507 7420 	add.w	r4, r7, #640	; 0x280
 8001612:	9389      	str	r3, [sp, #548]	; 0x224
 8001614:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8001618:	9388      	str	r3, [sp, #544]	; 0x220
 800161a:	4668      	mov	r0, sp
 800161c:	f104 0310 	add.w	r3, r4, #16
 8001620:	f44f 7208 	mov.w	r2, #544	; 0x220
 8001624:	4619      	mov	r1, r3
 8001626:	f00f fb75 	bl	8010d14 <memcpy>
 800162a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800162e:	f7ff fe4f 	bl	80012d0 <update_tci_source>
	    size = merge.size[merge.num];
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <update_source+0x3ac>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <update_source+0x3ac>)
 8001638:	3308      	adds	r3, #8
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
	    block_num = size / block_size;
 8001644:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8001648:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
	    if(size % block_size)
 8001654:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8001658:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800165c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001660:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 8001664:	fb01 f202 	mul.w	r2, r1, r2
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <update_source+0x344>
	    {
	        block_num++;
 800166e:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 8001672:	3301      	adds	r3, #1
 8001674:	f8a7 34e4 	strh.w	r3, [r7, #1252]	; 0x4e4
	    }
	    //f_close(&file);
		nand_block_off += block_num;
 8001678:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	; 0x4da
 800167c:	f8b7 34e4 	ldrh.w	r3, [r7, #1252]	; 0x4e4
 8001680:	4413      	add	r3, r2
 8001682:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
		//block_num = 0;
        lseek += merge.size[merge.num];
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <update_source+0x3ac>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <update_source+0x3ac>)
 800168c:	3308      	adds	r3, #8
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8001698:	4413      	add	r3, r2
 800169a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
        f_lseek(&file, lseek);
 800169e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80016a2:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00e fd53 	bl	8010152 <f_lseek>
		merge_next_file(&merge);
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <update_source+0x3ac>)
 80016ae:	f000 faee 	bl	8001c8e <merge_next_file>
		temp[merge.num] = nand_block_off;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <update_source+0x3ac>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016bc:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	; 0x4da
 80016c0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	while(merge.num<MERGE_NUM-1)/*图片资源单独处理*/
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <update_source+0x3ac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d999      	bls.n	8001600 <update_source+0x2cc>
	}
	while(res == FR_OK)
 80016cc:	e16f      	b.n	80019ae <update_source+0x67a>
 80016ce:	bf00      	nop
 80016d0:	08010ee8 	.word	0x08010ee8
 80016d4:	08010eec 	.word	0x08010eec
 80016d8:	58021000 	.word	0x58021000
 80016dc:	58021800 	.word	0x58021800
 80016e0:	24000140 	.word	0x24000140
 80016e4:	24000008 	.word	0x24000008
 80016e8:	240003a8 	.word	0x240003a8
 80016ec:	240003c0 	.word	0x240003c0
	{
        //图片资源处理
        res = f_read(&file, (void *)&head,sizeof(BMP_HEAD), &bw);
 80016f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016f4:	4639      	mov	r1, r7
 80016f6:	f507 7020 	add.w	r0, r7, #640	; 0x280
 80016fa:	2236      	movs	r2, #54	; 0x36
 80016fc:	f00e fb42 	bl	800fd84 <f_read>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
        if(res != FR_OK)
 8001706:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <update_source+0x3e8>
        {
            f_close(&file);
 800170e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001712:	4618      	mov	r0, r3
 8001714:	f00e fcf3 	bl	80100fe <f_close>
            return 1;
 8001718:	2301      	movs	r3, #1
 800171a:	e198      	b.n	8001a4e <update_source+0x71a>
        }
        if(crypt.flag>0)
 800171c:	4bce      	ldr	r3, [pc, #824]	; (8001a58 <update_source+0x724>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <update_source+0x3fe>
        {
            crypt.encrypt_decrypt(crypt.cal_user_key,(void*)&head,sizeof(BMP_HEAD));
 8001724:	4bcc      	ldr	r3, [pc, #816]	; (8001a58 <update_source+0x724>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4acb      	ldr	r2, [pc, #812]	; (8001a58 <update_source+0x724>)
 800172a:	7910      	ldrb	r0, [r2, #4]
 800172c:	4639      	mov	r1, r7
 800172e:	2236      	movs	r2, #54	; 0x36
 8001730:	4798      	blx	r3
        }

        pic_w = (head.pic_w_h << 16) | head.pic_w_l;
 8001732:	463b      	mov	r3, r7
 8001734:	8a9b      	ldrh	r3, [r3, #20]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	b21a      	sxth	r2, r3
 800173a:	463b      	mov	r3, r7
 800173c:	8a5b      	ldrh	r3, [r3, #18]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21b      	sxth	r3, r3
 8001744:	f8a7 34c2 	strh.w	r3, [r7, #1218]	; 0x4c2
        pic_h = (head.pic_h_h << 16) | head.pic_h_l;	
 8001748:	463b      	mov	r3, r7
 800174a:	8b1b      	ldrh	r3, [r3, #24]
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	b21a      	sxth	r2, r3
 8001750:	463b      	mov	r3, r7
 8001752:	8adb      	ldrh	r3, [r3, #22]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	f8a7 34c0 	strh.w	r3, [r7, #1216]	; 0x4c0
        pic_offset = (uint32_t)((head.pic_data_address_h << 16) | head.pic_data_address_l);
 800175e:	463b      	mov	r3, r7
 8001760:	899b      	ldrh	r3, [r3, #12]
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	463a      	mov	r2, r7
 8001766:	8952      	ldrh	r2, [r2, #10]
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
        lseek += pic_offset;
 800176e:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8001772:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8001776:	4413      	add	r3, r2
 8001778:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
        f_lseek(&file,lseek);
 800177c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001780:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8001784:	4618      	mov	r0, r3
 8001786:	f00e fce4 	bl	8010152 <f_lseek>
        screen_size = pic_w*pic_h*head.pic_dip/8;
 800178a:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	; 0x4c2
 800178e:	f8b7 24c0 	ldrh.w	r2, [r7, #1216]	; 0x4c0
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	463a      	mov	r2, r7
 8001798:	8b92      	ldrh	r2, [r2, #28]
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da00      	bge.n	80017a4 <update_source+0x470>
 80017a2:	3307      	adds	r3, #7
 80017a4:	10db      	asrs	r3, r3, #3
 80017a6:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8

        if(buf==NULL)
 80017aa:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d110      	bne.n	80017d4 <update_source+0x4a0>
        {
            buf = (uint8_t *) my_malloc(screen_size);
 80017b2:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 80017b6:	f000 ff09 	bl	80025cc <my_malloc>
 80017ba:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
            if(buf == NULL)
 80017be:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <update_source+0x4a0>
            {
                f_close(&file);
 80017c6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00e fc97 	bl	80100fe <f_close>
                return 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e13c      	b.n	8001a4e <update_source+0x71a>
            }
        }

        if(buf1==NULL)
 80017d4:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d114      	bne.n	8001806 <update_source+0x4d2>
        {
            buf1 = (uint8_t *) my_malloc(screen_size);
 80017dc:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 80017e0:	f000 fef4 	bl	80025cc <my_malloc>
 80017e4:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
            if(buf1 == NULL)
 80017e8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <update_source+0x4d2>
            {
                f_close(&file);
 80017f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00e fc82 	bl	80100fe <f_close>
                my_free(buf);
 80017fa:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	; 0x4d4
 80017fe:	f000 ff65 	bl	80026cc <my_free>
                return 1;
 8001802:	2301      	movs	r3, #1
 8001804:	e123      	b.n	8001a4e <update_source+0x71a>
            }
        }

        if(buf2==NULL)
 8001806:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <update_source+0x50c>
        {
            buf2 = (uint8_t *) my_malloc(screen_size);
 800180e:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 8001812:	f000 fedb 	bl	80025cc <my_malloc>
 8001816:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
            if(buf2 == NULL)
 800181a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <update_source+0x50c>
            {
                f_close(&file);
 8001822:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001826:	4618      	mov	r0, r3
 8001828:	f00e fc69 	bl	80100fe <f_close>
                my_free(buf);
 800182c:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	; 0x4d4
 8001830:	f000 ff4c 	bl	80026cc <my_free>
                my_free(buf1);
 8001834:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8001838:	f000 ff48 	bl	80026cc <my_free>
                return 1;
 800183c:	2301      	movs	r3, #1
 800183e:	e106      	b.n	8001a4e <update_source+0x71a>
            }
        }

        read_source(file, buf, screen_size);
 8001840:	f507 7420 	add.w	r4, r7, #640	; 0x280
 8001844:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8001848:	9389      	str	r3, [sp, #548]	; 0x224
 800184a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800184e:	9388      	str	r3, [sp, #544]	; 0x220
 8001850:	4668      	mov	r0, sp
 8001852:	f104 0310 	add.w	r3, r4, #16
 8001856:	f44f 7208 	mov.w	r2, #544	; 0x220
 800185a:	4619      	mov	r1, r3
 800185c:	f00f fa5a 	bl	8010d14 <memcpy>
 8001860:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001864:	f7ff fc72 	bl	800114c <read_source>
        if(crypt.flag>0)
 8001868:	4b7b      	ldr	r3, [pc, #492]	; (8001a58 <update_source+0x724>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <update_source+0x54e>
        {
            crypt.encrypt_decrypt(crypt.cal_user_key,buf,screen_size);
 8001870:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <update_source+0x724>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4a78      	ldr	r2, [pc, #480]	; (8001a58 <update_source+0x724>)
 8001876:	7910      	ldrb	r0, [r2, #4]
 8001878:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800187c:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8001880:	4798      	blx	r3
        }
        if(head.pic_dip == 24)
 8001882:	463b      	mov	r3, r7
 8001884:	8b9b      	ldrh	r3, [r3, #28]
 8001886:	2b18      	cmp	r3, #24
 8001888:	d114      	bne.n	80018b4 <update_source+0x580>
        {
            bmp_3to2(buf1, buf,pic_w,pic_h);                   
 800188a:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	; 0x4c0
 800188e:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	; 0x4c2
 8001892:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8001896:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800189a:	f000 fc21 	bl	80020e0 <bmp_3to2>
            convert_bmp(buf2,buf1,pic_w,pic_h);
 800189e:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	; 0x4c0
 80018a2:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	; 0x4c2
 80018a6:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 80018aa:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 80018ae:	f000 fbe2 	bl	8002076 <convert_bmp>
 80018b2:	e00d      	b.n	80018d0 <update_source+0x59c>
        }
        else if(head.pic_dip == 16)
 80018b4:	463b      	mov	r3, r7
 80018b6:	8b9b      	ldrh	r3, [r3, #28]
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d109      	bne.n	80018d0 <update_source+0x59c>
        {
            
            convert_bmp(buf2,buf,pic_w,pic_h);
 80018bc:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	; 0x4c0
 80018c0:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	; 0x4c2
 80018c4:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80018c8:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 80018cc:	f000 fbd3 	bl	8002076 <convert_bmp>
        }

        page = screen_size * pic_cnt / nand_dev.page_mainsize;
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <update_source+0x728>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80018da:	fb03 f302 	mul.w	r3, r3, r2
 80018de:	4a60      	ldr	r2, [pc, #384]	; (8001a60 <update_source+0x72c>)
 80018e0:	8bd2      	ldrh	r2, [r2, #30]
 80018e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018e6:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
        if(screen_size % nand_dev.page_mainsize)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <update_source+0x72c>)
 80018ec:	8bdb      	ldrh	r3, [r3, #30]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80018f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80018f8:	fb02 f201 	mul.w	r2, r2, r1
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <update_source+0x5de>
        {
            page += pic_cnt; 
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <update_source+0x728>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800190c:	4413      	add	r3, r2
 800190e:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
        }
        pic_cnt++;
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <update_source+0x728>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <update_source+0x728>)
 800191c:	801a      	strh	r2, [r3, #0]
        block = page / nand_dev.block_pagenum;
 800191e:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <update_source+0x72c>)
 8001920:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001924:	461a      	mov	r2, r3
 8001926:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800192a:	fbb3 f3f2 	udiv	r3, r3, r2
 800192e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
        block += temp[merge.num];
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <update_source+0x730>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800193c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001940:	461a      	mov	r2, r3
 8001942:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001946:	4413      	add	r3, r2
 8001948:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
        page = page % nand_dev.block_pagenum;
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <update_source+0x72c>)
 800194e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001952:	461a      	mov	r2, r3
 8001954:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8001958:	fbb3 f1f2 	udiv	r1, r3, r2
 800195c:	fb02 f201 	mul.w	r2, r2, r1
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
        wirte_nand(block,page,buf2,screen_size,0);
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800196e:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8001972:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8001976:	f8d7 04b4 	ldr.w	r0, [r7, #1204]	; 0x4b4
 800197a:	f000 f9af 	bl	8001cdc <wirte_nand>
        lseek += screen_size;
 800197e:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8001982:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8001986:	4413      	add	r3, r2
 8001988:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
        res = f_lseek(&file,lseek);
 800198c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001990:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8001994:	4618      	mov	r0, r3
 8001996:	f00e fbdc 	bl	8010152 <f_lseek>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
        if(lseek>=f_size(&file))
 80019a0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d205      	bcs.n	80019ba <update_source+0x686>
	while(res == FR_OK)
 80019ae:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f43f ae9c 	beq.w	80016f0 <update_source+0x3bc>
 80019b8:	e000      	b.n	80019bc <update_source+0x688>
        {
            break;
 80019ba:	bf00      	nop
	//src_cfg.block_lang_addr = block_addr[4];  //str.bin
	//src_cfg.block_icon_addr = block_addr[5];  //15.bin
	//src_cfg.block_screen_addr = block_addr[6];    //17.bin
	//src_cfg.block_bmp_addr = block_addr[7];   //bmp
    //temp[0] = block_addr[0];
    temp[1] = temp[0];
 80019bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019c6:	805a      	strh	r2, [r3, #2]
    tmp = temp[4];  //15.bin
 80019c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019cc:	891b      	ldrh	r3, [r3, #8]
 80019ce:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
    temp[4] = temp[5];//str.bin 
 80019d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019d6:	895a      	ldrh	r2, [r3, #10]
 80019d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019dc:	811a      	strh	r2, [r3, #8]
    temp[5] = tmp;
 80019de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019e2:	f8b7 24b2 	ldrh.w	r2, [r7, #1202]	; 0x4b2
 80019e6:	815a      	strh	r2, [r3, #10]
//    EEPROM_Write(0,1,(void*)&temp[1],MODE_16_BIT,7);
    bsp_WriteCpuFlash((uint32_t)para_flash_area + 32*1,(void*)&temp[1],7);
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <update_source+0x734>)
 80019ea:	f103 0020 	add.w	r0, r3, #32
 80019ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f2:	3302      	adds	r3, #2
 80019f4:	2207      	movs	r2, #7
 80019f6:	4619      	mov	r1, r3
 80019f8:	f000 fcf3 	bl	80023e2 <bsp_WriteCpuFlash>
	
	//EEPROM_Erase(0);
    buf[0] = 'n';
 80019fc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8001a00:	226e      	movs	r2, #110	; 0x6e
 8001a02:	701a      	strb	r2, [r3, #0]
    buf[1] = 'a';
 8001a04:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8001a08:	3301      	adds	r3, #1
 8001a0a:	2261      	movs	r2, #97	; 0x61
 8001a0c:	701a      	strb	r2, [r3, #0]
    buf[2] = 'n';
 8001a0e:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8001a12:	3302      	adds	r3, #2
 8001a14:	226e      	movs	r2, #110	; 0x6e
 8001a16:	701a      	strb	r2, [r3, #0]
    buf[3] = 'd';
 8001a18:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	2264      	movs	r2, #100	; 0x64
 8001a20:	701a      	strb	r2, [r3, #0]
//    EEPROM_Write(0,0,(void*)buf,MODE_8_BIT,4);
    bsp_WriteCpuFlash((uint32_t)para_flash_area + 32*2,(void*)buf,4);
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <update_source+0x734>)
 8001a24:	3340      	adds	r3, #64	; 0x40
 8001a26:	2204      	movs	r2, #4
 8001a28:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fcd8 	bl	80023e2 <bsp_WriteCpuFlash>
    f_close(&file);
 8001a32:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00e fb61 	bl	80100fe <f_close>
    f_mount(&fs,"0:",0);
 8001a3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a40:	2200      	movs	r2, #0
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <update_source+0x738>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00d ff99 	bl	800f97c <f_mount>
	return res;
 8001a4a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f207 47ec 	addw	r7, r7, #1260	; 0x4ec
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	240003a8 	.word	0x240003a8
 8001a5c:	24000184 	.word	0x24000184
 8001a60:	24000008 	.word	0x24000008
 8001a64:	24000140 	.word	0x24000140
 8001a68:	240003c0 	.word	0x240003c0
 8001a6c:	08010ee8 	.word	0x08010ee8

08001a70 <analysis_merge_head>:
-->merge:合并文件结构体
* Output Para  : NULL
* Return Value : 0,正确 1，文件头数据不对 2，解析失败
*******************************************************************************/
static uint8_t analysis_merge_head(uint8_t* buf,merge_file_t* merge)
{
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	b095      	sub	sp, #84	; 0x54
 8001a74:	af0e      	add	r7, sp, #56	; 0x38
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    uint16_t i,ret=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	82bb      	strh	r3, [r7, #20]
    uint32_t addr=0,size=0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
	ret = crypt.encrypt_decrypt(crypt.cal_key,buf,MERGE_HEAD_SIZE);
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <analysis_merge_head+0x178>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <analysis_merge_head+0x178>)
 8001a8c:	78d0      	ldrb	r0, [r2, #3]
 8001a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4798      	blx	r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	82bb      	strh	r3, [r7, #20]
	if(ret!=MERGE_HEAD_SIZE)
 8001a9a:	8abb      	ldrh	r3, [r7, #20]
 8001a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa0:	d001      	beq.n	8001aa6 <analysis_merge_head+0x36>
	{
		//解密失败
		return 2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e09b      	b.n	8001bde <analysis_merge_head+0x16e>
	}
    for(i=0;i<MERGE_NUM*8;i+=8)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	82fb      	strh	r3, [r7, #22]
 8001aaa:	e051      	b.n	8001b50 <analysis_merge_head+0xe0>
    {
		merge->num = i/8;
 8001aac:	8afb      	ldrh	r3, [r7, #22]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	701a      	strb	r2, [r3, #0]
        addr = (uint32_t)(buf[i]<<(24))+(uint32_t)(buf[i+1]<<(16))+(uint32_t)(buf[i+2]<<(8))+(uint32_t)buf[i+3];
 8001ab8:	8afb      	ldrh	r3, [r7, #22]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	8afb      	ldrh	r3, [r7, #22]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	440b      	add	r3, r1
 8001ad2:	8afa      	ldrh	r2, [r7, #22]
 8001ad4:	3202      	adds	r2, #2
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	440a      	add	r2, r1
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	0212      	lsls	r2, r2, #8
 8001ade:	4413      	add	r3, r2
 8001ae0:	8afa      	ldrh	r2, [r7, #22]
 8001ae2:	3203      	adds	r2, #3
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	440a      	add	r2, r1
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
		if(i<(MERGE_NUM-1)*8)
 8001aee:	8afb      	ldrh	r3, [r7, #22]
 8001af0:	2b37      	cmp	r3, #55	; 0x37
 8001af2:	d823      	bhi.n	8001b3c <analysis_merge_head+0xcc>
		{
 			size = (uint32_t)(buf[i+4]<<(24))+(uint32_t)(buf[i+5]<<(16))+(uint32_t)(buf[i+6]<<(8))+(uint32_t)buf[i+7];
 8001af4:	8afb      	ldrh	r3, [r7, #22]
 8001af6:	3304      	adds	r3, #4
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	061b      	lsls	r3, r3, #24
 8001b00:	4619      	mov	r1, r3
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	3305      	adds	r3, #5
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	440b      	add	r3, r1
 8001b10:	8afa      	ldrh	r2, [r7, #22]
 8001b12:	3206      	adds	r2, #6
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	440a      	add	r2, r1
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	0212      	lsls	r2, r2, #8
 8001b1c:	4413      	add	r3, r2
 8001b1e:	8afa      	ldrh	r2, [r7, #22]
 8001b20:	3207      	adds	r2, #7
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	440a      	add	r2, r1
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
			merge->size[merge->num] = size;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	3308      	adds	r3, #8
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
		}
        
        merge->addr[merge->num] = addr;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
    for(i=0;i<MERGE_NUM*8;i+=8)
 8001b4a:	8afb      	ldrh	r3, [r7, #22]
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	82fb      	strh	r3, [r7, #22]
 8001b50:	8afb      	ldrh	r3, [r7, #22]
 8001b52:	2b3f      	cmp	r3, #63	; 0x3f
 8001b54:	d9aa      	bls.n	8001aac <analysis_merge_head+0x3c>

		
    }

    merge->size[MERGE_NUM-1] = 0;/*图片文件固定大小，需要读取图片文件时再判断*/
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40

    ret = check_addr(*merge);
 8001b5c:	683e      	ldr	r6, [r7, #0]
 8001b5e:	466d      	mov	r5, sp
 8001b60:	f106 0410 	add.w	r4, r6, #16
 8001b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	602b      	str	r3, [r5, #0]
 8001b74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b78:	f000 f838 	bl	8001bec <check_addr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	82bb      	strh	r3, [r7, #20]
    if(ret!=0)
 8001b80:	8abb      	ldrh	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <analysis_merge_head+0x11c>
    {
        return ret;
 8001b86:	8abb      	ldrh	r3, [r7, #20]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e028      	b.n	8001bde <analysis_merge_head+0x16e>
    }
	crypt.flag = buf[64];
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <analysis_merge_head+0x178>)
 8001b94:	701a      	strb	r2, [r3, #0]
	if(crypt.flag==1)        //加密
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <analysis_merge_head+0x178>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d11d      	bne.n	8001bda <analysis_merge_head+0x16a>
	{
		crypt.user_key_size = buf[65];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <analysis_merge_head+0x178>)
 8001ba6:	709a      	strb	r2, [r3, #2]
        if(crypt.user_key_size>0)
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <analysis_merge_head+0x178>)
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d014      	beq.n	8001bda <analysis_merge_head+0x16a>
        {
            memcpy(crypt.user_key,&buf[66],crypt.user_key_size);
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <analysis_merge_head+0x178>)
 8001bb2:	68d8      	ldr	r0, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3342      	adds	r3, #66	; 0x42
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <analysis_merge_head+0x178>)
 8001bba:	7892      	ldrb	r2, [r2, #2]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f00f f8a9 	bl	8010d14 <memcpy>
            crypt.cal_user_key = crypt.cal(crypt.user_key,crypt.user_key_size);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <analysis_merge_head+0x178>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <analysis_merge_head+0x178>)
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	4907      	ldr	r1, [pc, #28]	; (8001be8 <analysis_merge_head+0x178>)
 8001bcc:	7889      	ldrb	r1, [r1, #2]
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4798      	blx	r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <analysis_merge_head+0x178>)
 8001bd8:	711a      	strb	r2, [r3, #4]
        }      
	}
    
	
    return ret;
 8001bda:	8abb      	ldrh	r3, [r7, #20]
 8001bdc:	b2db      	uxtb	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	240003a8 	.word	0x240003a8

08001bec <check_addr>:
-->merge:合并文件结构体
* Output Para  : NULL
* Return Value : 0，正确；1，错误
*******************************************************************************/
static uint8_t check_addr(merge_file_t merge)
{
 8001bec:	b084      	sub	sp, #16
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	f107 0c10 	add.w	ip, r7, #16
 8001bf8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t i,j;
    uint32_t tmp;
    for(i=0;i<MERGE_NUM-3;i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e03a      	b.n	8001c78 <check_addr+0x8c>
    {
        if(merge.addr[i]!=0xffffffff)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f107 0210 	add.w	r2, r7, #16
 8001c0a:	4413      	add	r3, r2
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d02e      	beq.n	8001c72 <check_addr+0x86>
        {
            for(j=i+1;j<MERGE_NUM-2;j++)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	3301      	adds	r3, #1
 8001c18:	71bb      	strb	r3, [r7, #6]
 8001c1a:	e025      	b.n	8001c68 <check_addr+0x7c>
            {
                if(merge.addr[j]!=0xffffffff)
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f107 0210 	add.w	r2, r7, #16
 8001c24:	4413      	add	r3, r2
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d019      	beq.n	8001c62 <check_addr+0x76>
                {
                    tmp = merge.addr[i]+merge.size[i];
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f107 0210 	add.w	r2, r7, #16
 8001c36:	4413      	add	r3, r2
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f107 0110 	add.w	r1, r7, #16
 8001c44:	440b      	add	r3, r1
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	603b      	str	r3, [r7, #0]
                    if(tmp!=merge.addr[j])
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	f107 0210 	add.w	r2, r7, #16
 8001c54:	4413      	add	r3, r2
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d008      	beq.n	8001c70 <check_addr+0x84>
                    {
                        return 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <check_addr+0x94>
            for(j=i+1;j<MERGE_NUM-2;j++)
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	3301      	adds	r3, #1
 8001c66:	71bb      	strb	r3, [r7, #6]
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d9d6      	bls.n	8001c1c <check_addr+0x30>
 8001c6e:	e000      	b.n	8001c72 <check_addr+0x86>
                    }
                    break;
 8001c70:	bf00      	nop
    for(i=0;i<MERGE_NUM-3;i++)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	3301      	adds	r3, #1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d9c1      	bls.n	8001c02 <check_addr+0x16>
                }
            }
            
        }
    }
    return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	b004      	add	sp, #16
 8001c8c:	4770      	bx	lr

08001c8e <merge_next_file>:
-->merge:合并文件结构体
* Output Para  : NULL
* Return Value : NULL
*******************************************************************************/
static uint8_t merge_next_file(merge_file_t* merge)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
    //uint8_t ret=0;
    merge->num++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	701a      	strb	r2, [r3, #0]
    while(merge->num<MERGE_NUM)
 8001ca2:	e010      	b.n	8001cc6 <merge_next_file+0x38>
    {
        
        if(merge->addr[merge->num]!=0xffffffff)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d001      	beq.n	8001cba <merge_next_file+0x2c>
        {
            return 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00a      	b.n	8001cd0 <merge_next_file+0x42>
        }
        merge->num++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	701a      	strb	r2, [r3, #0]
    while(merge->num<MERGE_NUM)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	d9ea      	bls.n	8001ca4 <merge_next_file+0x16>
    }
    return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <wirte_nand>:
-->size:数据大小
* Output Para  : 无
* Return Value : 无
*******************************************************************************/
static void wirte_nand(uint32_t block,uint32_t page,uint8_t* buf,uint32_t size,uint8_t flag)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
    uint16_t block1,page1;
    uint32_t size1=0,tmp_size;//size2=0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
    //uint8_t * wbuf = NULL;
    
    block1 = block;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	83fb      	strh	r3, [r7, #30]
    page1 = page;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	83bb      	strh	r3, [r7, #28]
    //mem_set(wbuf,0xff,nand_dev.page_totalsize);
//    if(wbuf == NULL)
//    {
//        return;
//    }
    while(size1<size)
 8001cf6:	e02d      	b.n	8001d54 <wirte_nand+0x78>
    {
        tmp_size = ((size-size1)>(nand_dev.page_mainsize)?(nand_dev.page_mainsize):(size-size1));
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <wirte_nand+0x8c>)
 8001d00:	8bd2      	ldrh	r2, [r2, #30]
 8001d02:	4293      	cmp	r3, r2
 8001d04:	bf28      	it	cs
 8001d06:	4613      	movcs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
        if(flag==0)
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d111      	bne.n	8001d36 <wirte_nand+0x5a>
        {
            nand_dev.page_program(NAND_LBNToPBN(block1),page1,buf+size1,0);
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <wirte_nand+0x8c>)
 8001d14:	691c      	ldr	r4, [r3, #16]
 8001d16:	8bfb      	ldrh	r3, [r7, #30]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fa33 	bl	8003184 <NAND_LBNToPBN>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4618      	mov	r0, r3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	441a      	add	r2, r3
 8001d28:	8bb9      	ldrh	r1, [r7, #28]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	47a0      	blx	r4
            size1+=tmp_size;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4413      	add	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
            //wbuf[nand_dev.page_mainsize + 1] = 0xee;
            //nand_dev.page_program(nand_dev.lut[block1],page1,wbuf,1);
            //size1+=nand_dev.page_mainsize;
        }
        
        page1++;
 8001d36:	8bbb      	ldrh	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	83bb      	strh	r3, [r7, #28]
        if(page1>=nand_dev.block_pagenum)
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <wirte_nand+0x8c>)
 8001d3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	8bba      	ldrh	r2, [r7, #28]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d304      	bcc.n	8001d54 <wirte_nand+0x78>
        {
            block1++;
 8001d4a:	8bfb      	ldrh	r3, [r7, #30]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	83fb      	strh	r3, [r7, #30]
            page1 = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	83bb      	strh	r3, [r7, #28]
    while(size1<size)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3cd      	bcc.n	8001cf8 <wirte_nand+0x1c>
        }
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000008 	.word	0x24000008

08001d6c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <MX_UART5_Init+0x94>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_UART5_Init+0x90>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_UART5_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_UART5_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_UART5_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001db4:	4811      	ldr	r0, [pc, #68]	; (8001dfc <MX_UART5_Init+0x90>)
 8001db6:	f006 ffe5 	bl	8008d84 <HAL_UART_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f7fe ffd2 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_UART5_Init+0x90>)
 8001dc8:	f007 ff35 	bl	8009c36 <HAL_UARTEx_SetTxFifoThreshold>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f7fe ffc9 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <MX_UART5_Init+0x90>)
 8001dda:	f007 ff6a 	bl	8009cb2 <HAL_UARTEx_SetRxFifoThreshold>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f7fe ffc0 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_UART5_Init+0x90>)
 8001dea:	f007 feeb 	bl	8009bc4 <HAL_UARTEx_DisableFifoMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f7fe ffb8 	bl	8000d68 <Error_Handler>
  }

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	24000290 	.word	0x24000290
 8001e00:	40005000 	.word	0x40005000

08001e04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <MX_USART1_UART_Init+0x94>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e4c:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e4e:	f006 ff99 	bl	8008d84 <HAL_UART_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e58:	f7fe ff86 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e60:	f007 fee9 	bl	8009c36 <HAL_UARTEx_SetTxFifoThreshold>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e6a:	f7fe ff7d 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e72:	f007 ff1e 	bl	8009cb2 <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e7c:	f7fe ff74 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_USART1_UART_Init+0x90>)
 8001e82:	f007 fe9f 	bl	8009bc4 <HAL_UARTEx_DisableFifoMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e8c:	f7fe ff6c 	bl	8000d68 <Error_Handler>
  }

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2400031c 	.word	0x2400031c
 8001e98:	40011000 	.word	0x40011000

08001e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	; 0x38
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_UART_MspInit+0x170>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d14e      	bne.n	8001f5c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ebe:	4b54      	ldr	r3, [pc, #336]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eec:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	4b45      	ldr	r3, [pc, #276]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001f28:	230e      	movs	r3, #14
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	4619      	mov	r1, r3
 8001f32:	4838      	ldr	r0, [pc, #224]	; (8002014 <HAL_UART_MspInit+0x178>)
 8001f34:	f002 f834 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4830      	ldr	r0, [pc, #192]	; (8002018 <HAL_UART_MspInit+0x17c>)
 8001f56:	f002 f823 	bl	8003fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f5a:	e052      	b.n	8002002 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_UART_MspInit+0x180>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d14d      	bne.n	8002002 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f6c:	4a28      	ldr	r2, [pc, #160]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a21      	ldr	r2, [pc, #132]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_UART_MspInit+0x174>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480e      	ldr	r0, [pc, #56]	; (8002014 <HAL_UART_MspInit+0x178>)
 8001fdc:	f001 ffe0 	bl	8003fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <HAL_UART_MspInit+0x184>)
 8001ffe:	f001 ffcf 	bl	8003fa0 <HAL_GPIO_Init>
}
 8002002:	bf00      	nop
 8002004:	3738      	adds	r7, #56	; 0x38
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40005000 	.word	0x40005000
 8002010:	58024400 	.word	0x58024400
 8002014:	58020400 	.word	0x58020400
 8002018:	58020800 	.word	0x58020800
 800201c:	40011000 	.word	0x40011000
 8002020:	58020000 	.word	0x58020000

08002024 <Reset_Handler>:
 8002024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800205c <LoopFillZerobss+0x10>
 8002028:	f7ff f804 	bl	8001034 <SystemInit>
 800202c:	2100      	movs	r1, #0
 800202e:	e003      	b.n	8002038 <LoopCopyDataInit>

08002030 <CopyDataInit>:
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LoopFillZerobss+0x14>)
 8002032:	585b      	ldr	r3, [r3, r1]
 8002034:	5043      	str	r3, [r0, r1]
 8002036:	3104      	adds	r1, #4

08002038 <LoopCopyDataInit>:
 8002038:	480a      	ldr	r0, [pc, #40]	; (8002064 <LoopFillZerobss+0x18>)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <LoopFillZerobss+0x1c>)
 800203c:	1842      	adds	r2, r0, r1
 800203e:	429a      	cmp	r2, r3
 8002040:	d3f6      	bcc.n	8002030 <CopyDataInit>
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <LoopFillZerobss+0x20>)
 8002044:	e002      	b.n	800204c <LoopFillZerobss>

08002046 <FillZerobss>:
 8002046:	2300      	movs	r3, #0
 8002048:	f842 3b04 	str.w	r3, [r2], #4

0800204c <LoopFillZerobss>:
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <LoopFillZerobss+0x24>)
 800204e:	429a      	cmp	r2, r3
 8002050:	d3f9      	bcc.n	8002046 <FillZerobss>
 8002052:	f00e fe2b 	bl	8010cac <__libc_init_array>
 8002056:	f7fe fd19 	bl	8000a8c <main>
 800205a:	4770      	bx	lr
 800205c:	24080000 	.word	0x24080000
 8002060:	0801103c 	.word	0x0801103c
 8002064:	24000000 	.word	0x24000000
 8002068:	2400011c 	.word	0x2400011c
 800206c:	2400011c 	.word	0x2400011c
 8002070:	24020f08 	.word	0x24020f08

08002074 <ADC3_IRQHandler>:
 8002074:	e7fe      	b.n	8002074 <ADC3_IRQHandler>

08002076 <convert_bmp>:
	}
	
}

void convert_bmp(uint8_t * dst, uint8_t * src,uint16_t pic_w,uint16_t pic_h)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	4611      	mov	r1, r2
 8002082:	461a      	mov	r2, r3
 8002084:	460b      	mov	r3, r1
 8002086:	80fb      	strh	r3, [r7, #6]
 8002088:	4613      	mov	r3, r2
 800208a:	80bb      	strh	r3, [r7, #4]
	uint8_t * pd = dst;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	61fb      	str	r3, [r7, #28]
	uint8_t * ps;
	
	uint16_t i;
	
	for(i = 0;i < pic_h ;i++ )
 8002090:	2300      	movs	r3, #0
 8002092:	837b      	strh	r3, [r7, #26]
 8002094:	e01b      	b.n	80020ce <convert_bmp+0x58>
	{
		ps = &src[(pic_h - 1 - i) * pic_w * 2];
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	8b7b      	ldrh	r3, [r7, #26]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4413      	add	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
		
		mem_copy(pd,ps,pic_w * 2);
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	461a      	mov	r2, r3
 80020b4:	6979      	ldr	r1, [r7, #20]
 80020b6:	69f8      	ldr	r0, [r7, #28]
 80020b8:	f000 fb1f 	bl	80026fa <mem_copy>
		
		pd += pic_w * 2;
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	461a      	mov	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	61fb      	str	r3, [r7, #28]
	for(i = 0;i < pic_h ;i++ )
 80020c8:	8b7b      	ldrh	r3, [r7, #26]
 80020ca:	3301      	adds	r3, #1
 80020cc:	837b      	strh	r3, [r7, #26]
 80020ce:	8b7a      	ldrh	r2, [r7, #26]
 80020d0:	88bb      	ldrh	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3df      	bcc.n	8002096 <convert_bmp+0x20>
		
	}
	
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <bmp_3to2>:


void bmp_3to2(uint8_t *dst, uint8_t *src,uint16_t pic_w,uint16_t pic_h)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	460b      	mov	r3, r1
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80bb      	strh	r3, [r7, #4]
	uint8_t r,g,b;

	
	uint32_t i;

	src1 = src;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	61fb      	str	r3, [r7, #28]
	dst1 = (uint16_t *)dst;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	617b      	str	r3, [r7, #20]

	for(i=0;i<pic_w*pic_h;i++)
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	e026      	b.n	8002152 <bmp_3to2+0x72>
	{
		
		b = src1[0];
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	74fb      	strb	r3, [r7, #19]
	    g = src1[1];
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	785b      	ldrb	r3, [r3, #1]
 800210e:	74bb      	strb	r3, [r7, #18]
		r = src1[2];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	789b      	ldrb	r3, [r3, #2]
 8002114:	747b      	strb	r3, [r7, #17]
		
		


		dst1[i] = (b >> 3) | ((g >> 3)<<5) | ((r >> 3) << 10);
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	b21a      	sxth	r2, r3
 800211e:	7cbb      	ldrb	r3, [r7, #18]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21a      	sxth	r2, r3
 800212c:	7c7b      	ldrb	r3, [r7, #17]
 800212e:	08db      	lsrs	r3, r3, #3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	029b      	lsls	r3, r3, #10
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b219      	sxth	r1, r3
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4413      	add	r3, r2
 8002142:	b28a      	uxth	r2, r1
 8002144:	801a      	strh	r2, [r3, #0]
		
	
		src1 += 3;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3303      	adds	r3, #3
 800214a:	61fb      	str	r3, [r7, #28]
	for(i=0;i<pic_w*pic_h;i++)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	3301      	adds	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	88ba      	ldrh	r2, [r7, #4]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	461a      	mov	r2, r3
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4293      	cmp	r3, r2
 8002160:	d3d0      	bcc.n	8002104 <bmp_3to2+0x24>
		}
	*/
	}

	
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	; 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <bsp_GetSector>:
*	形    参: 无
*	返 回 值: 扇区号（0-7)
*********************************************************************************************************
*/
uint32_t bsp_GetSector(uint32_t Address)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

	if (((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1)) || \
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <bsp_GetSector+0x150>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d803      	bhi.n	800218c <bsp_GetSector+0x1c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800218a:	d207      	bcs.n	800219c <bsp_GetSector+0x2c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <bsp_GetSector+0x154>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d806      	bhi.n	80021a2 <bsp_GetSector+0x32>
		((Address < ADDR_FLASH_SECTOR_1_BANK2) && (Address >= ADDR_FLASH_SECTOR_0_BANK2)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800219a:	d302      	bcc.n	80021a2 <bsp_GetSector+0x32>
	{
		sector = FLASH_SECTOR_0;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e086      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1)) || \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <bsp_GetSector+0x158>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d803      	bhi.n	80021b2 <bsp_GetSector+0x42>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <bsp_GetSector+0x150>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d807      	bhi.n	80021c2 <bsp_GetSector+0x52>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <bsp_GetSector+0x15c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d806      	bhi.n	80021c8 <bsp_GetSector+0x58>
	  ((Address < ADDR_FLASH_SECTOR_2_BANK2) && (Address >= ADDR_FLASH_SECTOR_1_BANK2)))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <bsp_GetSector+0x154>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d902      	bls.n	80021c8 <bsp_GetSector+0x58>
	{
		sector = FLASH_SECTOR_1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e073      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1)) || \
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <bsp_GetSector+0x160>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d803      	bhi.n	80021d8 <bsp_GetSector+0x68>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3d      	ldr	r2, [pc, #244]	; (80022c8 <bsp_GetSector+0x158>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <bsp_GetSector+0x78>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3e      	ldr	r2, [pc, #248]	; (80022d4 <bsp_GetSector+0x164>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d806      	bhi.n	80021ee <bsp_GetSector+0x7e>
	  ((Address < ADDR_FLASH_SECTOR_3_BANK2) && (Address >= ADDR_FLASH_SECTOR_2_BANK2)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <bsp_GetSector+0x15c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d902      	bls.n	80021ee <bsp_GetSector+0x7e>
	{
		sector = FLASH_SECTOR_2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e060      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1)) || \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <bsp_GetSector+0x168>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d803      	bhi.n	80021fe <bsp_GetSector+0x8e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <bsp_GetSector+0x160>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d807      	bhi.n	800220e <bsp_GetSector+0x9e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a36      	ldr	r2, [pc, #216]	; (80022dc <bsp_GetSector+0x16c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d806      	bhi.n	8002214 <bsp_GetSector+0xa4>
	  ((Address < ADDR_FLASH_SECTOR_4_BANK2) && (Address >= ADDR_FLASH_SECTOR_3_BANK2)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <bsp_GetSector+0x164>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d902      	bls.n	8002214 <bsp_GetSector+0xa4>
	{
		sector = FLASH_SECTOR_3;
 800220e:	2303      	movs	r3, #3
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e04d      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1)) || \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <bsp_GetSector+0x170>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d803      	bhi.n	8002224 <bsp_GetSector+0xb4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <bsp_GetSector+0x168>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d807      	bhi.n	8002234 <bsp_GetSector+0xc4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <bsp_GetSector+0x174>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d806      	bhi.n	800223a <bsp_GetSector+0xca>
	  ((Address < ADDR_FLASH_SECTOR_5_BANK2) && (Address >= ADDR_FLASH_SECTOR_4_BANK2)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <bsp_GetSector+0x16c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d902      	bls.n	800223a <bsp_GetSector+0xca>
	{
		sector = FLASH_SECTOR_4;
 8002234:	2304      	movs	r3, #4
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e03a      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1)) || \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <bsp_GetSector+0x178>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d803      	bhi.n	800224a <bsp_GetSector+0xda>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <bsp_GetSector+0x170>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d807      	bhi.n	800225a <bsp_GetSector+0xea>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <bsp_GetSector+0x17c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d806      	bhi.n	8002260 <bsp_GetSector+0xf0>
	  ((Address < ADDR_FLASH_SECTOR_6_BANK2) && (Address >= ADDR_FLASH_SECTOR_5_BANK2)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <bsp_GetSector+0x174>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d902      	bls.n	8002260 <bsp_GetSector+0xf0>
	{
		sector = FLASH_SECTOR_5;
 800225a:	2305      	movs	r3, #5
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e027      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1)) || \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <bsp_GetSector+0x180>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d803      	bhi.n	8002270 <bsp_GetSector+0x100>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <bsp_GetSector+0x178>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <bsp_GetSector+0x110>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <bsp_GetSector+0x184>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d806      	bhi.n	8002286 <bsp_GetSector+0x116>
	  ((Address < ADDR_FLASH_SECTOR_7_BANK2) && (Address >= ADDR_FLASH_SECTOR_6_BANK2)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <bsp_GetSector+0x17c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d902      	bls.n	8002286 <bsp_GetSector+0x116>
	{
		sector = FLASH_SECTOR_6;
 8002280:	2306      	movs	r3, #6
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e014      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else if (((Address < ADDR_FLASH_SECTOR_0_BANK2) && (Address >= ADDR_FLASH_SECTOR_7_BANK1)) || \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800228c:	d203      	bcs.n	8002296 <bsp_GetSector+0x126>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <bsp_GetSector+0x180>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d807      	bhi.n	80022a6 <bsp_GetSector+0x136>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <bsp_GetSector+0x188>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d806      	bhi.n	80022ac <bsp_GetSector+0x13c>
	  ((Address < CPU_FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7_BANK2)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <bsp_GetSector+0x184>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d902      	bls.n	80022ac <bsp_GetSector+0x13c>
	{
		sector = FLASH_SECTOR_7;
 80022a6:	2307      	movs	r3, #7
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e001      	b.n	80022b0 <bsp_GetSector+0x140>
	}
	else
	{
		sector = FLASH_SECTOR_7;
 80022ac:	2307      	movs	r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
	}

	return sector;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	0801ffff 	.word	0x0801ffff
 80022c4:	0811ffff 	.word	0x0811ffff
 80022c8:	0803ffff 	.word	0x0803ffff
 80022cc:	0813ffff 	.word	0x0813ffff
 80022d0:	0805ffff 	.word	0x0805ffff
 80022d4:	0815ffff 	.word	0x0815ffff
 80022d8:	0807ffff 	.word	0x0807ffff
 80022dc:	0817ffff 	.word	0x0817ffff
 80022e0:	0809ffff 	.word	0x0809ffff
 80022e4:	0819ffff 	.word	0x0819ffff
 80022e8:	080bffff 	.word	0x080bffff
 80022ec:	081bffff 	.word	0x081bffff
 80022f0:	080dffff 	.word	0x080dffff
 80022f4:	081dffff 	.word	0x081dffff
 80022f8:	081ffffe 	.word	0x081ffffe

080022fc <bsp_CmpCpuFlash>:
*			FLASH_REQ_ERASE		2	Flash需要先擦除,再写
*			FLASH_PARAM_ERR		3	函数参数错误
*********************************************************************************************************
*/
uint8_t bsp_CmpCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpBuf, uint32_t _ulSize)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint8_t ucIsEqu;	/* 相等标志 */
	uint8_t ucByte;

	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
	if (_ulFlashAddr + _ulSize > CPU_FLASH_BASE_ADDR + CPU_FLASH_SIZE)
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8002312:	d901      	bls.n	8002318 <bsp_CmpCpuFlash+0x1c>
	{
		return FLASH_PARAM_ERR;		/*　函数参数错误　*/
 8002314:	2303      	movs	r3, #3
 8002316:	e02b      	b.n	8002370 <bsp_CmpCpuFlash+0x74>
	}

	/* 长度为0时返回正确 */
	if (_ulSize == 0)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <bsp_CmpCpuFlash+0x26>
	{
		return FLASH_IS_EQU;		/* Flash内容和待写入的数据相等 */
 800231e:	2300      	movs	r3, #0
 8002320:	e026      	b.n	8002370 <bsp_CmpCpuFlash+0x74>
	}

	ucIsEqu = 1;			/* 先假设所有字节和待写入的数据相等，如果遇到任何一个不相等，则设置为 0 */
 8002322:	2301      	movs	r3, #1
 8002324:	74fb      	strb	r3, [r7, #19]
	for (i = 0; i < _ulSize; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e017      	b.n	800235c <bsp_CmpCpuFlash+0x60>
	{
		ucByte = *(uint8_t *)_ulFlashAddr;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	74bb      	strb	r3, [r7, #18]

		if (ucByte != *_ucpBuf)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	7cba      	ldrb	r2, [r7, #18]
 8002338:	429a      	cmp	r2, r3
 800233a:	d006      	beq.n	800234a <bsp_CmpCpuFlash+0x4e>
		{
			if (ucByte != 0xFF)
 800233c:	7cbb      	ldrb	r3, [r7, #18]
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d001      	beq.n	8002346 <bsp_CmpCpuFlash+0x4a>
			{
				return FLASH_REQ_ERASE;		/* 需要擦除后再写 */
 8002342:	2302      	movs	r3, #2
 8002344:	e014      	b.n	8002370 <bsp_CmpCpuFlash+0x74>
			}
			else
			{
				ucIsEqu = 0;	/* 不相等，需要写 */
 8002346:	2300      	movs	r3, #0
 8002348:	74fb      	strb	r3, [r7, #19]
			}
		}

		_ulFlashAddr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
		_ucpBuf++;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3301      	adds	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < _ulSize; i++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d3e3      	bcc.n	800232c <bsp_CmpCpuFlash+0x30>
	}

	if (ucIsEqu == 1)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <bsp_CmpCpuFlash+0x72>
	{
		return FLASH_IS_EQU;	/* Flash内容和待写入的数据相等，不需要擦除和写操作 */
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <bsp_CmpCpuFlash+0x74>
	}
	else
	{
		return FLASH_REQ_WRITE;	/* Flash不需要擦除，直接写 */
 800236e:	2301      	movs	r3, #1
	}
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <bsp_EraseCpuFlash>:
*			  HAL_TIMEOUT  = 0x03
*
*********************************************************************************************************
*/
uint8_t bsp_EraseCpuFlash(uint32_t _ulFlashAddr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	uint32_t FirstSector = 0, NbOfSectors = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28


	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
	uint8_t re;

	/* 解锁 */
	HAL_FLASH_Unlock();
 8002390:	f001 fca6 	bl	8003ce0 <HAL_FLASH_Unlock>

	/* 获取此地址所在的扇区 */
	FirstSector = bsp_GetSector(_ulFlashAddr);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff feeb 	bl	8002170 <bsp_GetSector>
 800239a:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* 固定1个扇区 */
	NbOfSectors = 1;
 800239c:	2301      	movs	r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* 擦除扇区配置 */
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80023a4:	2320      	movs	r3, #32
 80023a6:	623b      	str	r3, [r7, #32]

	if (_ulFlashAddr >= ADDR_FLASH_SECTOR_0_BANK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80023ae:	d201      	bcs.n	80023b4 <bsp_EraseCpuFlash+0x38>
	{
		//EraseInitStruct.Banks         = FLASH_BANK_2;
	}
	else
	{
		EraseInitStruct.Banks         = FLASH_BANK_1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
	}

	EraseInitStruct.Sector        = FirstSector;
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbSectors     = NbOfSectors;
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	61fb      	str	r3, [r7, #28]

	/* 扇区擦除 */
	re = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 80023bc:	f107 020c 	add.w	r2, r7, #12
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fd16 	bl	8003df8 <HAL_FLASHEx_Erase>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* 擦除完毕后，上锁 */
	HAL_FLASH_Lock();
 80023d2:	f001 fca7 	bl	8003d24 <HAL_FLASH_Lock>

	return re;
 80023d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3730      	adds	r7, #48	; 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <bsp_WriteCpuFlash>:
*			 _ulSize : 数据大小（单位是字节, 必须是32字节整数倍）
*	返 回 值: 0-成功，1-数据长度或地址溢出，2-写Flash出错(估计Flash寿命到)
*********************************************************************************************************
*/
uint8_t bsp_WriteCpuFlash(uint32_t _ulFlashAddr, uint8_t *_ucpSrc, uint32_t _ulSize)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b092      	sub	sp, #72	; 0x48
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint8_t ucRet;

	/* 如果偏移地址超过芯片容量，则不改写输出缓冲区 */
	if (_ulFlashAddr + _ulSize > CPU_FLASH_BASE_ADDR + CPU_FLASH_SIZE)
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 80023f8:	d901      	bls.n	80023fe <bsp_WriteCpuFlash+0x1c>
	{
		return 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e082      	b.n	8002504 <bsp_WriteCpuFlash+0x122>
	}

	/* 长度为0时不继续操作  */
	if (_ulSize == 0)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <bsp_WriteCpuFlash+0x26>
	{
		return 0;
 8002404:	2300      	movs	r3, #0
 8002406:	e07d      	b.n	8002504 <bsp_WriteCpuFlash+0x122>
	}

	ucRet = bsp_CmpCpuFlash(_ulFlashAddr, _ucpSrc, _ulSize);
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff ff75 	bl	80022fc <bsp_CmpCpuFlash>
 8002412:	4603      	mov	r3, r0
 8002414:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	if (ucRet == FLASH_IS_EQU)
 8002418:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <bsp_WriteCpuFlash+0x42>
	{
		return 0;
 8002420:	2300      	movs	r3, #0
 8002422:	e06f      	b.n	8002504 <bsp_WriteCpuFlash+0x122>
 8002424:	2301      	movs	r3, #1
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	f383 8810 	msr	PRIMASK, r3
}
 800242e:	bf00      	nop
	}

	__set_PRIMASK(1);  		/* 关中断 */

	/* FLASH 解锁 */
	HAL_FLASH_Unlock();
 8002430:	f001 fc56 	bl	8003ce0 <HAL_FLASH_Unlock>

	for (i = 0; i < _ulSize / 32; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
 8002438:	e019      	b.n	800246e <bsp_WriteCpuFlash+0x8c>
	{
		uint64_t FlashWord[4];

		memcpy((char *)FlashWord, _ucpSrc, 32);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2220      	movs	r2, #32
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f00e fc66 	bl	8010d14 <memcpy>
		_ucpSrc += 32;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3320      	adds	r3, #32
 800244c:	60bb      	str	r3, [r7, #8]

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, _ulFlashAddr, (uint64_t)((uint32_t)FlashWord)) == HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	461a      	mov	r2, r3
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	2001      	movs	r0, #1
 8002458:	f001 fbd2 	bl	8003c00 <HAL_FLASH_Program>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d144      	bne.n	80024ec <bsp_WriteCpuFlash+0x10a>
		{
			_ulFlashAddr = _ulFlashAddr + 32; /* 递增，操作下一个256bit */
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3320      	adds	r3, #32
 8002466:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < _ulSize / 32; i++)
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	3301      	adds	r3, #1
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002474:	429a      	cmp	r2, r3
 8002476:	d3e0      	bcc.n	800243a <bsp_WriteCpuFlash+0x58>
			goto err;
		}
	}

	/* 长度不是32字节整数倍 */
	if (_ulSize % 32)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02a      	beq.n	80024d8 <bsp_WriteCpuFlash+0xf6>
	{
		uint64_t FlashWord[4];

		FlashWord[0] = 0;
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		FlashWord[1] = 0;
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9c7 2306 	strd	r2, r3, [r7, #24]
		FlashWord[2] = 0;
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		FlashWord[3] = 0;
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		memcpy((char *)FlashWord, _ucpSrc, _ulSize % 32);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f00e fc28 	bl	8010d14 <memcpy>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, _ulFlashAddr, (uint64_t)((uint32_t)FlashWord)) == HAL_OK)
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	461a      	mov	r2, r3
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	2001      	movs	r0, #1
 80024ce:	f001 fb97 	bl	8003c00 <HAL_FLASH_Program>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <bsp_WriteCpuFlash+0x10e>
			goto err;
		}
	}

  	/* Flash 加锁，禁止写Flash控制寄存器 */
  	HAL_FLASH_Lock();
 80024d8:	f001 fc24 	bl	8003d24 <HAL_FLASH_Lock>
 80024dc:	2300      	movs	r3, #0
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	f383 8810 	msr	PRIMASK, r3
}
 80024e6:	bf00      	nop

  	__set_PRIMASK(0);  		/* 开中断 */

	return 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e00b      	b.n	8002504 <bsp_WriteCpuFlash+0x122>
			goto err;
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <bsp_WriteCpuFlash+0x110>
			goto err;
 80024f0:	bf00      	nop

err:
  	/* Flash 加锁，禁止写Flash控制寄存器 */
  	HAL_FLASH_Lock();
 80024f2:	f001 fc17 	bl	8003d24 <HAL_FLASH_Lock>
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	f383 8810 	msr	PRIMASK, r3
}
 8002500:	bf00      	nop

  	__set_PRIMASK(0);  		/* 开中断 */

	return 1;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <mem_break>:
	g_mem = h;
}


static memhead *mem_break(memhead *p, unsigned int  size)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	memhead *d = (memhead *)((unsigned char *)p + size);
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

	d->size = p->size - size;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	601a      	str	r2, [r3, #0]
	d->next = p->next;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
	p->size = size;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	601a      	str	r2, [r3, #0]
	return d;
 8002538:	68fb      	ldr	r3, [r7, #12]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <malloc_irq>:



static void * malloc_irq(unsigned int  size)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	memhead **pp, *p;

	if (size & 3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <malloc_irq+0x1c>
	{
		size = ((size + 4) & 0xFFFFFFFC);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	607b      	str	r3, [r7, #4]
	}
	
	size += sizeof(unsigned int);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	607b      	str	r3, [r7, #4]

	if (size < sizeof(memhead))size = sizeof(memhead);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b07      	cmp	r3, #7
 800256e:	d801      	bhi.n	8002574 <malloc_irq+0x2c>
 8002570:	2308      	movs	r3, #8
 8002572:	607b      	str	r3, [r7, #4]
	//看看空内存块链表中是否有适合的可分配空间。

	for (pp = &g_mem; (p = *pp) != NULL; pp = &p->next)
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <malloc_irq+0x80>)
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e01a      	b.n	80025b0 <malloc_irq+0x68>
	{
		if (size <= p->size)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d812      	bhi.n	80025aa <malloc_irq+0x62>
		{
			*pp = (p->size >= size + sizeof(memhead)) ? mem_break(p, size) : p->next;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3308      	adds	r3, #8
 800258c:	429a      	cmp	r2, r3
 800258e:	d305      	bcc.n	800259c <malloc_irq+0x54>
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	68b8      	ldr	r0, [r7, #8]
 8002594:	f7ff ffba 	bl	800250c <mem_break>
 8002598:	4603      	mov	r3, r0
 800259a:	e001      	b.n	80025a0 <malloc_irq+0x58>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	6013      	str	r3, [r2, #0]
			return (&p->next);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3304      	adds	r3, #4
 80025a8:	e009      	b.n	80025be <malloc_irq+0x76>
	for (pp = &g_mem; (p = *pp) != NULL; pp = &p->next)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1de      	bne.n	800257a <malloc_irq+0x32>
		}
	}
	//M("my_malloc Error!");
	//D_Reset();

	return NULL;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	240203c0 	.word	0x240203c0

080025cc <my_malloc>:



void * my_malloc (unsigned int size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	2301      	movs	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f383 8810 	msr	PRIMASK, r3
}
 80025de:	bf00      	nop
	void *p;
	__set_PRIMASK(1);
	p = malloc_irq(size);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ffb1 	bl	8002548 <malloc_irq>
 80025e6:	6178      	str	r0, [r7, #20]
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	bf00      	nop
	__set_PRIMASK(0);
	return p;
 80025f4:	697b      	ldr	r3, [r7, #20]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <mem_merge>:

static void mem_merge(memhead *p1, memhead *p2)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	if ((memhead *)((unsigned char *)p1 + p1->size) == p2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d10b      	bne.n	800262e <mem_merge+0x30>
	{
		p1->size += p2->size;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	441a      	add	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	601a      	str	r2, [r3, #0]
		p1->next = p2->next;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]
	}
	else
	{
		p1->next = p2;
	}
}
 800262c:	e002      	b.n	8002634 <mem_merge+0x36>
		p1->next = p2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	605a      	str	r2, [r3, #4]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <free_irq>:



void free_irq(void *p)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	memhead *x, *y, *z;

	y = (memhead *)((unsigned char *)p - sizeof(unsigned int));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b04      	subs	r3, #4
 800264c:	613b      	str	r3, [r7, #16]
	if (!g_mem)
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <free_irq+0x88>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <free_irq+0x24>
	{
		y->next = NULL;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
		g_mem = y;
 800265c:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <free_irq+0x88>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6013      	str	r3, [r2, #0]
		{
			y->next = NULL;
		}
		mem_merge(x, y);
	}
}
 8002662:	e02d      	b.n	80026c0 <free_irq+0x80>
	else if (y < g_mem)
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <free_irq+0x88>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d209      	bcs.n	8002682 <free_irq+0x42>
		mem_merge(y, g_mem);
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <free_irq+0x88>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	6938      	ldr	r0, [r7, #16]
 8002676:	f7ff ffc2 	bl	80025fe <mem_merge>
		g_mem = y;
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <free_irq+0x88>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	e01e      	b.n	80026c0 <free_irq+0x80>
		for (x = g_mem; (z = x->next) != NULL && z < y; x = z);
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <free_irq+0x88>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e001      	b.n	800268e <free_irq+0x4e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <free_irq+0x62>
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3f3      	bcc.n	800268a <free_irq+0x4a>
		if (z)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <free_irq+0x72>
			mem_merge(y, z);
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	6938      	ldr	r0, [r7, #16]
 80026ac:	f7ff ffa7 	bl	80025fe <mem_merge>
 80026b0:	e002      	b.n	80026b8 <free_irq+0x78>
			y->next = NULL;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
		mem_merge(x, y);
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff9f 	bl	80025fe <mem_merge>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	240203c0 	.word	0x240203c0

080026cc <my_free>:



void my_free(void *p)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	2301      	movs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	bf00      	nop
	__set_PRIMASK(1);
	free_irq(p);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ffad 	bl	8002640 <free_irq>
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f383 8810 	msr	PRIMASK, r3
}
 80026f0:	bf00      	nop
	__set_PRIMASK(0);
	//T_EXIT_CRITICAL();
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <mem_copy>:
	}
	
}

void mem_copy(void * dst, void * src, uint32_t size)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b089      	sub	sp, #36	; 0x24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
	uint8_t *pd = (uint8_t *) dst;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	61fb      	str	r3, [r7, #28]
	uint8_t *ps = (uint8_t *) src;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	for(i = 0;i < size; i++)
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e00a      	b.n	800272a <mem_copy+0x30>
	{
		*pd++ = *ps++;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	1c53      	adds	r3, r2, #1
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	61f9      	str	r1, [r7, #28]
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < size; i++)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3301      	adds	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d3f0      	bcc.n	8002714 <mem_copy+0x1a>
	}
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3724      	adds	r7, #36	; 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <nandwaitrb>:
	0,		
};

static volatile u8 waitrb;
void nandwaitrb(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
	waitrb = 1;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <nandwaitrb+0x14>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	24000187 	.word	0x24000187

08002758 <nandgetwaitstate>:
void nandwaitrbdown(void)
{
	waitrb = 0;
}
static u8 nandgetwaitstate(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	return waitrb;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <nandgetwaitstate+0x14>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	24000187 	.word	0x24000187

08002770 <NAND_Delay>:
//NAND延时
void NAND_Delay(vu32 i)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	while(i>0)i--;
 8002778:	e002      	b.n	8002780 <NAND_Delay+0x10>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3b01      	subs	r3, #1
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <NAND_Delay+0xa>
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <NAND_ReadID>:
#endif
//读取NAND FLASH的ID
//不同的NAND略有不同，请根据自己所使用的NAND FALSH数据手册来编写函数
//返回值:NAND FLASH的ID值
u32 NAND_ReadID(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
    u8 deviceid[5];
    u32 id;
    *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_READID; //发送读取ID命令
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <NAND_ReadID+0x7c>)
 800279c:	2290      	movs	r2, #144	; 0x90
 800279e:	701a      	strb	r2, [r3, #0]
    *(vu8*)(NAND_ADDRESS|NAND_ADDR)=0X00;
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <NAND_ReadID+0x80>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

	//NOP指令E用于CPU空转延时，共60ns, tWHR
    HAL_Delay(NAND_TWHR_DELAY);
 80027a6:	2024      	movs	r0, #36	; 0x24
 80027a8:	f001 f8b8 	bl	800391c <HAL_Delay>

	//ID一共有5个字节
    deviceid[0]=*(vu8*)NAND_ADDRESS;
 80027ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	713b      	strb	r3, [r7, #4]
    deviceid[1]=*(vu8*)NAND_ADDRESS;
 80027b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	717b      	strb	r3, [r7, #5]
    deviceid[2]=*(vu8*)NAND_ADDRESS;
 80027c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	71bb      	strb	r3, [r7, #6]
    deviceid[3]=*(vu8*)NAND_ADDRESS;
 80027ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	71fb      	strb	r3, [r7, #7]
    deviceid[4]=*(vu8*)NAND_ADDRESS;
 80027d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	723b      	strb	r3, [r7, #8]
    //镁光的NAND FLASH的ID一共5个字节，但是为了方便我们只取4个字节组成一个32位的ID值
    //根据NAND FLASH的数据手册，只要是镁光的NAND FLASH，那么一个字节ID的第一个字节都是0X2C
    //所以我们就可以抛弃这个0X2C，只取后面四字节的ID值。
    id=((u32)deviceid[1])<<24|((u32)deviceid[2])<<16|((u32)deviceid[3])<<8|deviceid[4];
 80027de:	797b      	ldrb	r3, [r7, #5]
 80027e0:	061a      	lsls	r2, r3, #24
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	4313      	orrs	r3, r2
 80027ee:	7a3a      	ldrb	r2, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    if(NAND_WaitForReady()==NSTA_READY)return id;//成功
 80027f4:	f000 f864 	bl	80028c0 <NAND_WaitForReady>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d101      	bne.n	8002802 <NAND_ReadID+0x6e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	e001      	b.n	8002806 <NAND_ReadID+0x72>
    else return 0xFFFFFFFF;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	80010000 	.word	0x80010000
 8002814:	80020000 	.word	0x80020000

08002818 <NandFlash_Init>:

static void NandFlash_Init( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);

  // wait 2ms
	TIM_Waitms(2);
#else
    NAND_Reset();       		        //复位NAND
 800281c:	f000 f83c 	bl	8002898 <NAND_Reset>
    HAL_Delay(100);
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	f001 f87b 	bl	800391c <HAL_Delay>
    nand_dev.id=NAND_ReadID();	        //读取ID
 8002826:	f7ff ffb5 	bl	8002794 <NAND_ReadID>
 800282a:	4603      	mov	r3, r0
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <NandFlash_Init+0x4c>)
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
    //printf("NAND ID:%#x\r\n",nand_dev.id);
	//NAND_ModeSet(4);			        //设置为MODE4,高速模式 ，这个到时看看需不需要设置
    nand_dev.page_totalsize=2112;
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <NandFlash_Init+0x4c>)
 8002832:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8002836:	839a      	strh	r2, [r3, #28]
    nand_dev.page_mainsize=2048;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <NandFlash_Init+0x4c>)
 800283a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283e:	83da      	strh	r2, [r3, #30]
    nand_dev.page_sparesize=64;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <NandFlash_Init+0x4c>)
 8002842:	2240      	movs	r2, #64	; 0x40
 8002844:	841a      	strh	r2, [r3, #32]
    nand_dev.block_pagenum=64;
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <NandFlash_Init+0x4c>)
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    nand_dev.plane_blocknum=1024;
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <NandFlash_Init+0x4c>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	849a      	strh	r2, [r3, #36]	; 0x24
    nand_dev.block_totalnum=2048;
 8002856:	4b03      	ldr	r3, [pc, #12]	; (8002864 <NandFlash_Init+0x4c>)
 8002858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285c:	84da      	strh	r2, [r3, #38]	; 0x26

#endif
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	24000008 	.word	0x24000008

08002868 <NAND_ReadStatus>:
//读NAND状态
//返回值:NAND状态值
//bit0:0,成功;1,错误(编程/擦除/READ)
//bit6:0,Busy;1,Ready
u8 NAND_ReadStatus(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
    vu8 data=0;
 800286e:	2300      	movs	r3, #0
 8002870:	71fb      	strb	r3, [r7, #7]
    *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_READSTA;//发送读状态命令
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <NAND_ReadStatus+0x2c>)
 8002874:	2270      	movs	r2, #112	; 0x70
 8002876:	701a      	strb	r2, [r3, #0]
    HAL_Delay(NAND_TWHR_DELAY);		//等待tWHR,再读取状态寄存器
 8002878:	2024      	movs	r0, #36	; 0x24
 800287a:	f001 f84f 	bl	800391c <HAL_Delay>
	data=*(vu8*)NAND_ADDRESS;			//读取状态值
 800287e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	71fb      	strb	r3, [r7, #7]
    return data;
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	b2db      	uxtb	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	80010000 	.word	0x80010000

08002898 <NAND_Reset>:

//复位NAND
//返回值:0,成功;
//    其他,失败
u8 NAND_Reset(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
    *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_RESET;	//复位NAND
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <NAND_Reset+0x24>)
 800289e:	22ff      	movs	r2, #255	; 0xff
 80028a0:	701a      	strb	r2, [r3, #0]
	/* 镁光需要等100ns的tWB+100us的tRST */
    HAL_Delay(NAND_TRST_FIRST_DELAY);
 80028a2:	2006      	movs	r0, #6
 80028a4:	f001 f83a 	bl	800391c <HAL_Delay>
    if(NAND_WaitForReady()==NSTA_READY)return 0;//复位成功
 80028a8:	f000 f80a 	bl	80028c0 <NAND_WaitForReady>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d101      	bne.n	80028b6 <NAND_Reset+0x1e>
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <NAND_Reset+0x20>
    else return 1;								//复位失败
 80028b6:	2301      	movs	r3, #1
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	80010000 	.word	0x80010000

080028c0 <NAND_WaitForReady>:
}
//等待NAND准备好
//返回值:NSTA_TIMEOUT 等待超时了
//      NSTA_READY    已经准备好
u8 NAND_WaitForReady(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
    u8 status=0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	71fb      	strb	r3, [r7, #7]
    vu32 time=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
	while(1)						//等待ready
	{
		status=NAND_ReadStatus();	//获取状态值
 80028ce:	f7ff ffcb 	bl	8002868 <NAND_ReadStatus>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
		if(status&NSTA_READY)break;
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <NAND_WaitForReady+0x32>
		time++;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	603b      	str	r3, [r7, #0]
		if(time>=0X1FFFF)return NSTA_TIMEOUT;//超时
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <NAND_WaitForReady+0x40>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d9ef      	bls.n	80028ce <NAND_WaitForReady+0xe>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e001      	b.n	80028f6 <NAND_WaitForReady+0x36>
		if(status&NSTA_READY)break;
 80028f2:	bf00      	nop
	}
    return NSTA_READY;//准备好
 80028f4:	2340      	movs	r3, #64	; 0x40
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	0001fffe 	.word	0x0001fffe

08002904 <NAND_ReadSpare>:
//pBuffer:接收数据缓冲区
//NumByteToRead:要读取的字节数(不大于page_sparesize)
//返回值:0,成功
//    其他,错误代码
u8 NAND_ReadSpare(u32 PageNum,u16 ColNum,u8 *pBuffer,u16 NumByteToRead , uint32_t block_offset)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	461a      	mov	r2, r3
 8002910:	460b      	mov	r3, r1
 8002912:	817b      	strh	r3, [r7, #10]
 8002914:	4613      	mov	r3, r2
 8002916:	813b      	strh	r3, [r7, #8]
    u8 temp=0;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
    u8 remainbyte=0;
 800291c:	2300      	movs	r3, #0
 800291e:	75bb      	strb	r3, [r7, #22]
	PageNum = PageNum +block_offset * nand_dev.block_pagenum;
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <NAND_ReadSpare+0x70>)
 8002922:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002926:	461a      	mov	r2, r3
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	fb03 f302 	mul.w	r3, r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
    remainbyte=nand_dev.page_sparesize-ColNum;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <NAND_ReadSpare+0x70>)
 8002936:	8c1b      	ldrh	r3, [r3, #32]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	75bb      	strb	r3, [r7, #22]
    if(NumByteToRead>remainbyte) NumByteToRead=remainbyte;  //确保要写入的字节数不大于spare剩余的大小
 8002942:	7dbb      	ldrb	r3, [r7, #22]
 8002944:	b29b      	uxth	r3, r3
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d901      	bls.n	8002950 <NAND_ReadSpare+0x4c>
 800294c:	7dbb      	ldrb	r3, [r7, #22]
 800294e:	813b      	strh	r3, [r7, #8]
    temp=NandFlash_PageRead(PageNum,ColNum+nand_dev.page_mainsize,pBuffer,NumByteToRead);//读取数据
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <NAND_ReadSpare+0x70>)
 8002952:	8bda      	ldrh	r2, [r3, #30]
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	4413      	add	r3, r2
 8002958:	b299      	uxth	r1, r3
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f968 	bl	8002c34 <NandFlash_PageRead>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]
    return temp;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	24000008 	.word	0x24000008

08002978 <create_lut>:

static uint8_t create_lut(uint8_t mode)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]


	}
	return 0;
#else
	 	 u32 i , n = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
	 	u8 buf[4];
		nand_dev.lut=my_malloc((nand_dev.block_totalnum)*2); 	//��LUT�������ڴ�
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <create_lut+0x118>)
 8002988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe1d 	bl	80025cc <my_malloc>
 8002992:	4603      	mov	r3, r0
 8002994:	4a3e      	ldr	r2, [pc, #248]	; (8002a90 <create_lut+0x118>)
 8002996:	6353      	str	r3, [r2, #52]	; 0x34

		if(!nand_dev.lut)return 1;				//�ڴ�����ʧ��
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <create_lut+0x118>)
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <create_lut+0x2c>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e071      	b.n	8002a88 <create_lut+0x110>
		memset(nand_dev.lut,0,nand_dev.block_totalnum*2);			//ȫ������
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <create_lut+0x118>)
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <create_lut+0x118>)
 80029aa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80029ac:	0052      	lsls	r2, r2, #1
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f00e f9bd 	bl	8010d30 <memset>

		for(i=0;i<nand_dev.block_totalnum;i++)		//��λLUT����ʼ��Ϊ��Чֵ��Ҳ����0XFFFF
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e00a      	b.n	80029d2 <create_lut+0x5a>
	    {
	        nand_dev.lut[i]=0XFFFF;
 80029bc:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <create_lut+0x118>)
 80029be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ca:	801a      	strh	r2, [r3, #0]
		for(i=0;i<nand_dev.block_totalnum;i++)		//��λLUT����ʼ��Ϊ��Чֵ��Ҳ����0XFFFF
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <create_lut+0x118>)
 80029d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d6:	461a      	mov	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4293      	cmp	r3, r2
 80029dc:	d3ee      	bcc.n	80029bc <create_lut+0x44>
	    }
		nand_dev.good_blocknum=0;
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <create_lut+0x118>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
		n = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
	    for(i=0;i<nand_dev.block_totalnum;i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e03b      	b.n	8002a66 <create_lut+0xee>
	    {
			NAND_ReadSpare(i*nand_dev.block_pagenum,0,buf,4 , APP_NAND_START_BLOCK);	//��ȡ4���ֽ�
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <create_lut+0x118>)
 80029f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80029f4:	461a      	mov	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fb03 f002 	mul.w	r0, r3, r2
 80029fc:	f107 020c 	add.w	r2, r7, #12
 8002a00:	2300      	movs	r3, #0
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2304      	movs	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	f7ff ff7c 	bl	8002904 <NAND_ReadSpare>
			if(buf[0]==0XFF&&mode)NAND_ReadSpare(i*nand_dev.block_pagenum+1,0,buf,1 , APP_NAND_START_BLOCK);//�ÿ�,����Ҫ���2�λ�����
 8002a0c:	7b3b      	ldrb	r3, [r7, #12]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d112      	bne.n	8002a38 <create_lut+0xc0>
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00f      	beq.n	8002a38 <create_lut+0xc0>
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <create_lut+0x118>)
 8002a1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a1e:	461a      	mov	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fb03 f302 	mul.w	r3, r3, r2
 8002a26:	1c58      	adds	r0, r3, #1
 8002a28:	f107 020c 	add.w	r2, r7, #12
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	2100      	movs	r1, #0
 8002a34:	f7ff ff66 	bl	8002904 <NAND_ReadSpare>
			if(buf[0]==0XFF)//�Ǻÿ�
 8002a38:	7b3b      	ldrb	r3, [r7, #12]
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d110      	bne.n	8002a60 <create_lut+0xe8>
	        {
	            nand_dev.lut[n]=i;//找到nand flaash 0-2047块当中的好快 , 防止出现坏块，逻辑顺序编号0-2047，例如实际有坏块2，则物理上就会跳过这个坏块
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <create_lut+0x118>)
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	801a      	strh	r2, [r3, #0]
				nand_dev.good_blocknum++;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <create_lut+0x118>)
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3301      	adds	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <create_lut+0x118>)
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
				n++;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
	    for(i=0;i<nand_dev.block_totalnum;i++)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <create_lut+0x118>)
 8002a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d3bd      	bcc.n	80029ee <create_lut+0x76>
			}else
			{
				//printf("bad block index:%d\r\n",i);
			}
	    }
		nand_dev.valid_blocknum = nand_dev.good_blocknum;
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <create_lut+0x118>)
 8002a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <create_lut+0x118>)
 8002a78:	859a      	strh	r2, [r3, #44]	; 0x2c
	    if(nand_dev.valid_blocknum<100)return 2;	//��Ч����С��100,������.��Ҫ���¸�ʽ��
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <create_lut+0x118>)
 8002a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a7e:	2b63      	cmp	r3, #99	; 0x63
 8002a80:	d801      	bhi.n	8002a86 <create_lut+0x10e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e000      	b.n	8002a88 <create_lut+0x110>
	    return 0;	//LUT�������
 8002a86:	2300      	movs	r3, #0
#endif
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	24000008 	.word	0x24000008

08002a94 <NandFlash_BlockErase>:
    return ((a << 24) | (b << 16) | (c << 8) | d);
}


static uint8_t NandFlash_BlockErase(uint32_t BlockNum,uint32_t block_offset )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    *pCLE = K9FXX_BLOCK_ERASE_2;

    if(NAND_WaitForReady()== NSTA_READY)
    return(NandFlash_ReadStatus(K9FXX_BLOCK_ERASE_1));
#else
    	BlockNum = BlockNum + block_offset;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	607b      	str	r3, [r7, #4]

    	uint32_t max_pagenum;
    	max_pagenum = nand_dev.block_totalnum;
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <NandFlash_BlockErase+0x98>)
 8002aa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aaa:	60fb      	str	r3, [r7, #12]
    	if(BlockNum > max_pagenum)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d901      	bls.n	8002ab8 <NandFlash_BlockErase+0x24>
    	{//判断地址是否会超出范围
    		return 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e035      	b.n	8002b24 <NandFlash_BlockErase+0x90>
    	}
    	BlockNum = BlockNum * nand_dev.block_pagenum;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <NandFlash_BlockErase+0x98>)
 8002aba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	607b      	str	r3, [r7, #4]


        *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_ERASE0;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <NandFlash_BlockErase+0x9c>)
 8002aca:	2260      	movs	r2, #96	; 0x60
 8002acc:	701a      	strb	r2, [r3, #0]
        //发送块地址
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)BlockNum;
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <NandFlash_BlockErase+0xa0>)
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)(BlockNum>>8);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	0a1a      	lsrs	r2, r3, #8
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <NandFlash_BlockErase+0xa0>)
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)(BlockNum>>16);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0c1a      	lsrs	r2, r3, #16
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <NandFlash_BlockErase+0xa0>)
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
    	nandwaitrb();
 8002aea:	f7ff fe29 	bl	8002740 <nandwaitrb>
        *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_ERASE1;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <NandFlash_BlockErase+0x9c>)
 8002af0:	22d0      	movs	r2, #208	; 0xd0
 8002af2:	701a      	strb	r2, [r3, #0]
    	HAL_Delay(NAND_TBERS_DELAY);		//等待擦除成功
 8002af4:	2008      	movs	r0, #8
 8002af6:	f000 ff11 	bl	800391c <HAL_Delay>
    	cnt2++;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <NandFlash_BlockErase+0xa4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <NandFlash_BlockErase+0xa4>)
 8002b02:	6013      	str	r3, [r2, #0]
    	//NAND_Delay(NAND_TPROG_DELAY);	//等待tPROG

    	NAND_WaitRB(0 , NAND_RB_TBERS_TIME_OUT);			//等待RB=0
 8002b04:	490d      	ldr	r1, [pc, #52]	; (8002b3c <NandFlash_BlockErase+0xa8>)
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 fb5c 	bl	80031c4 <NAND_WaitRB>
        //下面2行代码是真正判断NAND是否准备好的
    	NAND_WaitRB(1 , NAND_RB_TBERS_TIME_OUT);			//等待RB=1
 8002b0c:	490b      	ldr	r1, [pc, #44]	; (8002b3c <NandFlash_BlockErase+0xa8>)
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 fb58 	bl	80031c4 <NAND_WaitRB>

    	if(NAND_WaitForReady()!=NSTA_READY)return NSTA_ERROR;//失败
 8002b14:	f7ff fed4 	bl	80028c0 <NAND_WaitForReady>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d001      	beq.n	8002b22 <NandFlash_BlockErase+0x8e>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <NandFlash_BlockErase+0x90>
        return 0;	//成功
 8002b22:	2300      	movs	r3, #0
#endif
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	24000008 	.word	0x24000008
 8002b30:	80010000 	.word	0x80010000
 8002b34:	80020000 	.word	0x80020000
 8002b38:	240203c4 	.word	0x240203c4
 8002b3c:	00493e00 	.word	0x00493e00

08002b40 <NandFlash_PageProgram>:
//pBbuffer:指向数据存储区
//NumByteToWrite:要写入的字节数，该值不能超过该页剩余字节数！！！
//返回值:0,成功
//    其他,错误代码
static uint8_t NandFlash_PageProgram(uint32_t PageNum,uint16_t ColNum,uint8_t *pBuffer,uint16_t NumByteToWrite )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	817b      	strh	r3, [r7, #10]
 8002b50:	4613      	mov	r3, r2
 8002b52:	813b      	strh	r3, [r7, #8]
    *pCLE = K9FXX_BLOCK_PROGRAM_2;
	
    if(NAND_WaitForReady()== NSTA_READY)
    return( NandFlash_ReadStatus( NAND_READSTA ) );
#else
    vu16 i=0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	827b      	strh	r3, [r7, #18]
    	uint32_t max_pagenum;
    	max_pagenum = nand_dev.block_pagenum;
 8002b58:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <NandFlash_PageProgram+0xe0>)
 8002b5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b5e:	617b      	str	r3, [r7, #20]
    	max_pagenum = max_pagenum * nand_dev.block_totalnum - 1;
 8002b60:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <NandFlash_PageProgram+0xe0>)
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	461a      	mov	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fb03 f302 	mul.w	r3, r3, r2
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
    	if(PageNum > max_pagenum)
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d901      	bls.n	8002b7c <NandFlash_PageProgram+0x3c>
    	{//判断地址是否会超出范围
    		return 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e04c      	b.n	8002c16 <NandFlash_PageProgram+0xd6>
    	else
    	{
    		need_resume = 0;
    	}
#endif
    	*(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_WRITE0;
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <NandFlash_PageProgram+0xe4>)
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	701a      	strb	r2, [r3, #0]
        //发送地址
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)ColNum;
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <NandFlash_PageProgram+0xe8>)
 8002b84:	897a      	ldrh	r2, [r7, #10]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)(ColNum>>8);
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <NandFlash_PageProgram+0xe8>)
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)PageNum;
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <NandFlash_PageProgram+0xe8>)
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)(PageNum>>8);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0a1a      	lsrs	r2, r3, #8
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <NandFlash_PageProgram+0xe8>)
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
        *(vu8*)(NAND_ADDRESS|NAND_ADDR)=(u8)(PageNum>>16);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	0c1a      	lsrs	r2, r3, #16
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <NandFlash_PageProgram+0xe8>)
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]
    	NAND_Delay(NAND_TADL_DELAY);			//等待tADL
 8002bb2:	202a      	movs	r0, #42	; 0x2a
 8002bb4:	f7ff fddc 	bl	8002770 <NAND_Delay>
    	for(i=0;i<NumByteToWrite;i++)		//写入数据
 8002bb8:	2300      	movs	r3, #0
 8002bba:	827b      	strh	r3, [r7, #18]
 8002bbc:	e00c      	b.n	8002bd8 <NandFlash_PageProgram+0x98>
    	{
    		*(vu8*)NAND_ADDRESS=*(vu8*)pBuffer++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	7013      	strb	r3, [r2, #0]
    	for(i=0;i<NumByteToWrite;i++)		//写入数据
 8002bce:	8a7b      	ldrh	r3, [r7, #18]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	827b      	strh	r3, [r7, #18]
 8002bd8:	8a7b      	ldrh	r3, [r7, #18]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d8ed      	bhi.n	8002bbe <NandFlash_PageProgram+0x7e>
    	}
    	nandwaitrb();
 8002be2:	f7ff fdad 	bl	8002740 <nandwaitrb>
        *(vu8*)(NAND_ADDRESS|NAND_CMD)=NAND_WRITE_TURE1;
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <NandFlash_PageProgram+0xe4>)
 8002be8:	2210      	movs	r2, #16
 8002bea:	701a      	strb	r2, [r3, #0]
    	cnt2++;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <NandFlash_PageProgram+0xec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <NandFlash_PageProgram+0xec>)
 8002bf4:	6013      	str	r3, [r2, #0]
    	//NAND_Delay(NAND_TPROG_DELAY);	//等待tPROG

    	NAND_WaitRB(0 , NAND_RB_WRITEPAGE_TIME_OUT);			//等待RB=0
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <NandFlash_PageProgram+0xf0>)
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f000 fae3 	bl	80031c4 <NAND_WaitRB>
        //下面2行代码是真正判断NAND是否准备好的
    	NAND_WaitRB(1 , NAND_RB_WRITEPAGE_TIME_OUT);			//等待RB=1
 8002bfe:	490c      	ldr	r1, [pc, #48]	; (8002c30 <NandFlash_PageProgram+0xf0>)
 8002c00:	2001      	movs	r0, #1
 8002c02:	f000 fadf 	bl	80031c4 <NAND_WaitRB>

    	if(NAND_WaitForReady()!=NSTA_READY)return NSTA_ERROR;//失败
 8002c06:	f7ff fe5b 	bl	80028c0 <NAND_WaitForReady>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d001      	beq.n	8002c14 <NandFlash_PageProgram+0xd4>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <NandFlash_PageProgram+0xd6>
    	if(need_resume == 1)
    	{
    		xTaskResumeAll();
    	}
#endif
        return 0;//成功
 8002c14:	2300      	movs	r3, #0
#endif
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	24000008 	.word	0x24000008
 8002c24:	80010000 	.word	0x80010000
 8002c28:	80020000 	.word	0x80020000
 8002c2c:	240203c4 	.word	0x240203c4
 8002c30:	00052080 	.word	0x00052080

08002c34 <NandFlash_PageRead>:


static uint8_t NandFlash_PageRead(  u32 PageNum,u16 ColNum,u8 *pBuffer,u16 NumByteToRead )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	817b      	strh	r3, [r7, #10]
 8002c44:	4613      	mov	r3, r2
 8002c46:	813b      	strh	r3, [r7, #8]
#if 0

    return ((NandFlash_PageReadFromBeginning(blockNum, pageNum, bufPtr) != 0) ? TRUE:FALSE);
#else
    vu16 i=0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	82bb      	strh	r3, [r7, #20]
	u8 res=0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75bb      	strb	r3, [r7, #22]
	u8 errsta=0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
	else
	{
		need_resume = 0;
	}
#endif
	wait = 0;
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <NandFlash_PageRead+0x100>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    *K9F1G_CLE=NAND_AREA_A;
 8002c5a:	f04f 4302 	mov.w	r3, #2181038080	; 0x82000000
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
    //发送地址
    *K9F1G_ALE=(u8)ColNum;
 8002c62:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002c66:	897a      	ldrh	r2, [r7, #10]
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]
    *K9F1G_ALE=(u8)(ColNum>>8);
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
    *K9F1G_ALE=(u8)PageNum;
 8002c7a:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
    *K9F1G_ALE=(u8)(PageNum>>8);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	0a1a      	lsrs	r2, r3, #8
 8002c88:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
    *K9F1G_ALE=(u8)(PageNum>>16);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0c1a      	lsrs	r2, r3, #16
 8002c94:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
	nandwaitrb();
 8002c9c:	f7ff fd50 	bl	8002740 <nandwaitrb>
    *K9F1G_CLE=NAND_AREA_TRUE1;
 8002ca0:	f04f 4302 	mov.w	r3, #2181038080	; 0x82000000
 8002ca4:	2230      	movs	r2, #48	; 0x30
 8002ca6:	701a      	strb	r2, [r3, #0]
	cnt2++;
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <NandFlash_PageRead+0x104>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <NandFlash_PageRead+0x104>)
 8002cb0:	6013      	str	r3, [r2, #0]
    //下面两行代码是等待R/B引脚变为低电平，其实主要起延时作用的，等待NAND操作R/B引脚。因为我们是通过
    //将STM32的NWAIT引脚(NAND的R/B引脚)配置为普通IO，代码中通过读取NWAIT引脚的电平来判断NAND是否准备
    //就绪的。这个也就是模拟的方法，所以在速度很快的时候有可能NAND还没来得及操作R/B引脚来表示NAND的忙
    //闲状态，结果我们就读取了R/B引脚,这个时候肯定会出错的，事实上确实是会出错!大家也可以将下面两行
    //代码换成延时函数,只不过这里我们为了效率所以没有用延时函数。
	res=NAND_WaitRB(0 , NAND_RB_READPAGE_TIME_OUT);			//等待RB=0
 8002cb2:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 fa84 	bl	80031c4 <NAND_WaitRB>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75bb      	strb	r3, [r7, #22]
    if(res)return NSTA_TIMEOUT;	//超时退出
 8002cc0:	7dbb      	ldrb	r3, [r7, #22]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <NandFlash_PageRead+0x96>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e02f      	b.n	8002d2a <NandFlash_PageRead+0xf6>
    //下面2行代码是真正判断NAND是否准备好的
	res=NAND_WaitRB(1 , NAND_RB_READPAGE_TIME_OUT);			//等待RB=1
 8002cca:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 fa78 	bl	80031c4 <NAND_WaitRB>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75bb      	strb	r3, [r7, #22]
    if(res)return NSTA_TIMEOUT;	//超时退出
 8002cd8:	7dbb      	ldrb	r3, [r7, #22]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <NandFlash_PageRead+0xae>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e023      	b.n	8002d2a <NandFlash_PageRead+0xf6>
	//读取NAND FLASH中的值
	for(i=0;i<NumByteToRead;i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	82bb      	strh	r3, [r7, #20]
 8002ce6:	e00c      	b.n	8002d02 <NandFlash_PageRead+0xce>
	{
		*(vu8*)pBuffer++ = *K9F1G_DATA;
 8002ce8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	780a      	ldrb	r2, [r1, #0]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
	for(i=0;i<NumByteToRead;i++)
 8002cf8:	8abb      	ldrh	r3, [r7, #20]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	82bb      	strh	r3, [r7, #20]
 8002d02:	8abb      	ldrh	r3, [r7, #20]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8ed      	bhi.n	8002ce8 <NandFlash_PageRead+0xb4>
	}
	if(wait == 1)
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <NandFlash_PageRead+0x100>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <NandFlash_PageRead+0xe6>
	{
		//printf("wait = %d\r\n" , wait);
		wait = 2;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <NandFlash_PageRead+0x100>)
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]

	}

	if(NAND_WaitForReady()!=NSTA_READY)errsta=NSTA_ERROR;	//失败
 8002d1a:	f7ff fdd1 	bl	80028c0 <NAND_WaitForReady>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d001      	beq.n	8002d28 <NandFlash_PageRead+0xf4>
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
	if(need_resume == 1)
	{
		xTaskResumeAll();
	}
#endif
		return errsta;	//成功
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
#endif
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	24000186 	.word	0x24000186
 8002d38:	240203c4 	.word	0x240203c4

08002d3c <NandFlash_PageReadFromAddr>:



static uint32_t NandFlash_PageReadFromAddr(uint32_t blockNum, uint32_t pageNum,
                                            uint32_t addrInPage, uint8_t* bufPtr, uint32_t size)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
    volatile uint8_t *pCLE;
    volatile uint8_t *pALE;
    volatile uint8_t *pDATA;
    uint32_t i, curColumm, curRow;    

    i = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24

    pCLE  = K9F1G_CLE;
 8002d4e:	f04f 4302 	mov.w	r3, #2181038080	; 0x82000000
 8002d52:	623b      	str	r3, [r7, #32]
    pALE  = K9F1G_ALE;
 8002d54:	f04f 4301 	mov.w	r3, #2164260864	; 0x81000000
 8002d58:	61fb      	str	r3, [r7, #28]
    pDATA = K9F1G_DATA;
 8002d5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d5e:	61bb      	str	r3, [r7, #24]

    curColumm = addrInPage;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	617b      	str	r3, [r7, #20]
    curRow = blockNum*nand_dev.block_pagenum + pageNum;
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002d66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	fb03 f302 	mul.w	r3, r3, r2
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4413      	add	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
	//vTaskSuspendAll();
	//taskENTER_CRITICAL();
    *pCLE = K9FXX_READ_1;
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    if(nand_dev.id == 0XF1EC0095 || nand_dev.id == 0XECF19500 || nand_dev.id == 0x01F11D80 || nand_dev.id == 0x01F1801D)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <NandFlash_PageReadFromAddr+0x134>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <NandFlash_PageReadFromAddr+0x6a>
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a39      	ldr	r2, [pc, #228]	; (8002e74 <NandFlash_PageReadFromAddr+0x138>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <NandFlash_PageReadFromAddr+0x6a>
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <NandFlash_PageReadFromAddr+0x13c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <NandFlash_PageReadFromAddr+0x6a>
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <NandFlash_PageReadFromAddr+0x140>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d115      	bne.n	8002dd2 <NandFlash_PageReadFromAddr+0x96>
	{
		*pALE =  (uint8_t)(curColumm & 0x000000FF);     /* column address low */
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curColumm & 0x00000F00) >> 8);   /* column address high */
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curRow & 0x00FF));    /* row address low */
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curRow & 0xFF00) >> 8);    /* row address high */
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e021      	b.n	8002e16 <NandFlash_PageReadFromAddr+0xda>
	}
	else if(nand_dev.id == 0xEFDA9590)
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <NandFlash_PageReadFromAddr+0x144>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d11c      	bne.n	8002e16 <NandFlash_PageReadFromAddr+0xda>
	{
		*pALE =  (uint8_t)(curColumm & 0x000000FF);     /* column address low */
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curColumm & 0x00000F00) >> 8);   /* column address high */
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curRow & 0x00FF));    /* row address low */
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	701a      	strb	r2, [r3, #0]

		*pALE = (uint8_t)((curRow & 0xFF00) >> 8);    /* row address high */
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	701a      	strb	r2, [r3, #0]
		
		*pALE = (uint8_t)((curRow & 0x10000) >> 16);    /* row address high */
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	701a      	strb	r2, [r3, #0]
	}
    *pCLE = K9FXX_READ_2;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2230      	movs	r2, #48	; 0x30
 8002e1a:	701a      	strb	r2, [r3, #0]
    if(NAND_WaitForReady()== NSTA_READY)
 8002e1c:	f7ff fd50 	bl	80028c0 <NAND_WaitForReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d11c      	bne.n	8002e60 <NandFlash_PageReadFromAddr+0x124>
	

    //Get data from the current address in the page til the end of the page
	
	
    for ( i = 0; i < (nand_dev.page_totalsize - curColumm); i++ )
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e00f      	b.n	8002e4c <NandFlash_PageReadFromAddr+0x110>
    {
		
		
        *bufPtr = *pDATA;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	701a      	strb	r2, [r3, #0]

        bufPtr++;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	603b      	str	r3, [r7, #0]

        if((i + 1) >= size)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	3301      	adds	r3, #1
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90b      	bls.n	8002e5e <NandFlash_PageReadFromAddr+0x122>
    for ( i = 0; i < (nand_dev.page_totalsize - curColumm); i++ )
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	3301      	adds	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <NandFlash_PageReadFromAddr+0x130>)
 8002e4e:	8b9b      	ldrh	r3, [r3, #28]
 8002e50:	461a      	mov	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3e7      	bcc.n	8002e2c <NandFlash_PageReadFromAddr+0xf0>
 8002e5c:	e000      	b.n	8002e60 <NandFlash_PageReadFromAddr+0x124>
        break;
 8002e5e:	bf00      	nop
    }
	//xTaskResumeAll();
	

    // Ok, return
    return i;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3728      	adds	r7, #40	; 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	24000008 	.word	0x24000008
 8002e70:	f1ec0095 	.word	0xf1ec0095
 8002e74:	ecf19500 	.word	0xecf19500
 8002e78:	01f11d80 	.word	0x01f11d80
 8002e7c:	01f1801d 	.word	0x01f1801d
 8002e80:	efda9590 	.word	0xefda9590

08002e84 <NandFlash_Read_Source>:

                                            
//��nand flash��ҳ���ݣ���ҳ                                            
static uint32_t NandFlash_Read_Source(uint32_t block,uint32_t page,uint32_t addr,uint8_t * buf,uint32_t size)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
    uint32_t size1,size2,temp_size;
    uint16_t block1,page1,addr1;

    size1 = size;
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	61bb      	str	r3, [r7, #24]
    size2 = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t * p;
    block1 = block;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	847b      	strh	r3, [r7, #34]	; 0x22
    page1 = page;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	843b      	strh	r3, [r7, #32]
    addr1 = addr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	83fb      	strh	r3, [r7, #30]
    

    while(size2 < size1)
 8002ea6:	e032      	b.n	8002f0e <NandFlash_Read_Source+0x8a>
    {
        p = buf + size2;
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

        temp_size = (size1 - size2 > nand_dev.page_mainsize - addr1) ? (nand_dev.page_mainsize - addr1) :(size1 - size2);
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <NandFlash_Read_Source+0x9c>)
 8002eb8:	8bd2      	ldrh	r2, [r2, #30]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	8bfa      	ldrh	r2, [r7, #30]
 8002ebe:	1a8a      	subs	r2, r1, r2
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf28      	it	cs
 8002ec4:	4613      	movcs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        //taskENTER_CRITICAL(); 
        NandFlash_PageReadFromAddr(nand_dev.lut[block1],page1,addr1,p,temp_size);
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <NandFlash_Read_Source+0x9c>)
 8002eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	8c39      	ldrh	r1, [r7, #32]
 8002ed8:	8bfa      	ldrh	r2, [r7, #30]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f7ff ff2c 	bl	8002d3c <NandFlash_PageReadFromAddr>
        //taskEXIT_CRITICAL();
        size2 += temp_size;
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
        page1++;
 8002eec:	8c3b      	ldrh	r3, [r7, #32]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	843b      	strh	r3, [r7, #32]
        if(page1 >= nand_dev.block_pagenum)
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <NandFlash_Read_Source+0x9c>)
 8002ef4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	8c3a      	ldrh	r2, [r7, #32]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d304      	bcc.n	8002f0a <NandFlash_Read_Source+0x86>
        {
            page1 = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	843b      	strh	r3, [r7, #32]
            block1++;
 8002f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f06:	3301      	adds	r3, #1
 8002f08:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        addr1 = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	83fb      	strh	r3, [r7, #30]
    while(size2 < size1)
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3c8      	bcc.n	8002ea8 <NandFlash_Read_Source+0x24>
    }
	
	return size2;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	24000008 	.word	0x24000008

08002f24 <NandFlash_BlockProgram>:
    -->size:���ݰ���С
* Output Para  : ��
* Return Value : 0���ɹ� 1������
*******************************************************************************/
static uint8_t NandFlash_BlockProgram(uint32_t block,uint32_t page,uint32_t addr,uint8_t * buf,uint32_t size)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b090      	sub	sp, #64	; 0x40
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
    uint16_t i;
    uint8_t* tmp_buf;
    uint8_t * p;
    uint8_t * block_buf;
  
    page_size = nand_dev.page_mainsize;
 8002f32:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <NandFlash_BlockProgram+0x18c>)
 8002f34:	8bdb      	ldrh	r3, [r3, #30]
 8002f36:	853b      	strh	r3, [r7, #40]	; 0x28
    block_size = nand_dev.block_pagenum*page_size; 
 8002f38:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <NandFlash_BlockProgram+0x18c>)
 8002f3a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002f3e:	461a      	mov	r2, r3
 8002f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f42:	fb03 f302 	mul.w	r3, r3, r2
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    w_size = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
    addr1 = addr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
    p = buf;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	623b      	str	r3, [r7, #32]
    page1 = page;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    if((addr+page*page_size+size)>block_size)   //���
 8002f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	fb02 f203 	mul.w	r2, r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	441a      	add	r2, r3
 8002f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f66:	4413      	add	r3, r2
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d201      	bcs.n	8002f72 <NandFlash_BlockProgram+0x4e>
    {
        return 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e099      	b.n	80030a6 <NandFlash_BlockProgram+0x182>
    }
    
    
    block_buf = my_malloc(block_size);//�黺��
 8002f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f74:	f7ff fb2a 	bl	80025cc <my_malloc>
 8002f78:	61f8      	str	r0, [r7, #28]
    if(block_buf==NULL)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <NandFlash_BlockProgram+0x60>
    {
        return 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e090      	b.n	80030a6 <NandFlash_BlockProgram+0x182>
    }
    memset(block_buf,0xff,block_size);
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	21ff      	movs	r1, #255	; 0xff
 8002f88:	69f8      	ldr	r0, [r7, #28]
 8002f8a:	f00d fed1 	bl	8010d30 <memset>
    tmp_buf = my_malloc(page_size);
 8002f8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fb1b 	bl	80025cc <my_malloc>
 8002f96:	61b8      	str	r0, [r7, #24]
    if(tmp_buf==NULL)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d104      	bne.n	8002fa8 <NandFlash_BlockProgram+0x84>
    {
        my_free(block_buf);
 8002f9e:	69f8      	ldr	r0, [r7, #28]
 8002fa0:	f7ff fb94 	bl	80026cc <my_free>
        return 1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e07e      	b.n	80030a6 <NandFlash_BlockProgram+0x182>
    }
    
    //block_num = (addr1)/(nand_dev.block_pagenum*page_size);//���ַ
    for(i=0;i<nand_dev.block_pagenum;i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fac:	e015      	b.n	8002fda <NandFlash_BlockProgram+0xb6>
    {
        NandFlash_Read_Source(NAND_LBNToPBN(block),i,0,&block_buf[i*page_size],page_size);    //������ǰ������
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8e8 	bl	8003184 <NAND_LBNToPBN>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002fba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f7ff ff58 	bl	8002e84 <NandFlash_Read_Source>
    for(i=0;i<nand_dev.block_pagenum;i++)
 8002fd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <NandFlash_BlockProgram+0x18c>)
 8002fdc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3e2      	bcc.n	8002fae <NandFlash_BlockProgram+0x8a>
    }
    NandFlash_BlockErase(NAND_LBNToPBN(block),0);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f8cb 	bl	8003184 <NAND_LBNToPBN>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd4e 	bl	8002a94 <NandFlash_BlockErase>
    while(w_size<size)
 8002ff8:	e02d      	b.n	8003056 <NandFlash_BlockProgram+0x132>
    {
        //page_num = (addr1+w_size)/page_size;      
        //offset = (addr1+w_size)%page_size;       //��ҳ�ϵ�ƫ��
        //page1 = page_num+page;
        //p = buf + w_size;
        tmp_size = (size - w_size > page_size - addr1) ? (page_size - addr1) :(size - w_size);
 8002ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	1acb      	subs	r3, r1, r3
 8003006:	4293      	cmp	r3, r2
 8003008:	bf28      	it	cs
 800300a:	4613      	movcs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

        for(i=0;i<tmp_size;i++)
 800300e:	2300      	movs	r3, #0
 8003010:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003012:	e013      	b.n	800303c <NandFlash_BlockProgram+0x118>
        {
            block_buf[page1*page_size+addr1+i] = p[w_size+i];
 8003014:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003018:	4413      	add	r3, r2
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	441a      	add	r2, r3
 800301e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003022:	fb01 f103 	mul.w	r1, r1, r3
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	4419      	add	r1, r3
 800302a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800302c:	440b      	add	r3, r1
 800302e:	69f9      	ldr	r1, [r7, #28]
 8003030:	440b      	add	r3, r1
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	701a      	strb	r2, [r3, #0]
        for(i=0;i<tmp_size;i++)
 8003036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003038:	3301      	adds	r3, #1
 800303a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800303c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8e7      	bhi.n	8003014 <NandFlash_BlockProgram+0xf0>
        }
        page1++;        
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	3301      	adds	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
        w_size+=tmp_size;
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	4413      	add	r3, r2
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
        addr1 = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
    while(w_size<size)
 8003056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	429a      	cmp	r2, r3
 800305c:	d3cd      	bcc.n	8002ffa <NandFlash_BlockProgram+0xd6>
    }
    //����д����������
    for(i=0;i<nand_dev.block_pagenum;i++)
 800305e:	2300      	movs	r3, #0
 8003060:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003062:	e012      	b.n	800308a <NandFlash_BlockProgram+0x166>
    {
        //taskENTER_CRITICAL();
        NandFlash_PageProgram(NAND_LBNToPBN(block),i,&block_buf[i*page_size],0);//дһҳ����
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f88d 	bl	8003184 <NAND_LBNToPBN>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003070:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	461a      	mov	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	441a      	add	r2, r3
 800307c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800307e:	2300      	movs	r3, #0
 8003080:	f7ff fd5e 	bl	8002b40 <NandFlash_PageProgram>
    for(i=0;i<nand_dev.block_pagenum;i++)
 8003084:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003086:	3301      	adds	r3, #1
 8003088:	857b      	strh	r3, [r7, #42]	; 0x2a
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <NandFlash_BlockProgram+0x18c>)
 800308c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003090:	b29b      	uxth	r3, r3
 8003092:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003094:	429a      	cmp	r2, r3
 8003096:	d3e5      	bcc.n	8003064 <NandFlash_BlockProgram+0x140>
        //taskEXIT_CRITICAL();
    }
    my_free(block_buf);
 8003098:	69f8      	ldr	r0, [r7, #28]
 800309a:	f7ff fb17 	bl	80026cc <my_free>
    my_free(tmp_buf);
 800309e:	69b8      	ldr	r0, [r7, #24]
 80030a0:	f7ff fb14 	bl	80026cc <my_free>
    return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3738      	adds	r7, #56	; 0x38
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	24000008 	.word	0x24000008

080030b4 <NandFlash_Program>:
    -->size:���ݰ���С
* Output Para  : ��
* Return Value : д���ֽ���
*******************************************************************************/
static uint32_t NandFlash_Program(uint32_t addr,uint8_t * buf,uint32_t size)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b090      	sub	sp, #64	; 0x40
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
    uint16_t page_num,block_num;
    uint16_t page_size,offset,page_offset;
    uint32_t w_size,addr1,block_size,tmp_size,block_left;
    uint8_t * p;
  
    page_size = nand_dev.page_mainsize;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <NandFlash_Program+0xcc>)
 80030c2:	8bdb      	ldrh	r3, [r3, #30]
 80030c4:	867b      	strh	r3, [r7, #50]	; 0x32
    block_size = nand_dev.block_pagenum*page_size;
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <NandFlash_Program+0xcc>)
 80030c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80030cc:	461a      	mov	r2, r3
 80030ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80030d0:	fb03 f302 	mul.w	r3, r3, r2
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    w_size = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
    addr1 = addr;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
    p = buf;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24

    while(w_size<size)
 80030e2:	e043      	b.n	800316c <NandFlash_Program+0xb8>
    {
        p = buf+w_size;
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	4413      	add	r3, r2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
        block_num = (addr1+w_size)/block_size;//���ַ
 80030ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	441a      	add	r2, r3
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	847b      	strh	r3, [r7, #34]	; 0x22
        page_num = (addr1+w_size)/page_size;      
 80030fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	441a      	add	r2, r3
 8003100:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	843b      	strh	r3, [r7, #32]
        page_offset = page_num%(nand_dev.block_pagenum);//����ҳ��ַ
 8003108:	8c3b      	ldrh	r3, [r7, #32]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <NandFlash_Program+0xcc>)
 800310c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003110:	fb93 f1f2 	sdiv	r1, r3, r2
 8003114:	fb02 f201 	mul.w	r2, r2, r1
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	83fb      	strh	r3, [r7, #30]
        offset = (addr1+w_size)%page_size;       //��ҳ�ϵ�ƫ��
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	4413      	add	r3, r2
 8003122:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003124:	fbb3 f1f2 	udiv	r1, r3, r2
 8003128:	fb02 f201 	mul.w	r2, r2, r1
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	83bb      	strh	r3, [r7, #28]
        block_left = block_size - page_offset*page_size-offset;// 
 8003130:	8bfb      	ldrh	r3, [r7, #30]
 8003132:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	1a9a      	subs	r2, r3, r2
 800313e:	8bbb      	ldrh	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	61bb      	str	r3, [r7, #24]
        tmp_size = (size-w_size>block_left)?(block_left):(size-w_size);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4293      	cmp	r3, r2
 800314e:	bf28      	it	cs
 8003150:	4613      	movcs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
        NandFlash_BlockProgram(block_num,page_offset,offset,p,tmp_size);
 8003154:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8003156:	8bf9      	ldrh	r1, [r7, #30]
 8003158:	8bba      	ldrh	r2, [r7, #28]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	f7ff fee0 	bl	8002f24 <NandFlash_BlockProgram>
        w_size += tmp_size;
 8003164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4413      	add	r3, r2
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
    while(w_size<size)
 800316c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d3b7      	bcc.n	80030e4 <NandFlash_Program+0x30>
    }
    
    return w_size;
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003176:	4618      	mov	r0, r3
 8003178:	3738      	adds	r7, #56	; 0x38
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	24000008 	.word	0x24000008

08003184 <NAND_LBNToPBN>:
/*
* function: NAND_LBNToPBN,找到物理上对应的好快
* 逻辑是0-2047按着顺序，但是物理上可能第7块是坏块，所以逻辑对应的值是0-2046，实际物理逻辑块是1-2047，但已经踢除了第7块nand_dev.lut[6]的值为8
*/
u16 NAND_LBNToPBN(u32 LBNNum)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
    u16 PBNNo=0;
 800318c:	2300      	movs	r3, #0
 800318e:	81fb      	strh	r3, [r7, #14]
    //���߼���Ŵ�����Ч������ʱ�򷵻�0XFFFF
    if(LBNNum>nand_dev.good_blocknum)return 0XFFFF;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <NAND_LBNToPBN+0x3c>)
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4293      	cmp	r3, r2
 800319a:	d902      	bls.n	80031a2 <NAND_LBNToPBN+0x1e>
 800319c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a0:	e007      	b.n	80031b2 <NAND_LBNToPBN+0x2e>
    PBNNo=nand_dev.lut[LBNNum];
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <NAND_LBNToPBN+0x3c>)
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	81fb      	strh	r3, [r7, #14]
    return PBNNo;
 80031b0:	89fb      	ldrh	r3, [r7, #14]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	24000008 	.word	0x24000008

080031c4 <NAND_WaitRB>:
//rb:0,等待RB==0
//   1,等待RB==1
//返回值:0,成功
//       1,超时
u8 NAND_WaitRB(vu8 rb , uint32_t timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
    vu32 time=0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		if(rb == 0)//只开启了下降沿中断
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d110      	bne.n	80031fe <NAND_WaitRB+0x3a>
		{
			if((nandgetwaitstate() == 0) || NAND_RB==rb)
 80031dc:	f7ff fabc 	bl	8002758 <nandgetwaitstate>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <NAND_WaitRB+0x36>
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	4812      	ldr	r0, [pc, #72]	; (8003234 <NAND_WaitRB+0x70>)
 80031ea:	f001 f889 	bl	8004300 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <NAND_WaitRB+0x52>
			{
				return 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e016      	b.n	800322c <NAND_WaitRB+0x68>
			}
		}
		else
		{
			if(NAND_RB==rb)//读取高电平
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <NAND_WaitRB+0x70>)
 8003202:	f001 f87d 	bl	8004300 <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	429a      	cmp	r2, r3
 8003210:	d101      	bne.n	8003216 <NAND_WaitRB+0x52>
			{
				return 0;
 8003212:	2300      	movs	r3, #0
 8003214:	e00a      	b.n	800322c <NAND_WaitRB+0x68>
			}
		}
		time++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
		if(time > timeout)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d2d7      	bcs.n	80031d4 <NAND_WaitRB+0x10>
		{
			wait = 1;
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <NAND_WaitRB+0x74>)
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
			return 0;
 800322a:	2300      	movs	r3, #0

		}
	}
	return 0;
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58020c00 	.word	0x58020c00
 8003238:	24000186 	.word	0x24000186

0800323c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8003240:	2005      	movs	r0, #5
 8003242:	f000 fb6b 	bl	800391c <HAL_Delay>
	MX_QUADSPI_Init();
 8003246:	f7fd fd95 	bl	8000d74 <MX_QUADSPI_Init>
	QSPI_ResetDevice(&hqspi);
 800324a:	4808      	ldr	r0, [pc, #32]	; (800326c <w25qxx_Init+0x30>)
 800324c:	f000 f95e 	bl	800350c <QSPI_ResetDevice>
	HAL_Delay(0); // 1ms wait device stable
 8003250:	2000      	movs	r0, #0
 8003252:	f000 fb63 	bl	800391c <HAL_Delay>
	w25qxx_ID = w25qxx_GetID();
 8003256:	f000 f80d 	bl	8003274 <w25qxx_GetID>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <w25qxx_Init+0x34>)
 8003260:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8003262:	f000 f8d9 	bl	8003418 <w25qxx_ReadAllStatusReg>
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	24000244 	.word	0x24000244
 8003270:	240203cc 	.word	0x240203cc

08003274 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <w25qxx_GetID+0x94>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d114      	bne.n	80032ac <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8003282:	2306      	movs	r3, #6
 8003284:	9304      	str	r3, [sp, #16]
 8003286:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	2306      	movs	r3, #6
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a0:	2200      	movs	r2, #0
 80032a2:	2194      	movs	r1, #148	; 0x94
 80032a4:	4819      	ldr	r0, [pc, #100]	; (800330c <w25qxx_GetID+0x98>)
 80032a6:	f000 f98a 	bl	80035be <QSPI_Send_CMD>
 80032aa:	e013      	b.n	80032d4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 80032ac:	2306      	movs	r3, #6
 80032ae:	9304      	str	r3, [sp, #16]
 80032b0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032ba:	9302      	str	r3, [sp, #8]
 80032bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ca:	2200      	movs	r2, #0
 80032cc:	2190      	movs	r1, #144	; 0x90
 80032ce:	480f      	ldr	r0, [pc, #60]	; (800330c <w25qxx_GetID+0x98>)
 80032d0:	f000 f975 	bl	80035be <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032d4:	463b      	mov	r3, r7
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4619      	mov	r1, r3
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <w25qxx_GetID+0x98>)
 80032de:	f002 ff47 	bl	8006170 <HAL_QSPI_Receive>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e008      	b.n	80032fe <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 80032ec:	783b      	ldrb	r3, [r7, #0]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	787b      	ldrb	r3, [r7, #1]
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 80032fc:	88fb      	ldrh	r3, [r7, #6]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2400008c 	.word	0x2400008c
 800330c:	24000244 	.word	0x24000244

08003310 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af06      	add	r7, sp, #24
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <w25qxx_ReadSR+0x7c>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d112      	bne.n	800334c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8003326:	79f9      	ldrb	r1, [r7, #7]
 8003328:	2301      	movs	r3, #1
 800332a:	9304      	str	r3, [sp, #16]
 800332c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003330:	9303      	str	r3, [sp, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2300      	movs	r3, #0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <w25qxx_ReadSR+0x80>)
 8003346:	f000 f93a 	bl	80035be <QSPI_Send_CMD>
 800334a:	e011      	b.n	8003370 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 800334c:	79f9      	ldrb	r1, [r7, #7]
 800334e:	2301      	movs	r3, #1
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003356:	9303      	str	r3, [sp, #12]
 8003358:	2300      	movs	r3, #0
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2300      	movs	r3, #0
 8003368:	2200      	movs	r2, #0
 800336a:	4809      	ldr	r0, [pc, #36]	; (8003390 <w25qxx_ReadSR+0x80>)
 800336c:	f000 f927 	bl	80035be <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003370:	f107 030f 	add.w	r3, r7, #15
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4619      	mov	r1, r3
 800337a:	4805      	ldr	r0, [pc, #20]	; (8003390 <w25qxx_ReadSR+0x80>)
 800337c:	f002 fef8 	bl	8006170 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2400008c 	.word	0x2400008c
 8003390:	24000244 	.word	0x24000244

08003394 <w25qxx_WriteSR>:

uint8_t w25qxx_WriteSR(uint8_t SR,uint8_t data)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af06      	add	r7, sp, #24
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71bb      	strb	r3, [r7, #6]
	if(w25qxx_Mode == w25qxx_SPIMode)
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <w25qxx_WriteSR+0x7c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d112      	bne.n	80033d2 <w25qxx_WriteSR+0x3e>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 80033ac:	79f9      	ldrb	r1, [r7, #7]
 80033ae:	2301      	movs	r3, #1
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2300      	movs	r3, #0
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	2200      	movs	r2, #0
 80033ca:	4812      	ldr	r0, [pc, #72]	; (8003414 <w25qxx_WriteSR+0x80>)
 80033cc:	f000 f8f7 	bl	80035be <QSPI_Send_CMD>
 80033d0:	e011      	b.n	80033f6 <w25qxx_WriteSR+0x62>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 80033d2:	79f9      	ldrb	r1, [r7, #7]
 80033d4:	2301      	movs	r3, #1
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033dc:	9303      	str	r3, [sp, #12]
 80033de:	2300      	movs	r3, #0
 80033e0:	9302      	str	r3, [sp, #8]
 80033e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	2200      	movs	r2, #0
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <w25qxx_WriteSR+0x80>)
 80033f2:	f000 f8e4 	bl	80035be <QSPI_Send_CMD>

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80033f6:	1dbb      	adds	r3, r7, #6
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4619      	mov	r1, r3
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <w25qxx_WriteSR+0x80>)
 8003400:	f002 fe24 	bl	800604c <HAL_QSPI_Transmit>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2400008c 	.word	0x2400008c
 8003414:	24000244 	.word	0x24000244

08003418 <w25qxx_ReadAllStatusReg>:

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

	//w25qxx_WriteSR(W25X_WriteStatusReg1 , 0x00);
	//w25qxx_WriteSR(W25X_WriteStatusReg2 , 0x00);
	//w25qxx_WriteSR(W25X_WriteStatusReg3 , 0x60);

	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 800341c:	2005      	movs	r0, #5
 800341e:	f7ff ff77 	bl	8003310 <w25qxx_ReadSR>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <w25qxx_ReadAllStatusReg+0x34>)
 8003428:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 800342a:	2035      	movs	r0, #53	; 0x35
 800342c:	f7ff ff70 	bl	8003310 <w25qxx_ReadSR>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <w25qxx_ReadAllStatusReg+0x34>)
 8003436:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 8003438:	2015      	movs	r0, #21
 800343a:	f7ff ff69 	bl	8003310 <w25qxx_ReadSR>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	4b02      	ldr	r3, [pc, #8]	; (800344c <w25qxx_ReadAllStatusReg+0x34>)
 8003444:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	240203d0 	.word	0x240203d0

08003450 <w25qxx_SetReadParameters>:
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
}

// Only use in QPI mode
uint8_t w25qxx_SetReadParameters(uint8_t DummyClock,uint8_t WrapLenth)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af06      	add	r7, sp, #24
 8003456:	4603      	mov	r3, r0
 8003458:	460a      	mov	r2, r1
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	4613      	mov	r3, r2
 800345e:	71bb      	strb	r3, [r7, #6]
	uint8_t send;
	send = (DummyClock/2 -1)<<4 | ((WrapLenth/8 - 1)&0x03);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b25a      	sxtb	r2, r3
 800346c:	79bb      	ldrb	r3, [r7, #6]
 800346e:	08db      	lsrs	r3, r3, #3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	b25b      	sxtb	r3, r3
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	b25b      	sxtb	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b25b      	sxtb	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	73fb      	strb	r3, [r7, #15]
	
	W25qxx_WriteEnable();
 8003486:	f000 f835 	bl	80034f4 <W25qxx_WriteEnable>
	
	QSPI_Send_CMD(&hqspi,W25X_SetReadParam,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 800348a:	2301      	movs	r3, #1
 800348c:	9304      	str	r3, [sp, #16]
 800348e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	2300      	movs	r3, #0
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	f44f 7340 	mov.w	r3, #768	; 0x300
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	2200      	movs	r2, #0
 80034a6:	21c0      	movs	r1, #192	; 0xc0
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <w25qxx_SetReadParameters+0x78>)
 80034aa:	f000 f888 	bl	80035be <QSPI_Send_CMD>
	
	return HAL_QSPI_Transmit(&hqspi,&send,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80034ae:	f107 030f 	add.w	r3, r7, #15
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4619      	mov	r1, r3
 80034b8:	4803      	ldr	r0, [pc, #12]	; (80034c8 <w25qxx_SetReadParameters+0x78>)
 80034ba:	f002 fdc7 	bl	800604c <HAL_QSPI_Transmit>
 80034be:	4603      	mov	r3, r0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	24000244 	.word	0x24000244

080034cc <w25qxx_EnterQPI>:

uint8_t w25qxx_EnterQPI(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	/* Enter QSPI memory in QSPI mode */
  if(QSPI_EnterQPI(&hqspi) != w25qxx_OK)
 80034d0:	4807      	ldr	r0, [pc, #28]	; (80034f0 <w25qxx_EnterQPI+0x24>)
 80034d2:	f000 f94f 	bl	8003774 <QSPI_EnterQPI>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <w25qxx_EnterQPI+0x14>
  {
    return w25qxx_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e004      	b.n	80034ea <w25qxx_EnterQPI+0x1e>
  }
	
	return w25qxx_SetReadParameters(8,8);
 80034e0:	2108      	movs	r1, #8
 80034e2:	2008      	movs	r0, #8
 80034e4:	f7ff ffb4 	bl	8003450 <w25qxx_SetReadParameters>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	24000244 	.word	0x24000244

080034f4 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <W25qxx_WriteEnable+0x14>)
 80034fa:	f000 f895 	bl	8003628 <QSPI_WriteEnable>
 80034fe:	4603      	mov	r3, r0
 8003500:	b2db      	uxtb	r3, r3
}
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	24000244 	.word	0x24000244

0800350c <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003518:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 800351a:	2366      	movs	r3, #102	; 0x66
 800351c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003532:	2300      	movs	r3, #0
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003536:	2300      	movs	r3, #0
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800353a:	f107 0308 	add.w	r3, r7, #8
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f002 fd23 	bl	8005f90 <HAL_QSPI_Command>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e030      	b.n	80035b6 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 8003554:	2399      	movs	r3, #153	; 0x99
 8003556:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003558:	f107 0308 	add.w	r3, r7, #8
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f002 fd14 	bl	8005f90 <HAL_QSPI_Command>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e021      	b.n	80035b6 <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003576:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8003578:	2366      	movs	r3, #102	; 0x66
 800357a:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f002 fd02 	bl	8005f90 <HAL_QSPI_Command>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command */
  s_command.Instruction = W25X_ResetDevice;
 8003596:	2399      	movs	r3, #153	; 0x99
 8003598:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f002 fcf3 	bl	8005f90 <HAL_QSPI_Command>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <QSPI_ResetDevice+0xaa>
  }
	
  return w25qxx_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3740      	adds	r7, #64	; 0x40
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <QSPI_Send_CMD>:
static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b092      	sub	sp, #72	; 0x48
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 80035d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 80035dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80035e4:	2300      	movs	r3, #0
 80035e6:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 80035e8:	2300      	movs	r3, #0
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 80035f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 80035f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4619      	mov	r1, r3
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f002 fcbe 	bl	8005f90 <HAL_QSPI_Command>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3748      	adds	r7, #72	; 0x48
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b096      	sub	sp, #88	; 0x58
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <QSPI_WriteEnable+0xb4>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d103      	bne.n	8003640 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003638:	f44f 7340 	mov.w	r3, #768	; 0x300
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
 800363e:	e002      	b.n	8003646 <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8003646:	2306      	movs	r3, #6
 8003648:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800364e:	2300      	movs	r3, #0
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003652:	2300      	movs	r3, #0
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800365e:	2300      	movs	r3, #0
 8003660:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003662:	2300      	movs	r3, #0
 8003664:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003666:	f107 0320 	add.w	r3, r7, #32
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f002 fc8d 	bl	8005f90 <HAL_QSPI_Command>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e028      	b.n	80036d2 <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8003680:	2302      	movs	r3, #2
 8003682:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8003684:	2302      	movs	r3, #2
 8003686:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003690:	2310      	movs	r3, #16
 8003692:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003694:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003698:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 800369a:	2305      	movs	r3, #5
 800369c:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <QSPI_WriteEnable+0xb4>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d103      	bne.n	80036ae <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 80036a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
 80036ac:	e002      	b.n	80036b4 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 80036ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b4:	f107 0208 	add.w	r2, r7, #8
 80036b8:	f107 0120 	add.w	r1, r7, #32
 80036bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f002 fdf2 	bl	80062aa <HAL_QSPI_AutoPolling>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3758      	adds	r7, #88	; 0x58
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2400008c 	.word	0x2400008c

080036e0 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint32_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b096      	sub	sp, #88	; 0x58
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <QSPI_AutoPollingMemReady+0x90>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d103      	bne.n	80036fa <QSPI_AutoPollingMemReady+0x1a>
		s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f8:	e002      	b.n	8003700 <QSPI_AutoPollingMemReady+0x20>
	else
		s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80036fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
	
  s_command.Instruction       = W25X_ReadStatusReg1;
 8003700:	2305      	movs	r3, #5
 8003702:	623b      	str	r3, [r7, #32]
	
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.Address           = 0x00;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize       = QSPI_ADDRESS_8_BITS;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <QSPI_AutoPollingMemReady+0x90>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d103      	bne.n	8003724 <QSPI_AutoPollingMemReady+0x44>
		s_command.DataMode        = QSPI_DATA_1_LINE;
 800371c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
 8003722:	e002      	b.n	800372a <QSPI_AutoPollingMemReady+0x4a>
  else
		s_command.DataMode        = QSPI_DATA_4_LINES;
 8003724:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003732:	2300      	movs	r3, #0
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003736:	2300      	movs	r3, #0
 8003738:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
	s_config.Mask            = W25X_SR_WIP;
 800373e:	2301      	movs	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8003746:	2310      	movs	r3, #16
 8003748:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800374a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800374e:	61fb      	str	r3, [r7, #28]
  s_config.StatusBytesSize = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
  
  return HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout);
 8003754:	f107 0208 	add.w	r2, r7, #8
 8003758:	f107 0120 	add.w	r1, r7, #32
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f002 fda3 	bl	80062aa <HAL_QSPI_AutoPolling>
 8003764:	4603      	mov	r3, r0

}
 8003766:	4618      	mov	r0, r3
 8003768:	3758      	adds	r7, #88	; 0x58
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2400008c 	.word	0x2400008c

08003774 <QSPI_EnterQPI>:
  * @brief  This function enter the QSPI memory in QPI mode
  * @param  hqspi QSPI handle 
  * @retval QSPI status
  */
static uint8_t QSPI_EnterQPI(QSPI_HandleTypeDef *hqspi)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af06      	add	r7, sp, #24
 800377a:	6078      	str	r0, [r7, #4]
	uint8_t stareg2;
	stareg2 = w25qxx_ReadSR(W25X_ReadStatusReg2);
 800377c:	2035      	movs	r0, #53	; 0x35
 800377e:	f7ff fdc7 	bl	8003310 <w25qxx_ReadSR>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]
	if((stareg2 & 0X02) == 0) //QEλδʹ��
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <QSPI_EnterQPI+0x32>
	{
		W25qxx_WriteEnable();
 8003790:	f7ff feb0 	bl	80034f4 <W25qxx_WriteEnable>
		stareg2 |= 1<<1; //ʹ��QEλ
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	73fb      	strb	r3, [r7, #15]
		w25qxx_WriteSR(W25X_WriteStatusReg2,stareg2);
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	4619      	mov	r1, r3
 80037a0:	2031      	movs	r0, #49	; 0x31
 80037a2:	f7ff fdf7 	bl	8003394 <w25qxx_WriteSR>
	}
	QSPI_Send_CMD(hqspi,W25X_EnterQSPIMode,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_DATA_NONE,0);
 80037a6:	2300      	movs	r3, #0
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9302      	str	r3, [sp, #8]
 80037b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2300      	movs	r3, #0
 80037be:	2200      	movs	r2, #0
 80037c0:	2138      	movs	r1, #56	; 0x38
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fefb 	bl	80035be <QSPI_Send_CMD>
  
	w25qxx_Mode = w25qxx_QPIMode;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <QSPI_EnterQPI+0x80>)
 80037ca:	2204      	movs	r2, #4
 80037cc:	701a      	strb	r2, [r3, #0]
	/* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != w25qxx_OK)
 80037ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff84 	bl	80036e0 <QSPI_AutoPollingMemReady>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <QSPI_EnterQPI+0x6e>
  {
    return w25qxx_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e003      	b.n	80037ea <QSPI_EnterQPI+0x76>
  }
	
  w25qxx_Mode = w25qxx_QPIMode;
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <QSPI_EnterQPI+0x80>)
 80037e4:	2204      	movs	r2, #4
 80037e6:	701a      	strb	r2, [r3, #0]
	
  return w25qxx_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2400008c 	.word	0x2400008c

080037f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fe:	2003      	movs	r0, #3
 8003800:	f000 f9b0 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003804:	f003 fd5a 	bl	80072bc <HAL_RCC_GetSysClockFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_Init+0x68>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	4913      	ldr	r1, [pc, #76]	; (8003864 <HAL_Init+0x6c>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
 8003820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_Init+0x68>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_Init+0x6c>)
 800382c:	5cd3      	ldrb	r3, [r2, r3]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_Init+0x70>)
 800383a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <HAL_Init+0x74>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003842:	2000      	movs	r0, #0
 8003844:	f000 f814 	bl	8003870 <HAL_InitTick>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e002      	b.n	8003858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003852:	f7fd fb6b 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	58024400 	.word	0x58024400
 8003864:	08010f70 	.word	0x08010f70
 8003868:	24000004 	.word	0x24000004
 800386c:	24000000 	.word	0x24000000

08003870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_InitTick+0x60>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e021      	b.n	80038c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_InitTick+0x64>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_InitTick+0x60>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003892:	fbb3 f3f1 	udiv	r3, r3, r1
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f9a3 	bl	8003be6 <HAL_SYSTICK_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00e      	b.n	80038c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d80a      	bhi.n	80038c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b0:	2200      	movs	r2, #0
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f000 f95f 	bl	8003b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <HAL_InitTick+0x68>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	24000094 	.word	0x24000094
 80038d4:	24000000 	.word	0x24000000
 80038d8:	24000090 	.word	0x24000090

080038dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_IncTick+0x20>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_IncTick+0x24>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4413      	add	r3, r2
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <HAL_IncTick+0x24>)
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	24000094 	.word	0x24000094
 8003900:	240203d4 	.word	0x240203d4

08003904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return uwTick;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_GetTick+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	240203d4 	.word	0x240203d4

0800391c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003924:	f7ff ffee 	bl	8003904 <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d005      	beq.n	8003942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_Delay+0x44>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003942:	bf00      	nop
 8003944:	f7ff ffde 	bl	8003904 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8f7      	bhi.n	8003944 <HAL_Delay+0x28>
  {
  }
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	24000094 	.word	0x24000094

08003964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_GetREVID+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0c1b      	lsrs	r3, r3, #16
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	5c001000 	.word	0x5c001000

0800397c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <__NVIC_SetPriorityGrouping+0x40>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003998:	4013      	ands	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039aa:	4a04      	ldr	r2, [pc, #16]	; (80039bc <__NVIC_SetPriorityGrouping+0x40>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	60d3      	str	r3, [r2, #12]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00
 80039c0:	05fa0000 	.word	0x05fa0000

080039c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__NVIC_GetPriorityGrouping+0x18>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 0307 	and.w	r3, r3, #7
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	db0b      	blt.n	8003a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f003 021f 	and.w	r2, r3, #31
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <__NVIC_EnableIRQ+0x38>)
 80039fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2001      	movs	r0, #1
 8003a02:	fa00 f202 	lsl.w	r2, r0, r2
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100

08003a1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db12      	blt.n	8003a54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	490a      	ldr	r1, [pc, #40]	; (8003a60 <__NVIC_DisableIRQ+0x44>)
 8003a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a42:	3320      	adds	r3, #32
 8003a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a48:	f3bf 8f4f 	dsb	sy
}
 8003a4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a4e:	f3bf 8f6f 	isb	sy
}
 8003a52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff8e 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff05 	bl	800397c <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b88:	f7ff ff1c 	bl	80039c4 <__NVIC_GetPriorityGrouping>
 8003b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f7ff ff90 	bl	8003ab8 <NVIC_EncodePriority>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff5f 	bl	8003a64 <__NVIC_SetPriority>
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff0f 	bl	80039e0 <__NVIC_EnableIRQ>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff1f 	bl	8003a1c <__NVIC_DisableIRQ>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff96 	bl	8003b20 <SysTick_Config>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8003c14:	2308      	movs	r3, #8
 8003c16:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_FLASH_Program+0xd4>)
 8003c1a:	7d1b      	ldrb	r3, [r3, #20]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_FLASH_Program+0x24>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e053      	b.n	8003ccc <HAL_FLASH_Program+0xcc>
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_FLASH_Program+0xd4>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c30:	d315      	bcc.n	8003c5e <HAL_FLASH_Program+0x5e>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_FLASH_Program+0xd8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d811      	bhi.n	8003c5e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_FLASH_Program+0xd4>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c4a:	f000 f883 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8003c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_FLASH_Program+0x62>
 8003c5c:	e031      	b.n	8003cc2 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e034      	b.n	8003ccc <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_FLASH_Program+0xdc>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <HAL_FLASH_Program+0xdc>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8003c6e:	f3bf 8f6f 	isb	sy
}
 8003c72:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003c74:	f3bf 8f4f 	dsb	sy
}
 8003c78:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	3304      	adds	r3, #4
 8003c86:	623b      	str	r3, [r7, #32]
        src_addr++;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	61fb      	str	r3, [r7, #28]
        row_index--;
 8003c8e:	7efb      	ldrb	r3, [r7, #27]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8003c94:	7efb      	ldrb	r3, [r7, #27]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ef      	bne.n	8003c7a <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8003c9a:	f3bf 8f6f 	isb	sy
}
 8003c9e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003ca0:	f3bf 8f4f 	dsb	sy
}
 8003ca4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cac:	f000 f852 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_FLASH_Program+0xdc>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <HAL_FLASH_Program+0xdc>)
 8003cbc:	f023 0302 	bic.w	r3, r3, #2
 8003cc0:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_FLASH_Program+0xd4>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	751a      	strb	r2, [r3, #20]

  return status;
 8003cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	240203d8 	.word	0x240203d8
 8003cd8:	0801ffff 	.word	0x0801ffff
 8003cdc:	52002000 	.word	0x52002000

08003ce0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_FLASH_Unlock+0x38>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_FLASH_Unlock+0x38>)
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_FLASH_Unlock+0x3c>)
 8003cf4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_FLASH_Unlock+0x38>)
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_FLASH_Unlock+0x40>)
 8003cfa:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_FLASH_Unlock+0x38>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	52002000 	.word	0x52002000
 8003d1c:	45670123 	.word	0x45670123
 8003d20:	cdef89ab 	.word	0xcdef89ab

08003d24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_FLASH_Lock+0x2c>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_FLASH_Lock+0x2c>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_FLASH_Lock+0x2c>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	52002000 	.word	0x52002000

08003d54 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <FLASH_WaitForLastOperation+0x98>)
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <FLASH_WaitForLastOperation+0x9c>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8003d6c:	f7ff fdca 	bl	8003904 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003d72:	e010      	b.n	8003d96 <FLASH_WaitForLastOperation+0x42>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d00c      	beq.n	8003d96 <FLASH_WaitForLastOperation+0x42>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7ff fdc2 	bl	8003904 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <FLASH_WaitForLastOperation+0x3e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <FLASH_WaitForLastOperation+0x42>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e025      	b.n	8003de2 <FLASH_WaitForLastOperation+0x8e>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <FLASH_WaitForLastOperation+0x98>)
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d0e7      	beq.n	8003d74 <FLASH_WaitForLastOperation+0x20>
      }
    }
  }

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <FLASH_WaitForLastOperation+0xa0>)
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <FLASH_WaitForLastOperation+0xa0>)
 8003db8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8003dba:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <FLASH_WaitForLastOperation+0x98>)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e00e      	b.n	8003de2 <FLASH_WaitForLastOperation+0x8e>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10a      	bne.n	8003de0 <FLASH_WaitForLastOperation+0x8c>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <FLASH_WaitForLastOperation+0x98>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd6:	d103      	bne.n	8003de0 <FLASH_WaitForLastOperation+0x8c>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <FLASH_WaitForLastOperation+0x98>)
 8003dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dde:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	52002000 	.word	0x52002000
 8003df0:	17ee0000 	.word	0x17ee0000
 8003df4:	240203d8 	.word	0x240203d8

08003df8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_FLASHEx_Erase+0x10c>)
 8003e08:	7d1b      	ldrb	r3, [r3, #20]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_FLASHEx_Erase+0x1a>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e074      	b.n	8003efc <HAL_FLASHEx_Erase+0x104>
 8003e12:	4b3c      	ldr	r3, [pc, #240]	; (8003f04 <HAL_FLASHEx_Erase+0x10c>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_FLASHEx_Erase+0x10c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e30:	f7ff ff90 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d157      	bne.n	8003ef4 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d11e      	bne.n	8003e8a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f000 f85a 	bl	8003f10 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d045      	beq.n	8003ef4 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003e68:	2101      	movs	r1, #1
 8003e6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e6e:	f7ff ff71 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_FLASHEx_Erase+0x110>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_FLASHEx_Erase+0x110>)
 8003e82:	f023 0308 	bic.w	r3, r3, #8
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e034      	b.n	8003ef4 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	e024      	b.n	8003ee4 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	f000 f857 	bl	8003f58 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ebc:	f7ff ff4a 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_FLASHEx_Erase+0x110>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	490f      	ldr	r1, [pc, #60]	; (8003f08 <HAL_FLASHEx_Erase+0x110>)
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_FLASHEx_Erase+0x114>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	601a      	str	r2, [r3, #0]
          break;
 8003edc:	e00a      	b.n	8003ef4 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4413      	add	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3d2      	bcc.n	8003e9a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_FLASHEx_Erase+0x10c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	751a      	strb	r2, [r3, #20]

  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	240203d8 	.word	0x240203d8
 8003f08:	52002000 	.word	0x52002000
 8003f0c:	fffff8fb 	.word	0xfffff8fb

08003f10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f2e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	4907      	ldr	r1, [pc, #28]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <FLASH_MassErase+0x44>)
 8003f42:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8003f46:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	52002000 	.word	0x52002000

08003f58 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <FLASH_Erase_Sector+0x44>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <FLASH_Erase_Sector+0x44>)
 8003f74:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8003f78:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <FLASH_Erase_Sector+0x44>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0219      	lsls	r1, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <FLASH_Erase_Sector+0x44>)
 8003f8a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8003f8e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	52002000 	.word	0x52002000

08003fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_GPIO_Init+0x234>)
 8003fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fb2:	e194      	b.n	80042de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8186 	beq.w	80042d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d00b      	beq.n	8003fec <HAL_GPIO_Init+0x4c>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe0:	2b11      	cmp	r3, #17
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b12      	cmp	r3, #18
 8003fea:	d130      	bne.n	800404e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004022:	2201      	movs	r2, #1
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0201 	and.w	r2, r3, #1
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_GPIO_Init+0xee>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b12      	cmp	r3, #18
 800408c:	d123      	bne.n	80040d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	08da      	lsrs	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3208      	adds	r2, #8
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	220f      	movs	r2, #15
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	08da      	lsrs	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3208      	adds	r2, #8
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2203      	movs	r2, #3
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0203 	and.w	r2, r3, #3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 80e0 	beq.w	80042d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_GPIO_Init+0x238>)
 800411a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800411e:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <HAL_GPIO_Init+0x238>)
 8004120:	f043 0302 	orr.w	r3, r3, #2
 8004124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_GPIO_Init+0x238>)
 800412a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004136:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_GPIO_Init+0x23c>)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3302      	adds	r3, #2
 800413e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	220f      	movs	r2, #15
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <HAL_GPIO_Init+0x240>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d052      	beq.n	8004208 <HAL_GPIO_Init+0x268>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <HAL_GPIO_Init+0x244>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_GPIO_Init+0x22e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_GPIO_Init+0x248>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d02b      	beq.n	80041ca <HAL_GPIO_Init+0x22a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_GPIO_Init+0x24c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d025      	beq.n	80041c6 <HAL_GPIO_Init+0x226>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_GPIO_Init+0x250>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <HAL_GPIO_Init+0x222>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_GPIO_Init+0x254>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d019      	beq.n	80041be <HAL_GPIO_Init+0x21e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_GPIO_Init+0x258>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_GPIO_Init+0x21a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_GPIO_Init+0x25c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00d      	beq.n	80041b6 <HAL_GPIO_Init+0x216>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_GPIO_Init+0x260>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <HAL_GPIO_Init+0x212>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_GPIO_Init+0x264>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_GPIO_Init+0x20e>
 80041aa:	2309      	movs	r3, #9
 80041ac:	e02d      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041ae:	230a      	movs	r3, #10
 80041b0:	e02b      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041b2:	2308      	movs	r3, #8
 80041b4:	e029      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041b6:	2307      	movs	r3, #7
 80041b8:	e027      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041ba:	2306      	movs	r3, #6
 80041bc:	e025      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041be:	2305      	movs	r3, #5
 80041c0:	e023      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041c2:	2304      	movs	r3, #4
 80041c4:	e021      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041c6:	2303      	movs	r3, #3
 80041c8:	e01f      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e01d      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e01b      	b.n	800420a <HAL_GPIO_Init+0x26a>
 80041d2:	bf00      	nop
 80041d4:	58000080 	.word	0x58000080
 80041d8:	58024400 	.word	0x58024400
 80041dc:	58000400 	.word	0x58000400
 80041e0:	58020000 	.word	0x58020000
 80041e4:	58020400 	.word	0x58020400
 80041e8:	58020800 	.word	0x58020800
 80041ec:	58020c00 	.word	0x58020c00
 80041f0:	58021000 	.word	0x58021000
 80041f4:	58021400 	.word	0x58021400
 80041f8:	58021800 	.word	0x58021800
 80041fc:	58021c00 	.word	0x58021c00
 8004200:	58022000 	.word	0x58022000
 8004204:	58022400 	.word	0x58022400
 8004208:	2300      	movs	r3, #0
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	f002 0203 	and.w	r2, r2, #3
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	4093      	lsls	r3, r2
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800421a:	4938      	ldr	r1, [pc, #224]	; (80042fc <HAL_GPIO_Init+0x35c>)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f ae63 	bne.w	8003fb4 <HAL_GPIO_Init+0x14>
  }
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3724      	adds	r7, #36	; 0x24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	58000400 	.word	0x58000400

08004300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800434c:	e003      	b.n	8004356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	887b      	ldrh	r3, [r7, #2]
 8004374:	401a      	ands	r2, r3
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	429a      	cmp	r2, r3
 800437a:	d104      	bne.n	8004386 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004384:	e002      	b.n	800438c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	b08f      	sub	sp, #60	; 0x3c
 800439c:	af0a      	add	r7, sp, #40	; 0x28
 800439e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e054      	b.n	8004454 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f00c f995 	bl	80106f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2203      	movs	r2, #3
 80043ce:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f005 feaa 	bl	800a142 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	687e      	ldr	r6, [r7, #4]
 80043f6:	466d      	mov	r5, sp
 80043f8:	f106 0410 	add.w	r4, r6, #16
 80043fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004408:	e885 0003 	stmia.w	r5, {r0, r1}
 800440c:	1d33      	adds	r3, r6, #4
 800440e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004410:	6838      	ldr	r0, [r7, #0]
 8004412:	f005 fe23 	bl	800a05c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f005 fea1 	bl	800a164 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	687e      	ldr	r6, [r7, #4]
 800442a:	466d      	mov	r5, sp
 800442c:	f106 0410 	add.w	r4, r6, #16
 8004430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800443c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004440:	1d33      	adds	r3, r6, #4
 8004442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f005 ffb3 	bl	800a3b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800445c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af04      	add	r7, sp, #16
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	70fb      	strb	r3, [r7, #3]
 800446e:	460b      	mov	r3, r1
 8004470:	70bb      	strb	r3, [r7, #2]
 8004472:	4613      	mov	r3, r2
 8004474:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_HCD_HC_Init+0x28>
 8004480:	2302      	movs	r3, #2
 8004482:	e07f      	b.n	8004584 <HAL_HCD_HC_Init+0x128>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	440b      	add	r3, r1
 800449a:	333d      	adds	r3, #61	; 0x3d
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	440b      	add	r3, r1
 80044ae:	3338      	adds	r3, #56	; 0x38
 80044b0:	787a      	ldrb	r2, [r7, #1]
 80044b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3340      	adds	r3, #64	; 0x40
 80044c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80044c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	3339      	adds	r3, #57	; 0x39
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	440b      	add	r3, r1
 80044ea:	333f      	adds	r3, #63	; 0x3f
 80044ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80044f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	78bb      	ldrb	r3, [r7, #2]
 80044f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fa:	b2d8      	uxtb	r0, r3
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	333a      	adds	r3, #58	; 0x3a
 800450a:	4602      	mov	r2, r0
 800450c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800450e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004512:	2b00      	cmp	r3, #0
 8004514:	da0a      	bge.n	800452c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	333b      	adds	r3, #59	; 0x3b
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e009      	b.n	8004540 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	333b      	adds	r3, #59	; 0x3b
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004554:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	787c      	ldrb	r4, [r7, #1]
 800455c:	78ba      	ldrb	r2, [r7, #2]
 800455e:	78f9      	ldrb	r1, [r7, #3]
 8004560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4623      	mov	r3, r4
 8004572:	f006 f899 	bl	800a6a8 <USB_HC_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	bd90      	pop	{r4, r7, pc}

0800458c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_HCD_HC_Halt+0x1e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e00f      	b.n	80045ca <HAL_HCD_HC_Halt+0x3e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 fad1 	bl	800ab62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	70fb      	strb	r3, [r7, #3]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70bb      	strb	r3, [r7, #2]
 80045ea:	4613      	mov	r3, r2
 80045ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	333b      	adds	r3, #59	; 0x3b
 80045fe:	78ba      	ldrb	r2, [r7, #2]
 8004600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	333f      	adds	r3, #63	; 0x3f
 8004612:	787a      	ldrb	r2, [r7, #1]
 8004614:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004616:	7c3b      	ldrb	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d114      	bne.n	8004646 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3342      	adds	r3, #66	; 0x42
 800462c:	2203      	movs	r2, #3
 800462e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	333d      	adds	r3, #61	; 0x3d
 8004640:	7f3a      	ldrb	r2, [r7, #28]
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e009      	b.n	800465a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	3342      	adds	r3, #66	; 0x42
 8004656:	2202      	movs	r2, #2
 8004658:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800465a:	787b      	ldrb	r3, [r7, #1]
 800465c:	2b03      	cmp	r3, #3
 800465e:	f200 80d6 	bhi.w	800480e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	08004679 	.word	0x08004679
 800466c:	080047f9 	.word	0x080047f9
 8004670:	080046e5 	.word	0x080046e5
 8004674:	0800476f 	.word	0x0800476f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004678:	7c3b      	ldrb	r3, [r7, #16]
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 80c9 	bne.w	8004812 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004680:	78bb      	ldrb	r3, [r7, #2]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 80c5 	bne.w	8004812 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004688:	8b3b      	ldrh	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	3351      	adds	r3, #81	; 0x51
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	440b      	add	r3, r1
 80046b0:	3351      	adds	r3, #81	; 0x51
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	440b      	add	r3, r1
 80046c6:	3342      	adds	r3, #66	; 0x42
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80046cc:	e0a1      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	3342      	adds	r3, #66	; 0x42
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]
      break;
 80046e2:	e096      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80046e4:	78bb      	ldrb	r3, [r7, #2]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d120      	bne.n	800472c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	440b      	add	r3, r1
 80046f8:	3351      	adds	r3, #81	; 0x51
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	440b      	add	r3, r1
 800470e:	3342      	adds	r3, #66	; 0x42
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004714:	e07e      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	3342      	adds	r3, #66	; 0x42
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]
      break;
 800472a:	e073      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3350      	adds	r3, #80	; 0x50
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	3342      	adds	r3, #66	; 0x42
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
      break;
 8004756:	e05d      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	3342      	adds	r3, #66	; 0x42
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
      break;
 800476c:	e052      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800476e:	78bb      	ldrb	r3, [r7, #2]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d120      	bne.n	80047b6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3351      	adds	r3, #81	; 0x51
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	440b      	add	r3, r1
 8004798:	3342      	adds	r3, #66	; 0x42
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800479e:	e039      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	3342      	adds	r3, #66	; 0x42
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
      break;
 80047b4:	e02e      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	3350      	adds	r3, #80	; 0x50
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	3342      	adds	r3, #66	; 0x42
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
      break;
 80047e0:	e018      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	440b      	add	r3, r1
 80047f0:	3342      	adds	r3, #66	; 0x42
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
      break;
 80047f6:	e00d      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	440b      	add	r3, r1
 8004806:	3342      	adds	r3, #66	; 0x42
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
      break;
 800480c:	e002      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004812:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	3344      	adds	r3, #68	; 0x44
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	8b39      	ldrh	r1, [r7, #24]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4403      	add	r3, r0
 8004838:	3348      	adds	r3, #72	; 0x48
 800483a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	335c      	adds	r3, #92	; 0x5c
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	440b      	add	r3, r1
 800485e:	334c      	adds	r3, #76	; 0x4c
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	440b      	add	r3, r1
 8004872:	3339      	adds	r3, #57	; 0x39
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	335d      	adds	r3, #93	; 0x5d
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	3338      	adds	r3, #56	; 0x38
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	f006 f808 	bl	800a8bc <USB_HC_StartXfer>
 80048ac:	4603      	mov	r3, r0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop

080048b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f005 fd2b 	bl	800a32a <USB_GetMode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f040 80ef 	bne.w	8004aba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f005 fd0f 	bl	800a304 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80e5 	beq.w	8004ab8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f005 fd06 	bl	800a304 <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004902:	d104      	bne.n	800490e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800490c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f005 fcf6 	bl	800a304 <USB_ReadInterrupts>
 8004918:	4603      	mov	r3, r0
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004922:	d104      	bne.n	800492e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800492c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fce6 	bl	800a304 <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004942:	d104      	bne.n	800494e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800494c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f005 fcd6 	bl	800a304 <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d103      	bne.n	800496a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2202      	movs	r2, #2
 8004968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f005 fcc8 	bl	800a304 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497e:	d115      	bne.n	80049ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004988:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00b ff18 	bl	80107d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f005 fdb8 	bl	800a51c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f005 fca7 	bl	800a304 <USB_ReadInterrupts>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c0:	d102      	bne.n	80049c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 f968 	bl	8005c98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f005 fc99 	bl	800a304 <USB_ReadInterrupts>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d106      	bne.n	80049ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f00b fedb 	bl	8010798 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2208      	movs	r2, #8
 80049e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f005 fc88 	bl	800a304 <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d138      	bne.n	8004a72 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f006 f89b 	bl	800ab40 <USB_HC_ReadInterrupt>
 8004a0a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e025      	b.n	8004a5e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3c:	d106      	bne.n	8004a4c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8cf 	bl	8004be8 <HCD_HC_IN_IRQHandler>
 8004a4a:	e005      	b.n	8004a58 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fcfd 	bl	8005452 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d3d4      	bcc.n	8004a12 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f005 fc44 	bl	800a304 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d101      	bne.n	8004a8a <HAL_HCD_IRQHandler+0x1d2>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_HCD_IRQHandler+0x1d4>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d014      	beq.n	8004aba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0210 	bic.w	r2, r2, #16
 8004a9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 f84b 	bl	8005b3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0210 	orr.w	r2, r2, #16
 8004ab4:	619a      	str	r2, [r3, #24]
 8004ab6:	e000      	b.n	8004aba <HAL_HCD_IRQHandler+0x202>
      return;
 8004ab8:	bf00      	nop
    }
  }
}
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_HCD_Start+0x16>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e013      	b.n	8004afe <HAL_HCD_Start+0x3e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f005 fb1c 	bl	800a120 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f005 fd78 	bl	800a5e4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_HCD_Stop+0x16>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e00d      	b.n	8004b38 <HAL_HCD_Stop+0x32>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f006 f955 	bl	800add8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f005 fd1f 	bl	800a590 <USB_ResetPort>
 8004b52:	4603      	mov	r3, r0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	440b      	add	r3, r1
 8004b76:	335c      	adds	r3, #92	; 0x5c
 8004b78:	781b      	ldrb	r3, [r3, #0]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	440b      	add	r3, r1
 8004ba0:	334c      	adds	r3, #76	; 0x4c
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f005 fd61 	bl	800a684 <USB_GetCurrentFrame>
 8004bc2:	4603      	mov	r3, r0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f005 fd3c 	bl	800a656 <USB_GetHostSpeed>
 8004bde:	4603      	mov	r3, r0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d119      	bne.n	8004c4c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	2304      	movs	r3, #4
 8004c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	60d3      	str	r3, [r2, #12]
 8004c4a:	e0ce      	b.n	8004dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d12c      	bne.n	8004cbe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	461a      	mov	r2, r3
 8004c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	440b      	add	r3, r1
 8004c86:	335d      	adds	r3, #93	; 0x5d
 8004c88:	2207      	movs	r2, #7
 8004c8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f005 ff53 	bl	800ab62 <USB_HC_Halt>
 8004cbc:	e095      	b.n	8004dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d109      	bne.n	8004ce8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	6093      	str	r3, [r2, #8]
 8004ce6:	e080      	b.n	8004dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d134      	bne.n	8004d68 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	440b      	add	r3, r1
 8004d2c:	335d      	adds	r3, #93	; 0x5d
 8004d2e:	2205      	movs	r2, #5
 8004d30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2310      	movs	r3, #16
 8004d42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	461a      	mov	r2, r3
 8004d52:	2308      	movs	r3, #8
 8004d54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f005 fefe 	bl	800ab62 <USB_HC_Halt>
 8004d66:	e040      	b.n	8004dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d134      	bne.n	8004dea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9a:	f043 0302 	orr.w	r3, r3, #2
 8004d9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f005 fed9 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	335d      	adds	r3, #93	; 0x5d
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	461a      	mov	r2, r3
 8004de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e00:	d122      	bne.n	8004e48 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 fe98 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e46:	e300      	b.n	800544a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	f040 80fd 	bne.w	800505a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	440b      	add	r3, r1
 8004e76:	3348      	adds	r3, #72	; 0x48
 8004e78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	0159      	lsls	r1, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	440b      	add	r3, r1
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004e8c:	1ad1      	subs	r1, r2, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4403      	add	r3, r0
 8004e9c:	334c      	adds	r3, #76	; 0x4c
 8004e9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	335d      	adds	r3, #93	; 0x5d
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3358      	adds	r3, #88	; 0x58
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	333f      	adds	r3, #63	; 0x3f
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	333f      	adds	r3, #63	; 0x3f
 8004f00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d121      	bne.n	8004f4a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fe16 	bl	800ab62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	2310      	movs	r3, #16
 8004f46:	6093      	str	r3, [r2, #8]
 8004f48:	e070      	b.n	800502c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	333f      	adds	r3, #63	; 0x3f
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d12a      	bne.n	8004fb6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	335c      	adds	r3, #92	; 0x5c
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	b2d8      	uxtb	r0, r3
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	335c      	adds	r3, #92	; 0x5c
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	4601      	mov	r1, r0
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f00b fc1c 	bl	80107ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fb4:	e03a      	b.n	800502c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	333f      	adds	r3, #63	; 0x3f
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d12f      	bne.n	800502c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	440b      	add	r3, r1
 8004fda:	335c      	adds	r3, #92	; 0x5c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	3350      	adds	r3, #80	; 0x50
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f083 0301 	eor.w	r3, r3, #1
 8004ff6:	b2d8      	uxtb	r0, r3
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	3350      	adds	r3, #80	; 0x50
 8005008:	4602      	mov	r2, r0
 800500a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	b2d8      	uxtb	r0, r3
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	335c      	adds	r3, #92	; 0x5c
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	4601      	mov	r1, r0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f00b fbe0 	bl	80107ec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	3350      	adds	r3, #80	; 0x50
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f083 0301 	eor.w	r3, r3, #1
 8005042:	b2d8      	uxtb	r0, r3
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	3350      	adds	r3, #80	; 0x50
 8005054:	4602      	mov	r2, r0
 8005056:	701a      	strb	r2, [r3, #0]
}
 8005058:	e1f7      	b.n	800544a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	f040 811a 	bne.w	80052a6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508c:	f023 0302 	bic.w	r3, r3, #2
 8005090:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	440b      	add	r3, r1
 80050a0:	335d      	adds	r3, #93	; 0x5d
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10a      	bne.n	80050be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	440b      	add	r3, r1
 80050b6:	335c      	adds	r3, #92	; 0x5c
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e0d9      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	440b      	add	r3, r1
 80050cc:	335d      	adds	r3, #93	; 0x5d
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10a      	bne.n	80050ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	2205      	movs	r2, #5
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e0c3      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	335d      	adds	r3, #93	; 0x5d
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d00a      	beq.n	8005116 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	335d      	adds	r3, #93	; 0x5d
 8005110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005112:	2b08      	cmp	r3, #8
 8005114:	d156      	bne.n	80051c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	3358      	adds	r3, #88	; 0x58
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4403      	add	r3, r0
 8005138:	3358      	adds	r3, #88	; 0x58
 800513a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3358      	adds	r3, #88	; 0x58
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d914      	bls.n	800517c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3358      	adds	r3, #88	; 0x58
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	335c      	adds	r3, #92	; 0x5c
 8005176:	2204      	movs	r2, #4
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e009      	b.n	8005190 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	440b      	add	r3, r1
 800518a:	335c      	adds	r3, #92	; 0x5c
 800518c:	2202      	movs	r2, #2
 800518e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	461a      	mov	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e056      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	335d      	adds	r3, #93	; 0x5d
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d123      	bne.n	8005222 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	440b      	add	r3, r1
 80051e8:	335c      	adds	r3, #92	; 0x5c
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005204:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e027      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	335d      	adds	r3, #93	; 0x5d
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b07      	cmp	r3, #7
 8005236:	d11c      	bne.n	8005272 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	3358      	adds	r3, #88	; 0x58
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4403      	add	r3, r0
 800525a:	3358      	adds	r3, #88	; 0x58
 800525c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	335c      	adds	r3, #92	; 0x5c
 800526e:	2204      	movs	r2, #4
 8005270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	461a      	mov	r2, r3
 8005280:	2302      	movs	r3, #2
 8005282:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	b2d8      	uxtb	r0, r3
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	335c      	adds	r3, #92	; 0x5c
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4601      	mov	r1, r0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f00b faa4 	bl	80107ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052a4:	e0d1      	b.n	800544a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d13e      	bne.n	800533a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3358      	adds	r3, #88	; 0x58
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4403      	add	r3, r0
 80052fe:	3358      	adds	r3, #88	; 0x58
 8005300:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	335d      	adds	r3, #93	; 0x5d
 8005312:	2206      	movs	r2, #6
 8005314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f005 fc1e 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	461a      	mov	r2, r3
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	6093      	str	r3, [r2, #8]
}
 8005338:	e087      	b.n	800544a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d17c      	bne.n	800544a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	333f      	adds	r3, #63	; 0x3f
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d122      	bne.n	80053ac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	3358      	adds	r3, #88	; 0x58
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	440a      	add	r2, r1
 8005390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 fbdc 	bl	800ab62 <USB_HC_Halt>
 80053aa:	e045      	b.n	8005438 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	333f      	adds	r3, #63	; 0x3f
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	333f      	adds	r3, #63	; 0x3f
 80053d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d12f      	bne.n	8005438 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3358      	adds	r3, #88	; 0x58
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d121      	bne.n	8005438 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	335d      	adds	r3, #93	; 0x5d
 8005404:	2203      	movs	r2, #3
 8005406:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	440a      	add	r2, r1
 800541e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	4611      	mov	r1, r2
 8005432:	4618      	mov	r0, r3
 8005434:	f005 fb95 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	461a      	mov	r2, r3
 8005446:	2310      	movs	r3, #16
 8005448:	6093      	str	r3, [r2, #8]
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d119      	bne.n	80054b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	461a      	mov	r2, r3
 8005490:	2304      	movs	r3, #4
 8005492:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ae:	f043 0302 	orr.w	r3, r3, #2
 80054b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80054b4:	e33e      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d141      	bne.n	8005550 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	461a      	mov	r2, r3
 80054da:	2320      	movs	r3, #32
 80054dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	440b      	add	r3, r1
 80054ec:	333d      	adds	r3, #61	; 0x3d
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f040 831f 	bne.w	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	333d      	adds	r3, #61	; 0x3d
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	335c      	adds	r3, #92	; 0x5c
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f005 fb0a 	bl	800ab62 <USB_HC_Halt>
}
 800554e:	e2f1      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d13f      	bne.n	80055e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	440b      	add	r3, r1
 8005574:	335d      	adds	r3, #93	; 0x5d
 8005576:	2204      	movs	r2, #4
 8005578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	440b      	add	r3, r1
 8005588:	333d      	adds	r3, #61	; 0x3d
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	3358      	adds	r3, #88	; 0x58
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	4611      	mov	r1, r2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f005 fac8 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	461a      	mov	r2, r3
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	6093      	str	r3, [r2, #8]
}
 80055e4:	e2a6      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fc:	d122      	bne.n	8005644 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	440a      	add	r2, r1
 8005614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f005 fa9a 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005640:	6093      	str	r3, [r2, #8]
}
 8005642:	e277      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d135      	bne.n	80056c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	440b      	add	r3, r1
 8005668:	3358      	adds	r3, #88	; 0x58
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	440a      	add	r2, r1
 8005684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005688:	f043 0302 	orr.w	r3, r3, #2
 800568c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f005 fa62 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056aa:	461a      	mov	r2, r3
 80056ac:	2301      	movs	r3, #1
 80056ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	440b      	add	r3, r1
 80056be:	335d      	adds	r3, #93	; 0x5d
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
}
 80056c4:	e236      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d12b      	bne.n	8005734 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e8:	461a      	mov	r2, r3
 80056ea:	2308      	movs	r3, #8
 80056ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	440a      	add	r2, r1
 8005704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f005 fa22 	bl	800ab62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	335d      	adds	r3, #93	; 0x5d
 800572e:	2205      	movs	r2, #5
 8005730:	701a      	strb	r2, [r3, #0]
}
 8005732:	e1ff      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b10      	cmp	r3, #16
 8005748:	d155      	bne.n	80057f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	3358      	adds	r3, #88	; 0x58
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	440b      	add	r3, r1
 800576c:	335d      	adds	r3, #93	; 0x5d
 800576e:	2203      	movs	r2, #3
 8005770:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	333d      	adds	r3, #61	; 0x3d
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d114      	bne.n	80057b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	440b      	add	r3, r1
 8005796:	333c      	adds	r3, #60	; 0x3c
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	440b      	add	r3, r1
 80057ac:	333d      	adds	r3, #61	; 0x3d
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f005 f9c0 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	461a      	mov	r2, r3
 80057f0:	2310      	movs	r3, #16
 80057f2:	6093      	str	r3, [r2, #8]
}
 80057f4:	e19e      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d12b      	bne.n	8005864 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	440a      	add	r2, r1
 8005822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005826:	f043 0302 	orr.w	r3, r3, #2
 800582a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f005 f993 	bl	800ab62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	335d      	adds	r3, #93	; 0x5d
 800584c:	2206      	movs	r2, #6
 800584e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4413      	add	r3, r2
 8005858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585c:	461a      	mov	r2, r3
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	6093      	str	r3, [r2, #8]
}
 8005862:	e167      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587a:	d135      	bne.n	80058e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	440a      	add	r2, r1
 8005892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	4611      	mov	r1, r2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f005 f95b 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b8:	461a      	mov	r2, r3
 80058ba:	2310      	movs	r3, #16
 80058bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	461a      	mov	r2, r3
 80058cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	440b      	add	r3, r1
 80058e0:	335d      	adds	r3, #93	; 0x5d
 80058e2:	2208      	movs	r2, #8
 80058e4:	701a      	strb	r2, [r3, #0]
}
 80058e6:	e125      	b.n	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	f040 811a 	bne.w	8005b34 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	440a      	add	r2, r1
 8005916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591a:	f023 0302 	bic.w	r3, r3, #2
 800591e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	335d      	adds	r3, #93	; 0x5d
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d137      	bne.n	80059a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	335c      	adds	r3, #92	; 0x5c
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	440b      	add	r3, r1
 8005958:	333f      	adds	r3, #63	; 0x3f
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d00b      	beq.n	8005978 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	333f      	adds	r3, #63	; 0x3f
 8005970:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005972:	2b03      	cmp	r3, #3
 8005974:	f040 80c5 	bne.w	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	440b      	add	r3, r1
 8005986:	3351      	adds	r3, #81	; 0x51
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2d8      	uxtb	r0, r3
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	440b      	add	r3, r1
 800599e:	3351      	adds	r3, #81	; 0x51
 80059a0:	4602      	mov	r2, r0
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e0ad      	b.n	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	440b      	add	r3, r1
 80059b4:	335d      	adds	r3, #93	; 0x5d
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d10a      	bne.n	80059d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	440b      	add	r3, r1
 80059ca:	335c      	adds	r3, #92	; 0x5c
 80059cc:	2202      	movs	r2, #2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e097      	b.n	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	335d      	adds	r3, #93	; 0x5d
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d10a      	bne.n	80059fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	335c      	adds	r3, #92	; 0x5c
 80059f8:	2202      	movs	r2, #2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e081      	b.n	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	335d      	adds	r3, #93	; 0x5d
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d10a      	bne.n	8005a2a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	335c      	adds	r3, #92	; 0x5c
 8005a24:	2205      	movs	r2, #5
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e06b      	b.n	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	335d      	adds	r3, #93	; 0x5d
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d00a      	beq.n	8005a56 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	335d      	adds	r3, #93	; 0x5d
 8005a50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d155      	bne.n	8005b02 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	3358      	adds	r3, #88	; 0x58
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	1c59      	adds	r1, r3, #1
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4403      	add	r3, r0
 8005a78:	3358      	adds	r3, #88	; 0x58
 8005a7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	440b      	add	r3, r1
 8005a8a:	3358      	adds	r3, #88	; 0x58
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d914      	bls.n	8005abc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3358      	adds	r3, #88	; 0x58
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	335c      	adds	r3, #92	; 0x5c
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e009      	b.n	8005ad0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	335c      	adds	r3, #92	; 0x5c
 8005acc:	2202      	movs	r2, #2
 8005ace:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2302      	movs	r3, #2
 8005b12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	b2d8      	uxtb	r0, r3
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	335c      	adds	r3, #92	; 0x5c
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f00a fe5c 	bl	80107ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	0c5b      	lsrs	r3, r3, #17
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d004      	beq.n	8005b82 <HCD_RXQLVL_IRQHandler+0x46>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	f000 8082 	beq.w	8005c84 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005b80:	e083      	b.n	8005c8a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d07f      	beq.n	8005c88 <HCD_RXQLVL_IRQHandler+0x14c>
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	3344      	adds	r3, #68	; 0x44
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d074      	beq.n	8005c88 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	3344      	adds	r3, #68	; 0x44
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f004 fb7a 	bl	800a2b2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	3344      	adds	r3, #68	; 0x44
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	18d1      	adds	r1, r2, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4403      	add	r3, r0
 8005be2:	3344      	adds	r3, #68	; 0x44
 8005be4:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	334c      	adds	r3, #76	; 0x4c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	18d1      	adds	r1, r2, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4403      	add	r3, r0
 8005c0a:	334c      	adds	r3, #76	; 0x4c
 8005c0c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HCD_RXQLVL_IRQHandler+0x158>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d031      	beq.n	8005c88 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	3350      	adds	r3, #80	; 0x50
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f083 0301 	eor.w	r3, r3, #1
 8005c6c:	b2d8      	uxtb	r0, r3
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3350      	adds	r3, #80	; 0x50
 8005c7e:	4602      	mov	r2, r0
 8005c80:	701a      	strb	r2, [r3, #0]
      break;
 8005c82:	e001      	b.n	8005c88 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005c84:	bf00      	nop
 8005c86:	e000      	b.n	8005c8a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8005c88:	bf00      	nop
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	3728      	adds	r7, #40	; 0x28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	1ff80000 	.word	0x1ff80000

08005c98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d10b      	bne.n	8005ce8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f00a fd6a 	bl	80107b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f043 0302 	orr.w	r3, r3, #2
 8005ce6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d132      	bne.n	8005d58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f043 0308 	orr.w	r3, r3, #8
 8005cf8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d126      	bne.n	8005d52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d113      	bne.n	8005d34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d16:	d106      	bne.n	8005d26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f004 fbfc 	bl	800a51c <USB_InitFSLSPClkSel>
 8005d24:	e011      	b.n	8005d4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f004 fbf5 	bl	800a51c <USB_InitFSLSPClkSel>
 8005d32:	e00a      	b.n	8005d4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d106      	bne.n	8005d4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005d48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f00a fd5c 	bl	8010808 <HAL_HCD_PortEnabled_Callback>
 8005d50:	e002      	b.n	8005d58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f00a fd66 	bl	8010824 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d103      	bne.n	8005d6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6013      	str	r3, [r2, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e037      	b.n	8005e06 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7fa fd64 	bl	8000878 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f004 f820 	bl	8009e00 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	f004 f842 	bl	8009e54 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	f004 f859 	bl	8009e92 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0204 	orr.w	r2, r2, #4
 8005dee:	601a      	str	r2, [r3, #0]
  
  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HAL_NAND_Init+0x90>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <HAL_NAND_Init+0x90>)
 8005df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	52004000 	.word	0x52004000

08005e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e1c:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <HAL_PWREx_ConfigSupply+0x70>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d00a      	beq.n	8005e3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e28:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <HAL_PWREx_ConfigSupply+0x70>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d001      	beq.n	8005e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e01f      	b.n	8005e7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e01d      	b.n	8005e7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <HAL_PWREx_ConfigSupply+0x70>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f023 0207 	bic.w	r2, r3, #7
 8005e46:	490f      	ldr	r1, [pc, #60]	; (8005e84 <HAL_PWREx_ConfigSupply+0x70>)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e4e:	f7fd fd59 	bl	8003904 <HAL_GetTick>
 8005e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e54:	e009      	b.n	8005e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e56:	f7fd fd55 	bl	8003904 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e64:	d901      	bls.n	8005e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e007      	b.n	8005e7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_PWREx_ConfigSupply+0x70>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e76:	d1ee      	bne.n	8005e56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	58024800 	.word	0x58024800

08005e88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e96:	60d3      	str	r3, [r2, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	58024800 	.word	0x58024800

08005ea8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7fd fd28 	bl	8003904 <HAL_GetTick>
 8005eb4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e05f      	b.n	8005f80 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fa ff7d 	bl	8000dcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005ed2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa5e 	bl	8006398 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	2120      	movs	r1, #32
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa56 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d135      	bne.n	8005f7e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <HAL_QSPI_Init+0xe0>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6852      	ldr	r2, [r2, #4]
 8005f20:	0611      	lsls	r1, r2, #24
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68d2      	ldr	r2, [r2, #12]
 8005f26:	4311      	orrs	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	69d2      	ldr	r2, [r2, #28]
 8005f2c:	4311      	orrs	r1, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6a12      	ldr	r2, [r2, #32]
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_QSPI_Init+0xe4>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6912      	ldr	r2, [r2, #16]
 8005f4a:	0411      	lsls	r1, r2, #16
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6952      	ldr	r2, [r2, #20]
 8005f50:	4311      	orrs	r1, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6992      	ldr	r2, [r2, #24]
 8005f56:	4311      	orrs	r1, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	00ffff2f 	.word	0x00ffff2f
 8005f8c:	ffe0f8fe 	.word	0xffe0f8fe

08005f90 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f9c:	f7fd fcb2 	bl	8003904 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_QSPI_Command+0x22>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e048      	b.n	8006044 <HAL_QSPI_Command+0xb4>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d137      	bne.n	8006036 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2120      	movs	r1, #32
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f9e8 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d125      	bne.n	800603a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa15 	bl	8006422 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d115      	bne.n	800602c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2201      	movs	r2, #1
 8006008:	2102      	movs	r1, #2
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f9d2 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2202      	movs	r2, #2
 8006020:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800602a:	e006      	b.n	800603a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006034:	e001      	b.n	800603a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006036:	2302      	movs	r3, #2
 8006038:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800605c:	f7fd fc52 	bl	8003904 <HAL_GetTick>
 8006060:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3320      	adds	r3, #32
 8006068:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_QSPI_Transmit+0x2e>
 8006076:	2302      	movs	r3, #2
 8006078:	e076      	b.n	8006168 <HAL_QSPI_Transmit+0x11c>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d165      	bne.n	800615a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d056      	beq.n	8006148 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2212      	movs	r2, #18
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80060ce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80060d0:	e01b      	b.n	800610a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2201      	movs	r2, #1
 80060da:	2104      	movs	r1, #4
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f969 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d113      	bne.n	8006114 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1df      	bne.n	80060d2 <HAL_QSPI_Transmit+0x86>
 8006112:	e000      	b.n	8006116 <HAL_QSPI_Transmit+0xca>
          break;
 8006114:	bf00      	nop
      }

      if (status == HAL_OK)
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2201      	movs	r2, #1
 8006124:	2102      	movs	r1, #2
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f944 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006130:	7ffb      	ldrb	r3, [r7, #31]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2202      	movs	r2, #2
 800613c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006146:	e00a      	b.n	800615e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	f043 0208 	orr.w	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e001      	b.n	800615e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800615a:	2302      	movs	r3, #2
 800615c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006166:	7ffb      	ldrb	r3, [r7, #31]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006180:	f7fd fbc0 	bl	8003904 <HAL_GetTick>
 8006184:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3320      	adds	r3, #32
 8006194:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_QSPI_Receive+0x36>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e07d      	b.n	80062a2 <HAL_QSPI_Receive+0x132>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d16c      	bne.n	8006294 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d05d      	beq.n	8006282 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2222      	movs	r2, #34	; 0x22
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061fe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006208:	e01c      	b.n	8006244 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2201      	movs	r2, #1
 8006212:	2106      	movs	r1, #6
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f8cd 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d114      	bne.n	800624e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1de      	bne.n	800620a <HAL_QSPI_Receive+0x9a>
 800624c:	e000      	b.n	8006250 <HAL_QSPI_Receive+0xe0>
          break;
 800624e:	bf00      	nop
      }

      if (status == HAL_OK)
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d110      	bne.n	8006278 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2201      	movs	r2, #1
 800625e:	2102      	movs	r1, #2
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f8a7 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2202      	movs	r2, #2
 8006276:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006280:	e00a      	b.n	8006298 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	f043 0208 	orr.w	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e001      	b.n	8006298 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006294:	2302      	movs	r3, #2
 8006296:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af02      	add	r7, sp, #8
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7fd fb24 	bl	8003904 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_QSPI_AutoPolling+0x24>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e060      	b.n	8006390 <HAL_QSPI_AutoPolling+0xe6>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d14f      	bne.n	8006382 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2242      	movs	r2, #66	; 0x42
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2120      	movs	r1, #32
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f85a 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d13d      	bne.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6892      	ldr	r2, [r2, #8]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	431a      	orrs	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006340:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800634a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f866 	bl	8006422 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2201      	movs	r2, #1
 800635e:	2108      	movs	r1, #8
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f827 	bl	80063b4 <QSPI_WaitFlagStateUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2208      	movs	r2, #8
 8006376:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006380:	e001      	b.n	8006386 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006382:	2302      	movs	r3, #2
 8006384:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063c4:	e01a      	b.n	80063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d016      	beq.n	80063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ce:	f7fd fa99 	bl	8003904 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d302      	bcc.n	80063e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2204      	movs	r2, #4
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	f043 0201 	orr.w	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e00e      	b.n	800641a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	429a      	cmp	r2, r3
 8006416:	d1d6      	bne.n	80063c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <QSPI_Config+0x28>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800643c:	d005      	beq.n	800644a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3a01      	subs	r2, #1
 8006448:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80b9 	beq.w	80065c6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d05f      	beq.n	800651c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	6892      	ldr	r2, [r2, #8]
 8006464:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d031      	beq.n	80064d2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	431a      	orrs	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	431a      	orrs	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	431a      	orrs	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	049b      	lsls	r3, r3, #18
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	431a      	orrs	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	431a      	orrs	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	431a      	orrs	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	ea42 0103 	orr.w	r1, r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064c2:	f000 812e 	beq.w	8006722 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	6852      	ldr	r2, [r2, #4]
 80064ce:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80064d0:	e127      	b.n	8006722 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	431a      	orrs	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	049b      	lsls	r3, r3, #18
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	431a      	orrs	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	431a      	orrs	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	ea42 0103 	orr.w	r1, r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	430a      	orrs	r2, r1
 8006518:	615a      	str	r2, [r3, #20]
}
 800651a:	e102      	b.n	8006722 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d02e      	beq.n	8006582 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	431a      	orrs	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	431a      	orrs	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	431a      	orrs	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	049b      	lsls	r3, r3, #18
 8006540:	431a      	orrs	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	431a      	orrs	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	431a      	orrs	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	431a      	orrs	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	ea42 0103 	orr.w	r1, r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	430a      	orrs	r2, r1
 800656a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006572:	f000 80d6 	beq.w	8006722 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	6852      	ldr	r2, [r2, #4]
 800657e:	619a      	str	r2, [r3, #24]
}
 8006580:	e0cf      	b.n	8006722 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	431a      	orrs	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	431a      	orrs	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	431a      	orrs	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	049b      	lsls	r3, r3, #18
 800659e:	431a      	orrs	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	ea42 0103 	orr.w	r1, r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	615a      	str	r2, [r3, #20]
}
 80065c4:	e0ad      	b.n	8006722 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d058      	beq.n	8006680 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	6892      	ldr	r2, [r2, #8]
 80065d6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02d      	beq.n	800663c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	049b      	lsls	r3, r3, #18
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	431a      	orrs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	431a      	orrs	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	431a      	orrs	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	431a      	orrs	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	ea42 0103 	orr.w	r1, r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	430a      	orrs	r2, r1
 8006626:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800662e:	d078      	beq.n	8006722 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	6852      	ldr	r2, [r2, #4]
 8006638:	619a      	str	r2, [r3, #24]
}
 800663a:	e072      	b.n	8006722 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	431a      	orrs	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	431a      	orrs	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	431a      	orrs	r2, r3
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	049b      	lsls	r3, r3, #18
 8006658:	431a      	orrs	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	431a      	orrs	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	431a      	orrs	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	431a      	orrs	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	ea42 0103 	orr.w	r1, r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	430a      	orrs	r2, r1
 800667c:	615a      	str	r2, [r3, #20]
}
 800667e:	e050      	b.n	8006722 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02a      	beq.n	80066de <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	431a      	orrs	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	431a      	orrs	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	431a      	orrs	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	049b      	lsls	r3, r3, #18
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	ea42 0103 	orr.w	r1, r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066d0:	d027      	beq.n	8006722 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	6852      	ldr	r2, [r2, #4]
 80066da:	619a      	str	r2, [r3, #24]
}
 80066dc:	e021      	b.n	8006722 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01d      	beq.n	8006722 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	049b      	lsls	r3, r3, #18
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	431a      	orrs	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	431a      	orrs	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	ea42 0103 	orr.w	r1, r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	430a      	orrs	r2, r1
 8006720:	615a      	str	r2, [r3, #20]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08c      	sub	sp, #48	; 0x30
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e3ff      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8087 	beq.w	800685e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006750:	4b99      	ldr	r3, [pc, #612]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800675a:	4b97      	ldr	r3, [pc, #604]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b10      	cmp	r3, #16
 8006764:	d007      	beq.n	8006776 <HAL_RCC_OscConfig+0x46>
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	2b18      	cmp	r3, #24
 800676a:	d110      	bne.n	800678e <HAL_RCC_OscConfig+0x5e>
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d10b      	bne.n	800678e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006776:	4b90      	ldr	r3, [pc, #576]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d06c      	beq.n	800685c <HAL_RCC_OscConfig+0x12c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d168      	bne.n	800685c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e3d9      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006796:	d106      	bne.n	80067a6 <HAL_RCC_OscConfig+0x76>
 8006798:	4b87      	ldr	r3, [pc, #540]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a86      	ldr	r2, [pc, #536]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800679e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e02e      	b.n	8006804 <HAL_RCC_OscConfig+0xd4>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCC_OscConfig+0x98>
 80067ae:	4b82      	ldr	r3, [pc, #520]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a81      	ldr	r2, [pc, #516]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a7e      	ldr	r2, [pc, #504]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e01d      	b.n	8006804 <HAL_RCC_OscConfig+0xd4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d0:	d10c      	bne.n	80067ec <HAL_RCC_OscConfig+0xbc>
 80067d2:	4b79      	ldr	r3, [pc, #484]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a78      	ldr	r2, [pc, #480]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4b76      	ldr	r3, [pc, #472]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a75      	ldr	r2, [pc, #468]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e00b      	b.n	8006804 <HAL_RCC_OscConfig+0xd4>
 80067ec:	4b72      	ldr	r3, [pc, #456]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a71      	ldr	r2, [pc, #452]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4b6f      	ldr	r3, [pc, #444]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6e      	ldr	r2, [pc, #440]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80067fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fd f87a 	bl	8003904 <HAL_GetTick>
 8006810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006814:	f7fd f876 	bl	8003904 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e38d      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006826:	4b64      	ldr	r3, [pc, #400]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0xe4>
 8006832:	e014      	b.n	800685e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fd f866 	bl	8003904 <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800683c:	f7fd f862 	bl	8003904 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e379      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800684e:	4b5a      	ldr	r3, [pc, #360]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x10c>
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80ae 	beq.w	80069c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800686c:	4b52      	ldr	r3, [pc, #328]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006874:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006876:	4b50      	ldr	r3, [pc, #320]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_RCC_OscConfig+0x162>
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	2b18      	cmp	r3, #24
 8006886:	d13a      	bne.n	80068fe <HAL_RCC_OscConfig+0x1ce>
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d135      	bne.n	80068fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006892:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_RCC_OscConfig+0x17a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e34b      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068aa:	f7fd f85b 	bl	8003964 <HAL_GetREVID>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d817      	bhi.n	80068e8 <HAL_RCC_OscConfig+0x1b8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d108      	bne.n	80068d2 <HAL_RCC_OscConfig+0x1a2>
 80068c0:	4b3d      	ldr	r3, [pc, #244]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068c8:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d0:	e07a      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d2:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	031b      	lsls	r3, r3, #12
 80068e0:	4935      	ldr	r1, [pc, #212]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068e6:	e06f      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e8:	4b33      	ldr	r3, [pc, #204]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	4930      	ldr	r1, [pc, #192]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fc:	e064      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d045      	beq.n	8006992 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006906:	4b2c      	ldr	r3, [pc, #176]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f023 0219 	bic.w	r2, r3, #25
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	4929      	ldr	r1, [pc, #164]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fc fff4 	bl	8003904 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006920:	f7fc fff0 	bl	8003904 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e307      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006932:	4b21      	ldr	r3, [pc, #132]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	f7fd f811 	bl	8003964 <HAL_GetREVID>
 8006942:	4603      	mov	r3, r0
 8006944:	f241 0203 	movw	r2, #4099	; 0x1003
 8006948:	4293      	cmp	r3, r2
 800694a:	d817      	bhi.n	800697c <HAL_RCC_OscConfig+0x24c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d108      	bne.n	8006966 <HAL_RCC_OscConfig+0x236>
 8006954:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800695e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006962:	6053      	str	r3, [r2, #4]
 8006964:	e030      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	031b      	lsls	r3, r3, #12
 8006974:	4910      	ldr	r1, [pc, #64]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006976:	4313      	orrs	r3, r2
 8006978:	604b      	str	r3, [r1, #4]
 800697a:	e025      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	061b      	lsls	r3, r3, #24
 800698a:	490b      	ldr	r1, [pc, #44]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 800698c:	4313      	orrs	r3, r2
 800698e:	604b      	str	r3, [r1, #4]
 8006990:	e01a      	b.n	80069c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <HAL_RCC_OscConfig+0x288>)
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699e:	f7fc ffb1 	bl	8003904 <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a6:	f7fc ffad 	bl	8003904 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d903      	bls.n	80069bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e2c4      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
 80069b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069bc:	4ba4      	ldr	r3, [pc, #656]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ee      	bne.n	80069a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80a9 	beq.w	8006b28 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d6:	4b9e      	ldr	r3, [pc, #632]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069e0:	4b9b      	ldr	r3, [pc, #620]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d007      	beq.n	80069fc <HAL_RCC_OscConfig+0x2cc>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b18      	cmp	r3, #24
 80069f0:	d13a      	bne.n	8006a68 <HAL_RCC_OscConfig+0x338>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d135      	bne.n	8006a68 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069fc:	4b94      	ldr	r3, [pc, #592]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2e4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	2b80      	cmp	r3, #128	; 0x80
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e296      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a14:	f7fc ffa6 	bl	8003964 <HAL_GetREVID>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d817      	bhi.n	8006a52 <HAL_RCC_OscConfig+0x322>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d108      	bne.n	8006a3c <HAL_RCC_OscConfig+0x30c>
 8006a2a:	4b89      	ldr	r3, [pc, #548]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a32:	4a87      	ldr	r2, [pc, #540]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a3a:	e075      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a3c:	4b84      	ldr	r3, [pc, #528]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	069b      	lsls	r3, r3, #26
 8006a4a:	4981      	ldr	r1, [pc, #516]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a50:	e06a      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	497b      	ldr	r1, [pc, #492]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a66:	e05f      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d042      	beq.n	8006af6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a70:	4b77      	ldr	r3, [pc, #476]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a76      	ldr	r2, [pc, #472]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7c:	f7fc ff42 	bl	8003904 <HAL_GetTick>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a84:	f7fc ff3e 	bl	8003904 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e255      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a96:	4b6e      	ldr	r3, [pc, #440]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aa2:	f7fc ff5f 	bl	8003964 <HAL_GetREVID>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d817      	bhi.n	8006ae0 <HAL_RCC_OscConfig+0x3b0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d108      	bne.n	8006aca <HAL_RCC_OscConfig+0x39a>
 8006ab8:	4b65      	ldr	r3, [pc, #404]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ac0:	4a63      	ldr	r2, [pc, #396]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac6:	6053      	str	r3, [r2, #4]
 8006ac8:	e02e      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
 8006aca:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	069b      	lsls	r3, r3, #26
 8006ad8:	495d      	ldr	r1, [pc, #372]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	604b      	str	r3, [r1, #4]
 8006ade:	e023      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
 8006ae0:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	061b      	lsls	r3, r3, #24
 8006aee:	4958      	ldr	r1, [pc, #352]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60cb      	str	r3, [r1, #12]
 8006af4:	e018      	b.n	8006b28 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006af6:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a55      	ldr	r2, [pc, #340]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b02:	f7fc feff 	bl	8003904 <HAL_GetTick>
 8006b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b0a:	f7fc fefb 	bl	8003904 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e212      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b1c:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d036      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d019      	beq.n	8006b70 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3c:	4b44      	ldr	r3, [pc, #272]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	4a43      	ldr	r2, [pc, #268]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fc fedc 	bl	8003904 <HAL_GetTick>
 8006b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b50:	f7fc fed8 	bl	8003904 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e1ef      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b62:	4b3b      	ldr	r3, [pc, #236]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x420>
 8006b6e:	e018      	b.n	8006ba2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b70:	4b37      	ldr	r3, [pc, #220]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b74:	4a36      	ldr	r2, [pc, #216]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fc fec2 	bl	8003904 <HAL_GetTick>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fc febe 	bl	8003904 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e1d5      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d036      	beq.n	8006c1c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d019      	beq.n	8006bea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a25      	ldr	r2, [pc, #148]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bc2:	f7fc fe9f 	bl	8003904 <HAL_GetTick>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bca:	f7fc fe9b 	bl	8003904 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e1b2      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bdc:	4b1c      	ldr	r3, [pc, #112]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <HAL_RCC_OscConfig+0x49a>
 8006be8:	e018      	b.n	8006c1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bf6:	f7fc fe85 	bl	8003904 <HAL_GetTick>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fc fe81 	bl	8003904 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e198      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <HAL_RCC_OscConfig+0x520>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8085 	beq.w	8006d34 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <HAL_RCC_OscConfig+0x524>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a09      	ldr	r2, [pc, #36]	; (8006c54 <HAL_RCC_OscConfig+0x524>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c36:	f7fc fe65 	bl	8003904 <HAL_GetTick>
 8006c3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c3c:	e00c      	b.n	8006c58 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7fc fe61 	bl	8003904 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b64      	cmp	r3, #100	; 0x64
 8006c4a:	d905      	bls.n	8006c58 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e178      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
 8006c50:	58024400 	.word	0x58024400
 8006c54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c58:	4b96      	ldr	r3, [pc, #600]	; (8006eb4 <HAL_RCC_OscConfig+0x784>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ec      	beq.n	8006c3e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d106      	bne.n	8006c7a <HAL_RCC_OscConfig+0x54a>
 8006c6c:	4b92      	ldr	r3, [pc, #584]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a91      	ldr	r2, [pc, #580]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
 8006c78:	e02d      	b.n	8006cd6 <HAL_RCC_OscConfig+0x5a6>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCC_OscConfig+0x56c>
 8006c82:	4b8d      	ldr	r3, [pc, #564]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a8c      	ldr	r2, [pc, #560]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8e:	4b8a      	ldr	r3, [pc, #552]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a89      	ldr	r2, [pc, #548]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006c94:	f023 0304 	bic.w	r3, r3, #4
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9a:	e01c      	b.n	8006cd6 <HAL_RCC_OscConfig+0x5a6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b05      	cmp	r3, #5
 8006ca2:	d10c      	bne.n	8006cbe <HAL_RCC_OscConfig+0x58e>
 8006ca4:	4b84      	ldr	r3, [pc, #528]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	4a83      	ldr	r2, [pc, #524]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006caa:	f043 0304 	orr.w	r3, r3, #4
 8006cae:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb0:	4b81      	ldr	r3, [pc, #516]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	4a80      	ldr	r2, [pc, #512]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbc:	e00b      	b.n	8006cd6 <HAL_RCC_OscConfig+0x5a6>
 8006cbe:	4b7e      	ldr	r3, [pc, #504]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4a7d      	ldr	r2, [pc, #500]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a7a      	ldr	r2, [pc, #488]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d015      	beq.n	8006d0a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cde:	f7fc fe11 	bl	8003904 <HAL_GetTick>
 8006ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce6:	f7fc fe0d 	bl	8003904 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e122      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cfc:	4b6e      	ldr	r3, [pc, #440]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0ee      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x5b6>
 8006d08:	e014      	b.n	8006d34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0a:	f7fc fdfb 	bl	8003904 <HAL_GetTick>
 8006d0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d10:	e00a      	b.n	8006d28 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d12:	f7fc fdf7 	bl	8003904 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e10c      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d28:	4b63      	ldr	r3, [pc, #396]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1ee      	bne.n	8006d12 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8101 	beq.w	8006f40 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d3e:	4b5e      	ldr	r3, [pc, #376]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d46:	2b18      	cmp	r3, #24
 8006d48:	f000 80bc 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	f040 8095 	bne.w	8006e80 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b58      	ldr	r3, [pc, #352]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a57      	ldr	r2, [pc, #348]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fc fdcf 	bl	8003904 <HAL_GetTick>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fc fdcb 	bl	8003904 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e0e2      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d7c:	4b4e      	ldr	r3, [pc, #312]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f0      	bne.n	8006d6a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d88:	4b4b      	ldr	r3, [pc, #300]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8c:	4b4b      	ldr	r3, [pc, #300]	; (8006ebc <HAL_RCC_OscConfig+0x78c>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d98:	0112      	lsls	r2, r2, #4
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	4946      	ldr	r1, [pc, #280]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	628b      	str	r3, [r1, #40]	; 0x28
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	3b01      	subs	r3, #1
 8006da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	3b01      	subs	r3, #1
 8006db2:	025b      	lsls	r3, r3, #9
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dd2:	4939      	ldr	r1, [pc, #228]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006dd8:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006de4:	4b34      	ldr	r3, [pc, #208]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de8:	4b35      	ldr	r3, [pc, #212]	; (8006ec0 <HAL_RCC_OscConfig+0x790>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006df0:	00d2      	lsls	r2, r2, #3
 8006df2:	4931      	ldr	r1, [pc, #196]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006df8:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f023 020c 	bic.w	r2, r3, #12
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	492c      	ldr	r1, [pc, #176]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	f023 0202 	bic.w	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	4928      	ldr	r1, [pc, #160]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a25      	ldr	r2, [pc, #148]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e28:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a22      	ldr	r2, [pc, #136]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e34:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc fd54 	bl	8003904 <HAL_GetTick>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fc fd50 	bl	8003904 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e067      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e72:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0x730>
 8006e7e:	e05f      	b.n	8006f40 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fc fd3a 	bl	8003904 <HAL_GetTick>
 8006e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fc fd36 	bl	8003904 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e04d      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ea6:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <HAL_RCC_OscConfig+0x788>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x764>
 8006eb2:	e045      	b.n	8006f40 <HAL_RCC_OscConfig+0x810>
 8006eb4:	58024800 	.word	0x58024800
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	fffffc0c 	.word	0xfffffc0c
 8006ec0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ec4:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <HAL_RCC_OscConfig+0x81c>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006eca:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <HAL_RCC_OscConfig+0x81c>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d031      	beq.n	8006f3c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f003 0203 	and.w	r2, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d12a      	bne.n	8006f3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	091b      	lsrs	r3, r3, #4
 8006eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d122      	bne.n	8006f3c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d11a      	bne.n	8006f3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	0a5b      	lsrs	r3, r3, #9
 8006f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d111      	bne.n	8006f3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	0c1b      	lsrs	r3, r3, #16
 8006f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d108      	bne.n	8006f3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	0e1b      	lsrs	r3, r3, #24
 8006f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d001      	beq.n	8006f40 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	; 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400

08006f50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e19c      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f64:	4b8a      	ldr	r3, [pc, #552]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d910      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b87      	ldr	r3, [pc, #540]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 020f 	bic.w	r2, r3, #15
 8006f7a:	4985      	ldr	r1, [pc, #532]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b83      	ldr	r3, [pc, #524]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e184      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	4b7b      	ldr	r3, [pc, #492]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d908      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fb0:	4b78      	ldr	r3, [pc, #480]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4975      	ldr	r1, [pc, #468]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	4b70      	ldr	r3, [pc, #448]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d908      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fde:	4b6d      	ldr	r3, [pc, #436]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	496a      	ldr	r1, [pc, #424]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d010      	beq.n	800701e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	4b64      	ldr	r3, [pc, #400]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007008:	429a      	cmp	r2, r3
 800700a:	d908      	bls.n	800701e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800700c:	4b61      	ldr	r3, [pc, #388]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	495e      	ldr	r1, [pc, #376]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800701a:	4313      	orrs	r3, r2
 800701c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	4b59      	ldr	r3, [pc, #356]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007036:	429a      	cmp	r2, r3
 8007038:	d908      	bls.n	800704c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800703a:	4b56      	ldr	r3, [pc, #344]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4953      	ldr	r1, [pc, #332]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007048:	4313      	orrs	r3, r2
 800704a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d010      	beq.n	800707a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	429a      	cmp	r2, r3
 8007066:	d908      	bls.n	800707a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007068:	4b4a      	ldr	r3, [pc, #296]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f023 020f 	bic.w	r2, r3, #15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4947      	ldr	r1, [pc, #284]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007076:	4313      	orrs	r3, r2
 8007078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d055      	beq.n	8007132 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007086:	4b43      	ldr	r3, [pc, #268]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4940      	ldr	r1, [pc, #256]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007094:	4313      	orrs	r3, r2
 8007096:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d107      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070a0:	4b3c      	ldr	r3, [pc, #240]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d121      	bne.n	80070f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0f6      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d107      	bne.n	80070c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070b8:	4b36      	ldr	r3, [pc, #216]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d115      	bne.n	80070f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0ea      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070d0:	4b30      	ldr	r3, [pc, #192]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d109      	bne.n	80070f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0de      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e0d6      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070f0:	4b28      	ldr	r3, [pc, #160]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f023 0207 	bic.w	r2, r3, #7
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4925      	ldr	r1, [pc, #148]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007102:	f7fc fbff 	bl	8003904 <HAL_GetTick>
 8007106:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007108:	e00a      	b.n	8007120 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710a:	f7fc fbfb 	bl	8003904 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f241 3288 	movw	r2, #5000	; 0x1388
 8007118:	4293      	cmp	r3, r2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e0be      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007120:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	429a      	cmp	r2, r3
 8007130:	d1eb      	bne.n	800710a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d010      	beq.n	8007160 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	429a      	cmp	r2, r3
 800714c:	d208      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f023 020f 	bic.w	r2, r3, #15
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	490e      	ldr	r1, [pc, #56]	; (8007194 <HAL_RCC_ClockConfig+0x244>)
 800715c:	4313      	orrs	r3, r2
 800715e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d214      	bcs.n	8007198 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 020f 	bic.w	r2, r3, #15
 8007176:	4906      	ldr	r1, [pc, #24]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b04      	ldr	r3, [pc, #16]	; (8007190 <HAL_RCC_ClockConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d005      	beq.n	8007198 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e086      	b.n	800729e <HAL_RCC_ClockConfig+0x34e>
 8007190:	52002000 	.word	0x52002000
 8007194:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d010      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d208      	bcs.n	80071c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071b4:	4b3c      	ldr	r3, [pc, #240]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	4939      	ldr	r1, [pc, #228]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d010      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695a      	ldr	r2, [r3, #20]
 80071d6:	4b34      	ldr	r3, [pc, #208]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071de:	429a      	cmp	r2, r3
 80071e0:	d208      	bcs.n	80071f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071e2:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	492e      	ldr	r1, [pc, #184]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d010      	beq.n	8007222 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	4b28      	ldr	r3, [pc, #160]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800720c:	429a      	cmp	r2, r3
 800720e:	d208      	bcs.n	8007222 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007210:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	4922      	ldr	r1, [pc, #136]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 800721e:	4313      	orrs	r3, r2
 8007220:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d010      	beq.n	8007250 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69da      	ldr	r2, [r3, #28]
 8007232:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800723a:	429a      	cmp	r2, r3
 800723c:	d208      	bcs.n	8007250 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	4917      	ldr	r1, [pc, #92]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 800724c:	4313      	orrs	r3, r2
 800724e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007250:	f000 f834 	bl	80072bc <HAL_RCC_GetSysClockFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	4912      	ldr	r1, [pc, #72]	; (80072ac <HAL_RCC_ClockConfig+0x35c>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
 800726c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800726e:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <HAL_RCC_ClockConfig+0x358>)
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a0d      	ldr	r2, [pc, #52]	; (80072ac <HAL_RCC_ClockConfig+0x35c>)
 8007278:	5cd3      	ldrb	r3, [r2, r3]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
 8007284:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <HAL_RCC_ClockConfig+0x360>)
 8007286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007288:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <HAL_RCC_ClockConfig+0x364>)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800728e:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <HAL_RCC_ClockConfig+0x368>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7fc faec 	bl	8003870 <HAL_InitTick>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	58024400 	.word	0x58024400
 80072ac:	08010f70 	.word	0x08010f70
 80072b0:	24000004 	.word	0x24000004
 80072b4:	24000000 	.word	0x24000000
 80072b8:	24000090 	.word	0x24000090

080072bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	b089      	sub	sp, #36	; 0x24
 80072c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072c2:	4bb3      	ldr	r3, [pc, #716]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ca:	2b18      	cmp	r3, #24
 80072cc:	f200 8155 	bhi.w	800757a <HAL_RCC_GetSysClockFreq+0x2be>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	0800733d 	.word	0x0800733d
 80072dc:	0800757b 	.word	0x0800757b
 80072e0:	0800757b 	.word	0x0800757b
 80072e4:	0800757b 	.word	0x0800757b
 80072e8:	0800757b 	.word	0x0800757b
 80072ec:	0800757b 	.word	0x0800757b
 80072f0:	0800757b 	.word	0x0800757b
 80072f4:	0800757b 	.word	0x0800757b
 80072f8:	08007363 	.word	0x08007363
 80072fc:	0800757b 	.word	0x0800757b
 8007300:	0800757b 	.word	0x0800757b
 8007304:	0800757b 	.word	0x0800757b
 8007308:	0800757b 	.word	0x0800757b
 800730c:	0800757b 	.word	0x0800757b
 8007310:	0800757b 	.word	0x0800757b
 8007314:	0800757b 	.word	0x0800757b
 8007318:	08007369 	.word	0x08007369
 800731c:	0800757b 	.word	0x0800757b
 8007320:	0800757b 	.word	0x0800757b
 8007324:	0800757b 	.word	0x0800757b
 8007328:	0800757b 	.word	0x0800757b
 800732c:	0800757b 	.word	0x0800757b
 8007330:	0800757b 	.word	0x0800757b
 8007334:	0800757b 	.word	0x0800757b
 8007338:	0800736f 	.word	0x0800736f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800733c:	4b94      	ldr	r3, [pc, #592]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007348:	4b91      	ldr	r3, [pc, #580]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a90      	ldr	r2, [pc, #576]	; (8007594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800735a:	e111      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800735c:	4b8d      	ldr	r3, [pc, #564]	; (8007594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800735e:	61bb      	str	r3, [r7, #24]
    break;
 8007360:	e10e      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007362:	4b8d      	ldr	r3, [pc, #564]	; (8007598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007364:	61bb      	str	r3, [r7, #24]
    break;
 8007366:	e10b      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007368:	4b8c      	ldr	r3, [pc, #560]	; (800759c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800736a:	61bb      	str	r3, [r7, #24]
    break;
 800736c:	e108      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800736e:	4b88      	ldr	r3, [pc, #544]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007378:	4b85      	ldr	r3, [pc, #532]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007382:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007384:	4b82      	ldr	r3, [pc, #520]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800738e:	4b80      	ldr	r3, [pc, #512]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007392:	08db      	lsrs	r3, r3, #3
 8007394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	fb02 f303 	mul.w	r3, r2, r3
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80e1 	beq.w	8007574 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	f000 8083 	beq.w	80074c0 <HAL_RCC_GetSysClockFreq+0x204>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	f200 80a1 	bhi.w	8007504 <HAL_RCC_GetSysClockFreq+0x248>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0x114>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d056      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x1c0>
 80073ce:	e099      	b.n	8007504 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d0:	4b6f      	ldr	r3, [pc, #444]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d02d      	beq.n	8007438 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073dc:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	4a6b      	ldr	r2, [pc, #428]	; (8007594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b62      	ldr	r3, [pc, #392]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	ed97 6a02 	vldr	s12, [r7, #8]
 800741a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007436:	e087      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b51      	ldr	r3, [pc, #324]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a02 	vldr	s12, [r7, #8]
 800745e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747a:	e065      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b40      	ldr	r3, [pc, #256]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074be:	e043      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b2f      	ldr	r3, [pc, #188]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e021      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a02 	vldr	s12, [r7, #8]
 800752a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	0a5b      	lsrs	r3, r3, #9
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	3301      	adds	r3, #1
 8007554:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007560:	edd7 6a07 	vldr	s13, [r7, #28]
 8007564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756c:	ee17 3a90 	vmov	r3, s15
 8007570:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007572:	e005      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61bb      	str	r3, [r7, #24]
    break;
 8007578:	e002      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800757c:	61bb      	str	r3, [r7, #24]
    break;
 800757e:	bf00      	nop
  }

  return sysclockfreq;
 8007580:	69bb      	ldr	r3, [r7, #24]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3724      	adds	r7, #36	; 0x24
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400
 8007594:	03d09000 	.word	0x03d09000
 8007598:	003d0900 	.word	0x003d0900
 800759c:	017d7840 	.word	0x017d7840
 80075a0:	46000000 	.word	0x46000000
 80075a4:	4c742400 	.word	0x4c742400
 80075a8:	4a742400 	.word	0x4a742400
 80075ac:	4bbebc20 	.word	0x4bbebc20

080075b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075b6:	f7ff fe81 	bl	80072bc <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <HAL_RCC_GetHCLKFreq+0x50>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	490f      	ldr	r1, [pc, #60]	; (8007604 <HAL_RCC_GetHCLKFreq+0x54>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <HAL_RCC_GetHCLKFreq+0x50>)
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	4a09      	ldr	r2, [pc, #36]	; (8007604 <HAL_RCC_GetHCLKFreq+0x54>)
 80075de:	5cd3      	ldrb	r3, [r2, r3]
 80075e0:	f003 031f 	and.w	r3, r3, #31
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <HAL_RCC_GetHCLKFreq+0x58>)
 80075ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075ee:	4a07      	ldr	r2, [pc, #28]	; (800760c <HAL_RCC_GetHCLKFreq+0x5c>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <HAL_RCC_GetHCLKFreq+0x58>)
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	58024400 	.word	0x58024400
 8007604:	08010f70 	.word	0x08010f70
 8007608:	24000004 	.word	0x24000004
 800760c:	24000000 	.word	0x24000000

08007610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007614:	f7ff ffcc 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	4904      	ldr	r1, [pc, #16]	; (8007638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007626:	5ccb      	ldrb	r3, [r1, r3]
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	58024400 	.word	0x58024400
 8007638:	08010f70 	.word	0x08010f70

0800763c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007640:	f7ff ffb6 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 8007644:	4602      	mov	r2, r0
 8007646:	4b06      	ldr	r3, [pc, #24]	; (8007660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	4904      	ldr	r1, [pc, #16]	; (8007664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007652:	5ccb      	ldrb	r3, [r1, r3]
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800765c:	4618      	mov	r0, r3
 800765e:	bd80      	pop	{r7, pc}
 8007660:	58024400 	.word	0x58024400
 8007664:	08010f70 	.word	0x08010f70

08007668 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007670:	2300      	movs	r3, #0
 8007672:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007674:	2300      	movs	r3, #0
 8007676:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03f      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800768c:	d02a      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800768e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007692:	d824      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007698:	d018      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800769a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800769e:	d81e      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80076a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a8:	d007      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80076aa:	e018      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ac:	4bab      	ldr	r3, [pc, #684]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	4aaa      	ldr	r2, [pc, #680]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076b8:	e015      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3304      	adds	r3, #4
 80076be:	2102      	movs	r1, #2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 f9bf 	bl	8008a44 <RCCEx_PLL2_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076ca:	e00c      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	2102      	movs	r1, #2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fa68 	bl	8008ba8 <RCCEx_PLL3_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
      break;
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80076ec:	4b9b      	ldr	r3, [pc, #620]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f8:	4998      	ldr	r1, [pc, #608]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	650b      	str	r3, [r1, #80]	; 0x50
 80076fe:	e001      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d03d      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007714:	2b04      	cmp	r3, #4
 8007716:	d826      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007718:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007735 	.word	0x08007735
 8007724:	08007743 	.word	0x08007743
 8007728:	08007755 	.word	0x08007755
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007734:	4b89      	ldr	r3, [pc, #548]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4a88      	ldr	r2, [pc, #544]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800773a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007740:	e015      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f97b 	bl	8008a44 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007752:	e00c      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	2100      	movs	r1, #0
 800775a:	4618      	mov	r0, r3
 800775c:	f001 fa24 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007764:	e003      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
      break;
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800776c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007774:	4b79      	ldr	r3, [pc, #484]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	f023 0207 	bic.w	r2, r3, #7
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007780:	4976      	ldr	r1, [pc, #472]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	4313      	orrs	r3, r2
 8007784:	650b      	str	r3, [r1, #80]	; 0x50
 8007786:	e001      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007794:	2b00      	cmp	r3, #0
 8007796:	d042      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a0:	d02b      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80077a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a6:	d825      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80077a8:	2bc0      	cmp	r3, #192	; 0xc0
 80077aa:	d028      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80077ac:	2bc0      	cmp	r3, #192	; 0xc0
 80077ae:	d821      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d016      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d81d      	bhi.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d007      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80077c0:	e018      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c2:	4b66      	ldr	r3, [pc, #408]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	4a65      	ldr	r2, [pc, #404]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80077ce:	e017      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 f934 	bl	8008a44 <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80077e0:	e00e      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3324      	adds	r3, #36	; 0x24
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 f9dd 	bl	8008ba8 <RCCEx_PLL3_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80077f2:	e005      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
      break;
 80077f8:	e002      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80077fa:	bf00      	nop
 80077fc:	e000      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80077fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007806:	4b55      	ldr	r3, [pc, #340]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	4952      	ldr	r1, [pc, #328]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007814:	4313      	orrs	r3, r2
 8007816:	650b      	str	r3, [r1, #80]	; 0x50
 8007818:	e001      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007826:	2b00      	cmp	r3, #0
 8007828:	d049      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007830:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007834:	d030      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007836:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800783a:	d82a      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800783c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007840:	d02c      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007842:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007846:	d824      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784c:	d018      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800784e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007852:	d81e      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800785c:	d007      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800785e:	e018      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007860:	4b3e      	ldr	r3, [pc, #248]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	4a3d      	ldr	r2, [pc, #244]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800786c:	e017      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f8e5 	bl	8008a44 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800787e:	e00e      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f001 f98e 	bl	8008ba8 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007890:	e005      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
      break;
 8007896:	e002      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800789c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078a4:	4b2d      	ldr	r3, [pc, #180]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078b2:	492a      	ldr	r1, [pc, #168]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	658b      	str	r3, [r1, #88]	; 0x58
 80078b8:	e001      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04c      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078d4:	d030      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80078d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078da:	d82a      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80078dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078e0:	d02c      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80078e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078e6:	d824      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80078e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078ec:	d018      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80078ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078f2:	d81e      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80078f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078fc:	d007      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80078fe:	e018      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007900:	4b16      	ldr	r3, [pc, #88]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	4a15      	ldr	r2, [pc, #84]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800790c:	e017      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f895 	bl	8008a44 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800791e:	e00e      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3324      	adds	r3, #36	; 0x24
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f93e 	bl	8008ba8 <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007930:	e005      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
      break;
 8007936:	e002      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800793c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10d      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007948:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007952:	4902      	ldr	r1, [pc, #8]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007954:	4313      	orrs	r3, r2
 8007956:	658b      	str	r3, [r1, #88]	; 0x58
 8007958:	e004      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800795a:	bf00      	nop
 800795c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d032      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007974:	2b30      	cmp	r3, #48	; 0x30
 8007976:	d01c      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007978:	2b30      	cmp	r3, #48	; 0x30
 800797a:	d817      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 800797c:	2b20      	cmp	r3, #32
 800797e:	d00c      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007980:	2b20      	cmp	r3, #32
 8007982:	d813      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d016      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007988:	2b10      	cmp	r3, #16
 800798a:	d10f      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800798c:	4baf      	ldr	r3, [pc, #700]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4aae      	ldr	r2, [pc, #696]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007998:	e00e      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 f84f 	bl	8008a44 <RCCEx_PLL2_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80079aa:	e005      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
      break;
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80079b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80079be:	4ba3      	ldr	r3, [pc, #652]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	49a0      	ldr	r1, [pc, #640]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079d0:	e001      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d047      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ea:	d030      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80079ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f0:	d82a      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80079f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079f6:	d02c      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80079f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079fc:	d824      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80079fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a02:	d018      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a08:	d81e      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	d007      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007a14:	e018      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a16:	4b8d      	ldr	r3, [pc, #564]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1a:	4a8c      	ldr	r2, [pc, #560]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a22:	e017      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 f80a 	bl	8008a44 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a34:	e00e      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 f8b3 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a46:	e005      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4c:	e002      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a5a:	4b7c      	ldr	r3, [pc, #496]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a66:	4979      	ldr	r1, [pc, #484]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	650b      	str	r3, [r1, #80]	; 0x50
 8007a6c:	e001      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d049      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a86:	d02e      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a8c:	d828      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a92:	d02a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a98:	d822      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a9e:	d026      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007aa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aa4:	d81c      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aaa:	d010      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab0:	d816      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01d      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aba:	d111      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 ffbe 	bl	8008a44 <RCCEx_PLL2_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007acc:	e012      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 f867 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ade:	e009      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e006      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e004      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007aea:	bf00      	nop
 8007aec:	e002      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007aee:	bf00      	nop
 8007af0:	e000      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007afa:	4b54      	ldr	r3, [pc, #336]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b06:	4951      	ldr	r1, [pc, #324]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	650b      	str	r3, [r1, #80]	; 0x50
 8007b0c:	e001      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d04b      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b28:	d02e      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b2e:	d828      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d02a      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3a:	d822      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b40:	d026      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b46:	d81c      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b4c:	d010      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b52:	d816      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5c:	d111      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3304      	adds	r3, #4
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 ff6d 	bl	8008a44 <RCCEx_PLL2_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b6e:	e012      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f816 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b80:	e009      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
      break;
 8007b86:	e006      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007b88:	bf00      	nop
 8007b8a:	e004      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007b8c:	bf00      	nop
 8007b8e:	e002      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007b90:	bf00      	nop
 8007b92:	e000      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b9c:	4b2b      	ldr	r3, [pc, #172]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007baa:	4928      	ldr	r1, [pc, #160]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	658b      	str	r3, [r1, #88]	; 0x58
 8007bb0:	e001      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d02f      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bca:	d00e      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd0:	d814      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d015      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bda:	d10f      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007be8:	e00c      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3304      	adds	r3, #4
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 ff27 	bl	8008a44 <RCCEx_PLL2_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007bfa:	e003      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007c00:	e000      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c16:	490d      	ldr	r1, [pc, #52]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	650b      	str	r3, [r1, #80]	; 0x50
 8007c1c:	e001      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d033      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d81c      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c77 	.word	0x08007c77
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c5f 	.word	0x08007c5f
 8007c48:	08007c77 	.word	0x08007c77
 8007c4c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c50:	4bb8      	ldr	r3, [pc, #736]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	4ab7      	ldr	r2, [pc, #732]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c5c:	e00c      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3304      	adds	r3, #4
 8007c62:	2102      	movs	r1, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 feed 	bl	8008a44 <RCCEx_PLL2_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c6e:	e003      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      break;
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c7e:	4bad      	ldr	r3, [pc, #692]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	49aa      	ldr	r1, [pc, #680]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 8086 	beq.w	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ca4:	4ba4      	ldr	r3, [pc, #656]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4aa3      	ldr	r2, [pc, #652]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cb0:	f7fb fe28 	bl	8003904 <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cb6:	e009      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb8:	f7fb fe24 	bl	8003904 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b64      	cmp	r3, #100	; 0x64
 8007cc4:	d902      	bls.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	75fb      	strb	r3, [r7, #23]
        break;
 8007cca:	e005      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ccc:	4b9a      	ldr	r3, [pc, #616]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0ef      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d166      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007cde:	4b95      	ldr	r3, [pc, #596]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ce0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ce8:	4053      	eors	r3, r2
 8007cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d013      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cf2:	4b90      	ldr	r3, [pc, #576]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cfc:	4b8d      	ldr	r3, [pc, #564]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	4a8c      	ldr	r2, [pc, #560]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d08:	4b8a      	ldr	r3, [pc, #552]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0c:	4a89      	ldr	r2, [pc, #548]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d14:	4a87      	ldr	r2, [pc, #540]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d24:	d115      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d26:	f7fb fded 	bl	8003904 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d2c:	e00b      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fb fde9 	bl	8003904 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d902      	bls.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	75fb      	strb	r3, [r7, #23]
            break;
 8007d44:	e005      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d46:	4b7b      	ldr	r3, [pc, #492]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0ed      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d126      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d66:	d10d      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007d68:	4b72      	ldr	r3, [pc, #456]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d76:	0919      	lsrs	r1, r3, #4
 8007d78:	4b70      	ldr	r3, [pc, #448]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007d7a:	400b      	ands	r3, r1
 8007d7c:	496d      	ldr	r1, [pc, #436]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
 8007d82:	e005      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007d84:	4b6b      	ldr	r3, [pc, #428]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	4a6a      	ldr	r2, [pc, #424]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d8e:	6113      	str	r3, [r2, #16]
 8007d90:	4b68      	ldr	r3, [pc, #416]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d9e:	4965      	ldr	r1, [pc, #404]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	670b      	str	r3, [r1, #112]	; 0x70
 8007da4:	e004      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	75bb      	strb	r3, [r7, #22]
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d07e      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dc0:	2b28      	cmp	r3, #40	; 0x28
 8007dc2:	d867      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007dc4:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007e9b 	.word	0x08007e9b
 8007dd0:	08007e95 	.word	0x08007e95
 8007dd4:	08007e95 	.word	0x08007e95
 8007dd8:	08007e95 	.word	0x08007e95
 8007ddc:	08007e95 	.word	0x08007e95
 8007de0:	08007e95 	.word	0x08007e95
 8007de4:	08007e95 	.word	0x08007e95
 8007de8:	08007e95 	.word	0x08007e95
 8007dec:	08007e71 	.word	0x08007e71
 8007df0:	08007e95 	.word	0x08007e95
 8007df4:	08007e95 	.word	0x08007e95
 8007df8:	08007e95 	.word	0x08007e95
 8007dfc:	08007e95 	.word	0x08007e95
 8007e00:	08007e95 	.word	0x08007e95
 8007e04:	08007e95 	.word	0x08007e95
 8007e08:	08007e95 	.word	0x08007e95
 8007e0c:	08007e83 	.word	0x08007e83
 8007e10:	08007e95 	.word	0x08007e95
 8007e14:	08007e95 	.word	0x08007e95
 8007e18:	08007e95 	.word	0x08007e95
 8007e1c:	08007e95 	.word	0x08007e95
 8007e20:	08007e95 	.word	0x08007e95
 8007e24:	08007e95 	.word	0x08007e95
 8007e28:	08007e95 	.word	0x08007e95
 8007e2c:	08007e9b 	.word	0x08007e9b
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	08007e95 	.word	0x08007e95
 8007e38:	08007e95 	.word	0x08007e95
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e95 	.word	0x08007e95
 8007e4c:	08007e9b 	.word	0x08007e9b
 8007e50:	08007e95 	.word	0x08007e95
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e95 	.word	0x08007e95
 8007e5c:	08007e95 	.word	0x08007e95
 8007e60:	08007e95 	.word	0x08007e95
 8007e64:	08007e95 	.word	0x08007e95
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007e9b 	.word	0x08007e9b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fde4 	bl	8008a44 <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e80:	e00c      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3324      	adds	r3, #36	; 0x24
 8007e86:	2101      	movs	r1, #1
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fe8d 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	e000      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ea2:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eae:	4921      	ldr	r1, [pc, #132]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	654b      	str	r3, [r1, #84]	; 0x54
 8007eb4:	e001      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03e      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	2b05      	cmp	r3, #5
 8007ecc:	d820      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f17 	.word	0x08007f17
 8007ed8:	08007eed 	.word	0x08007eed
 8007edc:	08007eff 	.word	0x08007eff
 8007ee0:	08007f17 	.word	0x08007f17
 8007ee4:	08007f17 	.word	0x08007f17
 8007ee8:	08007f17 	.word	0x08007f17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fda6 	bl	8008a44 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007efc:	e00c      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3324      	adds	r3, #36	; 0x24
 8007f02:	2101      	movs	r1, #1
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fe4f 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f0e:	e003      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
      break;
 8007f14:	e000      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d110      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f22:	f023 0207 	bic.w	r2, r3, #7
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2a:	4902      	ldr	r1, [pc, #8]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	654b      	str	r3, [r1, #84]	; 0x54
 8007f30:	e008      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007f32:	bf00      	nop
 8007f34:	58024400 	.word	0x58024400
 8007f38:	58024800 	.word	0x58024800
 8007f3c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d039      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d820      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007fa3 	.word	0x08007fa3
 8007f64:	08007f79 	.word	0x08007f79
 8007f68:	08007f8b 	.word	0x08007f8b
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fd60 	bl	8008a44 <RCCEx_PLL2_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f88:	e00c      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3324      	adds	r3, #36	; 0x24
 8007f8e:	2101      	movs	r1, #1
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fe09 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f9a:	e003      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	e000      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007faa:	4bb7      	ldr	r3, [pc, #732]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fae:	f023 0207 	bic.w	r2, r3, #7
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	49b3      	ldr	r1, [pc, #716]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8007fbe:	e001      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0320 	and.w	r3, r3, #32
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d04b      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fda:	d02e      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fe0:	d828      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe6:	d02a      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d822      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ff2:	d026      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007ff4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ff8:	d81c      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffe:	d010      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008004:	d816      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01d      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800800a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800e:	d111      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fd14 	bl	8008a44 <RCCEx_PLL2_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008020:	e012      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3324      	adds	r3, #36	; 0x24
 8008026:	2102      	movs	r1, #2
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fdbd 	bl	8008ba8 <RCCEx_PLL3_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008032:	e009      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
      break;
 8008038:	e006      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800803a:	bf00      	nop
 800803c:	e004      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800804e:	4b8e      	ldr	r3, [pc, #568]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805c:	498a      	ldr	r1, [pc, #552]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800805e:	4313      	orrs	r3, r2
 8008060:	654b      	str	r3, [r1, #84]	; 0x54
 8008062:	e001      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d04b      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800807a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800807e:	d02e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008080:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008084:	d828      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808a:	d02a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800808c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008090:	d822      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008096:	d026      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800809c:	d81c      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800809e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a2:	d010      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80080a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a8:	d816      	bhi.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d01d      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80080ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b2:	d111      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3304      	adds	r3, #4
 80080b8:	2100      	movs	r1, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fcc2 	bl	8008a44 <RCCEx_PLL2_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80080c4:	e012      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3324      	adds	r3, #36	; 0x24
 80080ca:	2102      	movs	r1, #2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fd6b 	bl	8008ba8 <RCCEx_PLL3_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80080d6:	e009      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
      break;
 80080dc:	e006      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80080de:	bf00      	nop
 80080e0:	e004      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80080ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080f2:	4b65      	ldr	r3, [pc, #404]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008100:	4961      	ldr	r1, [pc, #388]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008102:	4313      	orrs	r3, r2
 8008104:	658b      	str	r3, [r1, #88]	; 0x58
 8008106:	e001      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d04b      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800811e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008122:	d02e      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008124:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008128:	d828      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800812a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812e:	d02a      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008134:	d822      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008136:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800813a:	d026      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800813c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008140:	d81c      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008146:	d010      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800814c:	d816      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01d      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	d111      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3304      	adds	r3, #4
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fc70 	bl	8008a44 <RCCEx_PLL2_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008168:	e012      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3324      	adds	r3, #36	; 0x24
 800816e:	2102      	movs	r1, #2
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fd19 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800817a:	e009      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
      break;
 8008180:	e006      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008182:	bf00      	nop
 8008184:	e004      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008186:	bf00      	nop
 8008188:	e002      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800818a:	bf00      	nop
 800818c:	e000      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800818e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008196:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081a4:	4938      	ldr	r1, [pc, #224]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	658b      	str	r3, [r1, #88]	; 0x58
 80081aa:	e001      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01a      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c6:	d10a      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3324      	adds	r3, #36	; 0x24
 80081cc:	2102      	movs	r1, #2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fcea 	bl	8008ba8 <RCCEx_PLL3_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80081de:	4b2a      	ldr	r3, [pc, #168]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ec:	4926      	ldr	r1, [pc, #152]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0310 	and.w	r3, r3, #16
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008208:	d10a      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3324      	adds	r3, #36	; 0x24
 800820e:	2102      	movs	r1, #2
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fcc9 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008220:	4b19      	ldr	r3, [pc, #100]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800822e:	4916      	ldr	r1, [pc, #88]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008230:	4313      	orrs	r3, r2
 8008232:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d036      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800824a:	d01f      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008250:	d817      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825a:	d009      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800825c:	e011      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3304      	adds	r3, #4
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fbed 	bl	8008a44 <RCCEx_PLL2_Config>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800826e:	e00e      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3324      	adds	r3, #36	; 0x24
 8008274:	2102      	movs	r1, #2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fc96 	bl	8008ba8 <RCCEx_PLL3_Config>
 800827c:	4603      	mov	r3, r0
 800827e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008280:	e005      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
      break;
 8008286:	e002      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008288:	58024400 	.word	0x58024400
      break;
 800828c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008294:	4b8b      	ldr	r3, [pc, #556]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082a2:	4988      	ldr	r1, [pc, #544]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	658b      	str	r3, [r1, #88]	; 0x58
 80082a8:	e001      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d033      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c4:	d01c      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80082c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ca:	d816      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80082cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d0:	d003      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80082d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d6:	d007      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80082d8:	e00f      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082da:	4b7a      	ldr	r3, [pc, #488]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	4a79      	ldr	r2, [pc, #484]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80082e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80082e6:	e00c      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3324      	adds	r3, #36	; 0x24
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fc5a 	bl	8008ba8 <RCCEx_PLL3_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80082f8:	e003      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
      break;
 80082fe:	e000      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008308:	4b6e      	ldr	r3, [pc, #440]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008316:	496b      	ldr	r1, [pc, #428]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	654b      	str	r3, [r1, #84]	; 0x54
 800831c:	e001      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d029      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833a:	d007      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800833c:	e00f      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833e:	4b61      	ldr	r3, [pc, #388]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4a60      	ldr	r2, [pc, #384]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800834a:	e00b      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2102      	movs	r1, #2
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fb76 	bl	8008a44 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800835c:	e002      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
      break;
 8008362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800836a:	4b56      	ldr	r3, [pc, #344]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	4953      	ldr	r1, [pc, #332]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008378:	4313      	orrs	r3, r2
 800837a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800837c:	e001      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3324      	adds	r3, #36	; 0x24
 8008392:	2102      	movs	r1, #2
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fc07 	bl	8008ba8 <RCCEx_PLL3_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d030      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083b8:	d017      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80083ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083be:	d811      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80083c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c4:	d013      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80083c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ca:	d80b      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d010      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80083d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d4:	d106      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d6:	4b3b      	ldr	r3, [pc, #236]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	4a3a      	ldr	r2, [pc, #232]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80083dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80083e2:	e007      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
      break;
 80083e8:	e004      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80083ea:	bf00      	nop
 80083ec:	e002      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80083ee:	bf00      	nop
 80083f0:	e000      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80083f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083fa:	4b32      	ldr	r3, [pc, #200]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008406:	492f      	ldr	r1, [pc, #188]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008408:	4313      	orrs	r3, r2
 800840a:	654b      	str	r3, [r1, #84]	; 0x54
 800840c:	e001      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	4926      	ldr	r1, [pc, #152]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800842c:	4313      	orrs	r3, r2
 800842e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800843c:	4b21      	ldr	r3, [pc, #132]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800844a:	491e      	ldr	r1, [pc, #120]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d008      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800845c:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008468:	4916      	ldr	r1, [pc, #88]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00d      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	4a11      	ldr	r2, [pc, #68]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008480:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008484:	6113      	str	r3, [r2, #16]
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008490:	490c      	ldr	r1, [pc, #48]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008492:	4313      	orrs	r3, r2
 8008494:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	da08      	bge.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084aa:	4906      	ldr	r1, [pc, #24]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80084b0:	7dbb      	ldrb	r3, [r7, #22]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	58024400 	.word	0x58024400

080084c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084cc:	f7ff f870 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	091b      	lsrs	r3, r3, #4
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	4904      	ldr	r1, [pc, #16]	; (80084f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084de:	5ccb      	ldrb	r3, [r1, r3]
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	58024400 	.word	0x58024400
 80084f0:	08010f70 	.word	0x08010f70

080084f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b089      	sub	sp, #36	; 0x24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084fc:	4ba1      	ldr	r3, [pc, #644]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008506:	4b9f      	ldr	r3, [pc, #636]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	0b1b      	lsrs	r3, r3, #12
 800850c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008510:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008512:	4b9c      	ldr	r3, [pc, #624]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	091b      	lsrs	r3, r3, #4
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800851e:	4b99      	ldr	r3, [pc, #612]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8111 	beq.w	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b02      	cmp	r3, #2
 8008546:	f000 8083 	beq.w	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b02      	cmp	r3, #2
 800854e:	f200 80a1 	bhi.w	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d056      	beq.n	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800855e:	e099      	b.n	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008560:	4b88      	ldr	r3, [pc, #544]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02d      	beq.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800856c:	4b85      	ldr	r3, [pc, #532]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	4a84      	ldr	r2, [pc, #528]	; (8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b7b      	ldr	r3, [pc, #492]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085c6:	e087      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b6a      	ldr	r3, [pc, #424]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800860a:	e065      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b59      	ldr	r3, [pc, #356]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a56 	vldr	s11, [pc, #344]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800864e:	e043      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b48      	ldr	r3, [pc, #288]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a45 	vldr	s11, [pc, #276]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008692:	e021      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b37      	ldr	r3, [pc, #220]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086d8:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	0a5b      	lsrs	r3, r3, #9
 80086de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086fe:	ee17 2a90 	vmov	r2, s15
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008706:	4b1f      	ldr	r3, [pc, #124]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800871c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008720:	edd7 6a07 	vldr	s13, [r7, #28]
 8008724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872c:	ee17 2a90 	vmov	r2, s15
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008734:	4b13      	ldr	r3, [pc, #76]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800874a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800874e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875a:	ee17 2a90 	vmov	r2, s15
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008762:	e008      	b.n	8008776 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]
}
 8008776:	bf00      	nop
 8008778:	3724      	adds	r7, #36	; 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	58024400 	.word	0x58024400
 8008788:	03d09000 	.word	0x03d09000
 800878c:	46000000 	.word	0x46000000
 8008790:	4c742400 	.word	0x4c742400
 8008794:	4a742400 	.word	0x4a742400
 8008798:	4bbebc20 	.word	0x4bbebc20

0800879c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	; 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a4:	4ba1      	ldr	r3, [pc, #644]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80087ae:	4b9f      	ldr	r3, [pc, #636]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	0d1b      	lsrs	r3, r3, #20
 80087b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087ba:	4b9c      	ldr	r3, [pc, #624]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087c6:	4b99      	ldr	r3, [pc, #612]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8111 	beq.w	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	f000 8083 	beq.w	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	f200 80a1 	bhi.w	800893c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d056      	beq.n	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008806:	e099      	b.n	800893c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008808:	4b88      	ldr	r3, [pc, #544]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d02d      	beq.n	8008870 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008814:	4b85      	ldr	r3, [pc, #532]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	4a84      	ldr	r2, [pc, #528]	; (8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b7b      	ldr	r3, [pc, #492]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800886e:	e087      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b6a      	ldr	r3, [pc, #424]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088b2:	e065      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b59      	ldr	r3, [pc, #356]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f6:	e043      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b48      	ldr	r3, [pc, #288]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800893a:	e021      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800897e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008980:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800899a:	edd7 6a07 	vldr	s13, [r7, #28]
 800899e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a6:	ee17 2a90 	vmov	r2, s15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80089ae:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b8:	ee07 3a90 	vmov	s15, r3
 80089bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d4:	ee17 2a90 	vmov	r2, s15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089dc:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e0:	0e1b      	lsrs	r3, r3, #24
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 2a90 	vmov	r2, s15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a0a:	e008      	b.n	8008a1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	609a      	str	r2, [r3, #8]
}
 8008a1e:	bf00      	nop
 8008a20:	3724      	adds	r7, #36	; 0x24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	03d09000 	.word	0x03d09000
 8008a34:	46000000 	.word	0x46000000
 8008a38:	4c742400 	.word	0x4c742400
 8008a3c:	4a742400 	.word	0x4a742400
 8008a40:	4bbebc20 	.word	0x4bbebc20

08008a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a52:	4b53      	ldr	r3, [pc, #332]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d101      	bne.n	8008a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e099      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a62:	4b4f      	ldr	r3, [pc, #316]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a4e      	ldr	r2, [pc, #312]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6e:	f7fa ff49 	bl	8003904 <HAL_GetTick>
 8008a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a74:	e008      	b.n	8008a88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a76:	f7fa ff45 	bl	8003904 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e086      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a88:	4b45      	ldr	r3, [pc, #276]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1f0      	bne.n	8008a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a94:	4b42      	ldr	r3, [pc, #264]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	031b      	lsls	r3, r3, #12
 8008aa2:	493f      	ldr	r1, [pc, #252]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	025b      	lsls	r3, r3, #9
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	061b      	lsls	r3, r3, #24
 8008ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ad8:	4931      	ldr	r1, [pc, #196]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ade:	4b30      	ldr	r3, [pc, #192]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	492d      	ldr	r1, [pc, #180]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008af0:	4b2b      	ldr	r3, [pc, #172]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	f023 0220 	bic.w	r2, r3, #32
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	4928      	ldr	r1, [pc, #160]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b02:	4b27      	ldr	r3, [pc, #156]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b08:	f023 0310 	bic.w	r3, r3, #16
 8008b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b0e:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b12:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <RCCEx_PLL2_Config+0x160>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	69d2      	ldr	r2, [r2, #28]
 8008b1a:	00d2      	lsls	r2, r2, #3
 8008b1c:	4920      	ldr	r1, [pc, #128]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b22:	4b1f      	ldr	r3, [pc, #124]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	f043 0310 	orr.w	r3, r3, #16
 8008b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b34:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b40:	e00f      	b.n	8008b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d106      	bne.n	8008b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b48:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b54:	e005      	b.n	8008b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a11      	ldr	r2, [pc, #68]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b62:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0e      	ldr	r2, [pc, #56]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6e:	f7fa fec9 	bl	8003904 <HAL_GetTick>
 8008b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b74:	e008      	b.n	8008b88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b76:	f7fa fec5 	bl	8003904 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e006      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f0      	beq.n	8008b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	ffff0007 	.word	0xffff0007

08008ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bb6:	4b53      	ldr	r3, [pc, #332]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d101      	bne.n	8008bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e099      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bc6:	4b4f      	ldr	r3, [pc, #316]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a4e      	ldr	r2, [pc, #312]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd2:	f7fa fe97 	bl	8003904 <HAL_GetTick>
 8008bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd8:	e008      	b.n	8008bec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bda:	f7fa fe93 	bl	8003904 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e086      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bec:	4b45      	ldr	r3, [pc, #276]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f0      	bne.n	8008bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bf8:	4b42      	ldr	r3, [pc, #264]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	051b      	lsls	r3, r3, #20
 8008c06:	493f      	ldr	r1, [pc, #252]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	025b      	lsls	r3, r3, #9
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	041b      	lsls	r3, r3, #16
 8008c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	061b      	lsls	r3, r3, #24
 8008c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c3c:	4931      	ldr	r1, [pc, #196]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c42:	4b30      	ldr	r3, [pc, #192]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	492d      	ldr	r1, [pc, #180]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c54:	4b2b      	ldr	r3, [pc, #172]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	4928      	ldr	r1, [pc, #160]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	4a26      	ldr	r2, [pc, #152]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c72:	4b24      	ldr	r3, [pc, #144]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <RCCEx_PLL3_Config+0x160>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	69d2      	ldr	r2, [r2, #28]
 8008c7e:	00d2      	lsls	r2, r2, #3
 8008c80:	4920      	ldr	r1, [pc, #128]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c86:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c98:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	4a19      	ldr	r2, [pc, #100]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ca4:	e00f      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d106      	bne.n	8008cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cac:	4b15      	ldr	r3, [pc, #84]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cb8:	e005      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cba:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a11      	ldr	r2, [pc, #68]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a0e      	ldr	r2, [pc, #56]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cd2:	f7fa fe17 	bl	8003904 <HAL_GetTick>
 8008cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cd8:	e008      	b.n	8008cec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cda:	f7fa fe13 	bl	8003904 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e006      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0f0      	beq.n	8008cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	58024400 	.word	0x58024400
 8008d08:	ffff0007 	.word	0xffff0007

08008d0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e02b      	b.n	8008d78 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7f7 fda9 	bl	800088c <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f001 f8bf 	bl	8009ed0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	f001 f913 	bl	8009f88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008d62:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <HAL_SDRAM_Init+0x74>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a06      	ldr	r2, [pc, #24]	; (8008d80 <HAL_SDRAM_Init+0x74>)
 8008d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d6c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	52004000 	.word	0x52004000

08008d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e042      	b.n	8008e1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7f9 f877 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2224      	movs	r2, #36	; 0x24
 8008db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0201 	bic.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f82c 	bl	8008e24 <UART_SetConfig>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e022      	b.n	8008e1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fd86 	bl	80098f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fe0d 	bl	8009a34 <UART_CheckIdleState>
 8008e1a:	4603      	mov	r3, r0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e24:	b5b0      	push	{r4, r5, r7, lr}
 8008e26:	b08e      	sub	sp, #56	; 0x38
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689a      	ldr	r2, [r3, #8]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	4313      	orrs	r3, r2
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4bc0      	ldr	r3, [pc, #768]	; (800915c <UART_SetConfig+0x338>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4ab5      	ldr	r2, [pc, #724]	; (8009160 <UART_SetConfig+0x33c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e94:	4313      	orrs	r3, r2
 8008e96:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	4bb1      	ldr	r3, [pc, #708]	; (8009164 <UART_SetConfig+0x340>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	f023 010f 	bic.w	r1, r3, #15
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4aa8      	ldr	r2, [pc, #672]	; (8009168 <UART_SetConfig+0x344>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d177      	bne.n	8008fbc <UART_SetConfig+0x198>
 8008ecc:	4ba7      	ldr	r3, [pc, #668]	; (800916c <UART_SetConfig+0x348>)
 8008ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed4:	2b28      	cmp	r3, #40	; 0x28
 8008ed6:	d86d      	bhi.n	8008fb4 <UART_SetConfig+0x190>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0xbc>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f85 	.word	0x08008f85
 8008ee4:	08008fb5 	.word	0x08008fb5
 8008ee8:	08008fb5 	.word	0x08008fb5
 8008eec:	08008fb5 	.word	0x08008fb5
 8008ef0:	08008fb5 	.word	0x08008fb5
 8008ef4:	08008fb5 	.word	0x08008fb5
 8008ef8:	08008fb5 	.word	0x08008fb5
 8008efc:	08008fb5 	.word	0x08008fb5
 8008f00:	08008f8d 	.word	0x08008f8d
 8008f04:	08008fb5 	.word	0x08008fb5
 8008f08:	08008fb5 	.word	0x08008fb5
 8008f0c:	08008fb5 	.word	0x08008fb5
 8008f10:	08008fb5 	.word	0x08008fb5
 8008f14:	08008fb5 	.word	0x08008fb5
 8008f18:	08008fb5 	.word	0x08008fb5
 8008f1c:	08008fb5 	.word	0x08008fb5
 8008f20:	08008f95 	.word	0x08008f95
 8008f24:	08008fb5 	.word	0x08008fb5
 8008f28:	08008fb5 	.word	0x08008fb5
 8008f2c:	08008fb5 	.word	0x08008fb5
 8008f30:	08008fb5 	.word	0x08008fb5
 8008f34:	08008fb5 	.word	0x08008fb5
 8008f38:	08008fb5 	.word	0x08008fb5
 8008f3c:	08008fb5 	.word	0x08008fb5
 8008f40:	08008f9d 	.word	0x08008f9d
 8008f44:	08008fb5 	.word	0x08008fb5
 8008f48:	08008fb5 	.word	0x08008fb5
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008fb5 	.word	0x08008fb5
 8008f54:	08008fb5 	.word	0x08008fb5
 8008f58:	08008fb5 	.word	0x08008fb5
 8008f5c:	08008fb5 	.word	0x08008fb5
 8008f60:	08008fa5 	.word	0x08008fa5
 8008f64:	08008fb5 	.word	0x08008fb5
 8008f68:	08008fb5 	.word	0x08008fb5
 8008f6c:	08008fb5 	.word	0x08008fb5
 8008f70:	08008fb5 	.word	0x08008fb5
 8008f74:	08008fb5 	.word	0x08008fb5
 8008f78:	08008fb5 	.word	0x08008fb5
 8008f7c:	08008fb5 	.word	0x08008fb5
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8a:	e222      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f92:	e21e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9a:	e21a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa2:	e216      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008faa:	e212      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008fac:	2340      	movs	r3, #64	; 0x40
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e20e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e20a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a6b      	ldr	r2, [pc, #428]	; (8009170 <UART_SetConfig+0x34c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d130      	bne.n	8009028 <UART_SetConfig+0x204>
 8008fc6:	4b69      	ldr	r3, [pc, #420]	; (800916c <UART_SetConfig+0x348>)
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d826      	bhi.n	8009020 <UART_SetConfig+0x1fc>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <UART_SetConfig+0x1b4>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff9 	.word	0x08008ff9
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009019 	.word	0x08009019
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e1ec      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffe:	e1e8      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009000:	2308      	movs	r3, #8
 8009002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009006:	e1e4      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009008:	2310      	movs	r3, #16
 800900a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800900e:	e1e0      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009010:	2320      	movs	r3, #32
 8009012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009016:	e1dc      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901e:	e1d8      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009020:	2380      	movs	r3, #128	; 0x80
 8009022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009026:	e1d4      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a51      	ldr	r2, [pc, #324]	; (8009174 <UART_SetConfig+0x350>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d130      	bne.n	8009094 <UART_SetConfig+0x270>
 8009032:	4b4e      	ldr	r3, [pc, #312]	; (800916c <UART_SetConfig+0x348>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b05      	cmp	r3, #5
 800903c:	d826      	bhi.n	800908c <UART_SetConfig+0x268>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <UART_SetConfig+0x220>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	0800905d 	.word	0x0800905d
 8009048:	08009065 	.word	0x08009065
 800904c:	0800906d 	.word	0x0800906d
 8009050:	08009075 	.word	0x08009075
 8009054:	0800907d 	.word	0x0800907d
 8009058:	08009085 	.word	0x08009085
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009062:	e1b6      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800906a:	e1b2      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009072:	e1ae      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800907a:	e1aa      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009082:	e1a6      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009084:	2340      	movs	r3, #64	; 0x40
 8009086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908a:	e1a2      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009092:	e19e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a37      	ldr	r2, [pc, #220]	; (8009178 <UART_SetConfig+0x354>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d130      	bne.n	8009100 <UART_SetConfig+0x2dc>
 800909e:	4b33      	ldr	r3, [pc, #204]	; (800916c <UART_SetConfig+0x348>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d826      	bhi.n	80090f8 <UART_SetConfig+0x2d4>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x28c>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	080090e9 	.word	0x080090e9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ce:	e180      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d6:	e17c      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090de:	e178      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e6:	e174      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ee:	e170      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f6:	e16c      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fe:	e168      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1d      	ldr	r2, [pc, #116]	; (800917c <UART_SetConfig+0x358>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d142      	bne.n	8009190 <UART_SetConfig+0x36c>
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <UART_SetConfig+0x348>)
 800910c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	2b05      	cmp	r3, #5
 8009114:	d838      	bhi.n	8009188 <UART_SetConfig+0x364>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x2f8>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009135 	.word	0x08009135
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009145 	.word	0x08009145
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	08009181 	.word	0x08009181
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913a:	e14a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009142:	e146      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914a:	e142      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009152:	e13e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915a:	e13a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800915c:	cfff69f3 	.word	0xcfff69f3
 8009160:	58000c00 	.word	0x58000c00
 8009164:	11fff4ff 	.word	0x11fff4ff
 8009168:	40011000 	.word	0x40011000
 800916c:	58024400 	.word	0x58024400
 8009170:	40004400 	.word	0x40004400
 8009174:	40004800 	.word	0x40004800
 8009178:	40004c00 	.word	0x40004c00
 800917c:	40005000 	.word	0x40005000
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009186:	e124      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009188:	2380      	movs	r3, #128	; 0x80
 800918a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918e:	e120      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4acc      	ldr	r2, [pc, #816]	; (80094c8 <UART_SetConfig+0x6a4>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d176      	bne.n	8009288 <UART_SetConfig+0x464>
 800919a:	4bcc      	ldr	r3, [pc, #816]	; (80094cc <UART_SetConfig+0x6a8>)
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a2:	2b28      	cmp	r3, #40	; 0x28
 80091a4:	d86c      	bhi.n	8009280 <UART_SetConfig+0x45c>
 80091a6:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <UART_SetConfig+0x388>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	08009251 	.word	0x08009251
 80091b0:	08009281 	.word	0x08009281
 80091b4:	08009281 	.word	0x08009281
 80091b8:	08009281 	.word	0x08009281
 80091bc:	08009281 	.word	0x08009281
 80091c0:	08009281 	.word	0x08009281
 80091c4:	08009281 	.word	0x08009281
 80091c8:	08009281 	.word	0x08009281
 80091cc:	08009259 	.word	0x08009259
 80091d0:	08009281 	.word	0x08009281
 80091d4:	08009281 	.word	0x08009281
 80091d8:	08009281 	.word	0x08009281
 80091dc:	08009281 	.word	0x08009281
 80091e0:	08009281 	.word	0x08009281
 80091e4:	08009281 	.word	0x08009281
 80091e8:	08009281 	.word	0x08009281
 80091ec:	08009261 	.word	0x08009261
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009281 	.word	0x08009281
 80091f8:	08009281 	.word	0x08009281
 80091fc:	08009281 	.word	0x08009281
 8009200:	08009281 	.word	0x08009281
 8009204:	08009281 	.word	0x08009281
 8009208:	08009281 	.word	0x08009281
 800920c:	08009269 	.word	0x08009269
 8009210:	08009281 	.word	0x08009281
 8009214:	08009281 	.word	0x08009281
 8009218:	08009281 	.word	0x08009281
 800921c:	08009281 	.word	0x08009281
 8009220:	08009281 	.word	0x08009281
 8009224:	08009281 	.word	0x08009281
 8009228:	08009281 	.word	0x08009281
 800922c:	08009271 	.word	0x08009271
 8009230:	08009281 	.word	0x08009281
 8009234:	08009281 	.word	0x08009281
 8009238:	08009281 	.word	0x08009281
 800923c:	08009281 	.word	0x08009281
 8009240:	08009281 	.word	0x08009281
 8009244:	08009281 	.word	0x08009281
 8009248:	08009281 	.word	0x08009281
 800924c:	08009279 	.word	0x08009279
 8009250:	2301      	movs	r3, #1
 8009252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009256:	e0bc      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009258:	2304      	movs	r3, #4
 800925a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800925e:	e0b8      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009266:	e0b4      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009268:	2310      	movs	r3, #16
 800926a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800926e:	e0b0      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009270:	2320      	movs	r3, #32
 8009272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009276:	e0ac      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927e:	e0a8      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009280:	2380      	movs	r3, #128	; 0x80
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e0a4      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a90      	ldr	r2, [pc, #576]	; (80094d0 <UART_SetConfig+0x6ac>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d130      	bne.n	80092f4 <UART_SetConfig+0x4d0>
 8009292:	4b8e      	ldr	r3, [pc, #568]	; (80094cc <UART_SetConfig+0x6a8>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b05      	cmp	r3, #5
 800929c:	d826      	bhi.n	80092ec <UART_SetConfig+0x4c8>
 800929e:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <UART_SetConfig+0x480>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092bd 	.word	0x080092bd
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092cd 	.word	0x080092cd
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092dd 	.word	0x080092dd
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c2:	e086      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092c4:	2304      	movs	r3, #4
 80092c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ca:	e082      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092cc:	2308      	movs	r3, #8
 80092ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d2:	e07e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092d4:	2310      	movs	r3, #16
 80092d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092da:	e07a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092dc:	2320      	movs	r3, #32
 80092de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e2:	e076      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092e4:	2340      	movs	r3, #64	; 0x40
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e072      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092ec:	2380      	movs	r3, #128	; 0x80
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e06e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a76      	ldr	r2, [pc, #472]	; (80094d4 <UART_SetConfig+0x6b0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d130      	bne.n	8009360 <UART_SetConfig+0x53c>
 80092fe:	4b73      	ldr	r3, [pc, #460]	; (80094cc <UART_SetConfig+0x6a8>)
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b05      	cmp	r3, #5
 8009308:	d826      	bhi.n	8009358 <UART_SetConfig+0x534>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <UART_SetConfig+0x4ec>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009329 	.word	0x08009329
 8009314:	08009331 	.word	0x08009331
 8009318:	08009339 	.word	0x08009339
 800931c:	08009341 	.word	0x08009341
 8009320:	08009349 	.word	0x08009349
 8009324:	08009351 	.word	0x08009351
 8009328:	2300      	movs	r3, #0
 800932a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932e:	e050      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009330:	2304      	movs	r3, #4
 8009332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009336:	e04c      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009338:	2308      	movs	r3, #8
 800933a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800933e:	e048      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009340:	2310      	movs	r3, #16
 8009342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009346:	e044      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009348:	2320      	movs	r3, #32
 800934a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800934e:	e040      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e03c      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009358:	2380      	movs	r3, #128	; 0x80
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e038      	b.n	80093d2 <UART_SetConfig+0x5ae>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a5c      	ldr	r2, [pc, #368]	; (80094d8 <UART_SetConfig+0x6b4>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d130      	bne.n	80093cc <UART_SetConfig+0x5a8>
 800936a:	4b58      	ldr	r3, [pc, #352]	; (80094cc <UART_SetConfig+0x6a8>)
 800936c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b05      	cmp	r3, #5
 8009374:	d826      	bhi.n	80093c4 <UART_SetConfig+0x5a0>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <UART_SetConfig+0x558>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	08009395 	.word	0x08009395
 8009380:	0800939d 	.word	0x0800939d
 8009384:	080093a5 	.word	0x080093a5
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	2302      	movs	r3, #2
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e01a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 800939c:	2304      	movs	r3, #4
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	e016      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093a4:	2308      	movs	r3, #8
 80093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093aa:	e012      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093ac:	2310      	movs	r3, #16
 80093ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b2:	e00e      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093b4:	2320      	movs	r3, #32
 80093b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ba:	e00a      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e006      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093c4:	2380      	movs	r3, #128	; 0x80
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e002      	b.n	80093d2 <UART_SetConfig+0x5ae>
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a40      	ldr	r2, [pc, #256]	; (80094d8 <UART_SetConfig+0x6b4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	f040 80ef 	bne.w	80095bc <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	dc46      	bgt.n	8009474 <UART_SetConfig+0x650>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	f2c0 8081 	blt.w	80094ee <UART_SetConfig+0x6ca>
 80093ec:	3b02      	subs	r3, #2
 80093ee:	2b1e      	cmp	r3, #30
 80093f0:	d87d      	bhi.n	80094ee <UART_SetConfig+0x6ca>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <UART_SetConfig+0x5d4>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	0800947b 	.word	0x0800947b
 80093fc:	080094ef 	.word	0x080094ef
 8009400:	08009483 	.word	0x08009483
 8009404:	080094ef 	.word	0x080094ef
 8009408:	080094ef 	.word	0x080094ef
 800940c:	080094ef 	.word	0x080094ef
 8009410:	08009493 	.word	0x08009493
 8009414:	080094ef 	.word	0x080094ef
 8009418:	080094ef 	.word	0x080094ef
 800941c:	080094ef 	.word	0x080094ef
 8009420:	080094ef 	.word	0x080094ef
 8009424:	080094ef 	.word	0x080094ef
 8009428:	080094ef 	.word	0x080094ef
 800942c:	080094ef 	.word	0x080094ef
 8009430:	080094a3 	.word	0x080094a3
 8009434:	080094ef 	.word	0x080094ef
 8009438:	080094ef 	.word	0x080094ef
 800943c:	080094ef 	.word	0x080094ef
 8009440:	080094ef 	.word	0x080094ef
 8009444:	080094ef 	.word	0x080094ef
 8009448:	080094ef 	.word	0x080094ef
 800944c:	080094ef 	.word	0x080094ef
 8009450:	080094ef 	.word	0x080094ef
 8009454:	080094ef 	.word	0x080094ef
 8009458:	080094ef 	.word	0x080094ef
 800945c:	080094ef 	.word	0x080094ef
 8009460:	080094ef 	.word	0x080094ef
 8009464:	080094ef 	.word	0x080094ef
 8009468:	080094ef 	.word	0x080094ef
 800946c:	080094ef 	.word	0x080094ef
 8009470:	080094e1 	.word	0x080094e1
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d036      	beq.n	80094e6 <UART_SetConfig+0x6c2>
 8009478:	e039      	b.n	80094ee <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800947a:	f7ff f825 	bl	80084c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800947e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009480:	e03b      	b.n	80094fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009482:	f107 0314 	add.w	r3, r7, #20
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff f834 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009490:	e033      	b.n	80094fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009492:	f107 0308 	add.w	r3, r7, #8
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff f980 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094a0:	e02b      	b.n	80094fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a2:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <UART_SetConfig+0x6a8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d009      	beq.n	80094c2 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <UART_SetConfig+0x6a8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	08db      	lsrs	r3, r3, #3
 80094b4:	f003 0303 	and.w	r3, r3, #3
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <UART_SetConfig+0x6b8>)
 80094ba:	fa22 f303 	lsr.w	r3, r2, r3
 80094be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094c0:	e01b      	b.n	80094fa <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <UART_SetConfig+0x6b8>)
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094c6:	e018      	b.n	80094fa <UART_SetConfig+0x6d6>
 80094c8:	40011400 	.word	0x40011400
 80094cc:	58024400 	.word	0x58024400
 80094d0:	40007800 	.word	0x40007800
 80094d4:	40007c00 	.word	0x40007c00
 80094d8:	58000c00 	.word	0x58000c00
 80094dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094e0:	4bc4      	ldr	r3, [pc, #784]	; (80097f4 <UART_SetConfig+0x9d0>)
 80094e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094e4:	e009      	b.n	80094fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094ec:	e005      	b.n	80094fa <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80094f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 81da 	beq.w	80098b6 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	4abc      	ldr	r2, [pc, #752]	; (80097f8 <UART_SetConfig+0x9d4>)
 8009508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800950c:	461a      	mov	r2, r3
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	fbb3 f3f2 	udiv	r3, r3, r2
 8009514:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	4413      	add	r3, r2
 8009520:	6a3a      	ldr	r2, [r7, #32]
 8009522:	429a      	cmp	r2, r3
 8009524:	d305      	bcc.n	8009532 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800952c:	6a3a      	ldr	r2, [r7, #32]
 800952e:	429a      	cmp	r2, r3
 8009530:	d903      	bls.n	800953a <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009538:	e1bd      	b.n	80098b6 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	4618      	mov	r0, r3
 800953e:	f04f 0100 	mov.w	r1, #0
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	4aac      	ldr	r2, [pc, #688]	; (80097f8 <UART_SetConfig+0x9d4>)
 8009548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954c:	b29a      	uxth	r2, r3
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	f7f6 fec1 	bl	80002d8 <__aeabi_uldivmod>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4610      	mov	r0, r2
 800955c:	4619      	mov	r1, r3
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	020b      	lsls	r3, r1, #8
 8009568:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800956c:	0202      	lsls	r2, r0, #8
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	6849      	ldr	r1, [r1, #4]
 8009572:	0849      	lsrs	r1, r1, #1
 8009574:	4608      	mov	r0, r1
 8009576:	f04f 0100 	mov.w	r1, #0
 800957a:	1814      	adds	r4, r2, r0
 800957c:	eb43 0501 	adc.w	r5, r3, r1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	461a      	mov	r2, r3
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	4620      	mov	r0, r4
 800958c:	4629      	mov	r1, r5
 800958e:	f7f6 fea3 	bl	80002d8 <__aeabi_uldivmod>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4613      	mov	r3, r2
 8009598:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a0:	d308      	bcc.n	80095b4 <UART_SetConfig+0x790>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095a8:	d204      	bcs.n	80095b4 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b0:	60da      	str	r2, [r3, #12]
 80095b2:	e180      	b.n	80098b6 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095ba:	e17c      	b.n	80098b6 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c4:	f040 80bf 	bne.w	8009746 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80095c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	dc49      	bgt.n	8009664 <UART_SetConfig+0x840>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	db7c      	blt.n	80096ce <UART_SetConfig+0x8aa>
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d87a      	bhi.n	80096ce <UART_SetConfig+0x8aa>
 80095d8:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x7bc>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	0800966b 	.word	0x0800966b
 80095e4:	08009673 	.word	0x08009673
 80095e8:	080096cf 	.word	0x080096cf
 80095ec:	080096cf 	.word	0x080096cf
 80095f0:	0800967b 	.word	0x0800967b
 80095f4:	080096cf 	.word	0x080096cf
 80095f8:	080096cf 	.word	0x080096cf
 80095fc:	080096cf 	.word	0x080096cf
 8009600:	0800968b 	.word	0x0800968b
 8009604:	080096cf 	.word	0x080096cf
 8009608:	080096cf 	.word	0x080096cf
 800960c:	080096cf 	.word	0x080096cf
 8009610:	080096cf 	.word	0x080096cf
 8009614:	080096cf 	.word	0x080096cf
 8009618:	080096cf 	.word	0x080096cf
 800961c:	080096cf 	.word	0x080096cf
 8009620:	0800969b 	.word	0x0800969b
 8009624:	080096cf 	.word	0x080096cf
 8009628:	080096cf 	.word	0x080096cf
 800962c:	080096cf 	.word	0x080096cf
 8009630:	080096cf 	.word	0x080096cf
 8009634:	080096cf 	.word	0x080096cf
 8009638:	080096cf 	.word	0x080096cf
 800963c:	080096cf 	.word	0x080096cf
 8009640:	080096cf 	.word	0x080096cf
 8009644:	080096cf 	.word	0x080096cf
 8009648:	080096cf 	.word	0x080096cf
 800964c:	080096cf 	.word	0x080096cf
 8009650:	080096cf 	.word	0x080096cf
 8009654:	080096cf 	.word	0x080096cf
 8009658:	080096cf 	.word	0x080096cf
 800965c:	080096cf 	.word	0x080096cf
 8009660:	080096c1 	.word	0x080096c1
 8009664:	2b40      	cmp	r3, #64	; 0x40
 8009666:	d02e      	beq.n	80096c6 <UART_SetConfig+0x8a2>
 8009668:	e031      	b.n	80096ce <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800966a:	f7fd ffd1 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 800966e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009670:	e033      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009672:	f7fd ffe3 	bl	800763c <HAL_RCC_GetPCLK2Freq>
 8009676:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009678:	e02f      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800967a:	f107 0314 	add.w	r3, r7, #20
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe ff38 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009688:	e027      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff f884 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009698:	e01f      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800969a:	4b58      	ldr	r3, [pc, #352]	; (80097fc <UART_SetConfig+0x9d8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096a6:	4b55      	ldr	r3, [pc, #340]	; (80097fc <UART_SetConfig+0x9d8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	08db      	lsrs	r3, r3, #3
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	4a53      	ldr	r2, [pc, #332]	; (8009800 <UART_SetConfig+0x9dc>)
 80096b2:	fa22 f303 	lsr.w	r3, r2, r3
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096b8:	e00f      	b.n	80096da <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80096ba:	4b51      	ldr	r3, [pc, #324]	; (8009800 <UART_SetConfig+0x9dc>)
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096be:	e00c      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096c0:	4b4c      	ldr	r3, [pc, #304]	; (80097f4 <UART_SetConfig+0x9d0>)
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096c4:	e009      	b.n	80096da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096cc:	e005      	b.n	80096da <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80096d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80ea 	beq.w	80098b6 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	4a44      	ldr	r2, [pc, #272]	; (80097f8 <UART_SetConfig+0x9d4>)
 80096e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f4:	005a      	lsls	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	441a      	add	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	b29b      	uxth	r3, r3
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2b0f      	cmp	r3, #15
 800970e:	d916      	bls.n	800973e <UART_SetConfig+0x91a>
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d212      	bcs.n	800973e <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	b29b      	uxth	r3, r3
 800971c:	f023 030f 	bic.w	r3, r3, #15
 8009720:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	085b      	lsrs	r3, r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	b29a      	uxth	r2, r3
 800972e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009730:	4313      	orrs	r3, r2
 8009732:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800973a:	60da      	str	r2, [r3, #12]
 800973c:	e0bb      	b.n	80098b6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009744:	e0b7      	b.n	80098b6 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800974a:	2b20      	cmp	r3, #32
 800974c:	dc4a      	bgt.n	80097e4 <UART_SetConfig+0x9c0>
 800974e:	2b00      	cmp	r3, #0
 8009750:	f2c0 8086 	blt.w	8009860 <UART_SetConfig+0xa3c>
 8009754:	2b20      	cmp	r3, #32
 8009756:	f200 8083 	bhi.w	8009860 <UART_SetConfig+0xa3c>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <UART_SetConfig+0x93c>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	080097eb 	.word	0x080097eb
 8009764:	08009805 	.word	0x08009805
 8009768:	08009861 	.word	0x08009861
 800976c:	08009861 	.word	0x08009861
 8009770:	0800980d 	.word	0x0800980d
 8009774:	08009861 	.word	0x08009861
 8009778:	08009861 	.word	0x08009861
 800977c:	08009861 	.word	0x08009861
 8009780:	0800981d 	.word	0x0800981d
 8009784:	08009861 	.word	0x08009861
 8009788:	08009861 	.word	0x08009861
 800978c:	08009861 	.word	0x08009861
 8009790:	08009861 	.word	0x08009861
 8009794:	08009861 	.word	0x08009861
 8009798:	08009861 	.word	0x08009861
 800979c:	08009861 	.word	0x08009861
 80097a0:	0800982d 	.word	0x0800982d
 80097a4:	08009861 	.word	0x08009861
 80097a8:	08009861 	.word	0x08009861
 80097ac:	08009861 	.word	0x08009861
 80097b0:	08009861 	.word	0x08009861
 80097b4:	08009861 	.word	0x08009861
 80097b8:	08009861 	.word	0x08009861
 80097bc:	08009861 	.word	0x08009861
 80097c0:	08009861 	.word	0x08009861
 80097c4:	08009861 	.word	0x08009861
 80097c8:	08009861 	.word	0x08009861
 80097cc:	08009861 	.word	0x08009861
 80097d0:	08009861 	.word	0x08009861
 80097d4:	08009861 	.word	0x08009861
 80097d8:	08009861 	.word	0x08009861
 80097dc:	08009861 	.word	0x08009861
 80097e0:	08009853 	.word	0x08009853
 80097e4:	2b40      	cmp	r3, #64	; 0x40
 80097e6:	d037      	beq.n	8009858 <UART_SetConfig+0xa34>
 80097e8:	e03a      	b.n	8009860 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ea:	f7fd ff11 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 80097ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097f0:	e03c      	b.n	800986c <UART_SetConfig+0xa48>
 80097f2:	bf00      	nop
 80097f4:	003d0900 	.word	0x003d0900
 80097f8:	08010f80 	.word	0x08010f80
 80097fc:	58024400 	.word	0x58024400
 8009800:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009804:	f7fd ff1a 	bl	800763c <HAL_RCC_GetPCLK2Freq>
 8009808:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800980a:	e02f      	b.n	800986c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800980c:	f107 0314 	add.w	r3, r7, #20
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fe6f 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800981a:	e027      	b.n	800986c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800981c:	f107 0308 	add.w	r3, r7, #8
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe ffbb 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800982a:	e01f      	b.n	800986c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800982c:	4b2c      	ldr	r3, [pc, #176]	; (80098e0 <UART_SetConfig+0xabc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b00      	cmp	r3, #0
 8009836:	d009      	beq.n	800984c <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <UART_SetConfig+0xabc>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	08db      	lsrs	r3, r3, #3
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	4a28      	ldr	r2, [pc, #160]	; (80098e4 <UART_SetConfig+0xac0>)
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800984a:	e00f      	b.n	800986c <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <UART_SetConfig+0xac0>)
 800984e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009850:	e00c      	b.n	800986c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009852:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <UART_SetConfig+0xac4>)
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009856:	e009      	b.n	800986c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800985e:	e005      	b.n	800986c <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800986a:	bf00      	nop
    }

    if (pclk != 0U)
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d021      	beq.n	80098b6 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	4a1d      	ldr	r2, [pc, #116]	; (80098ec <UART_SetConfig+0xac8>)
 8009878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987c:	461a      	mov	r2, r3
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	fbb3 f2f2 	udiv	r2, r3, r2
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	441a      	add	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	fbb2 f3f3 	udiv	r3, r2, r3
 8009894:	b29b      	uxth	r3, r3
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	2b0f      	cmp	r3, #15
 800989c:	d908      	bls.n	80098b0 <UART_SetConfig+0xa8c>
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a4:	d204      	bcs.n	80098b0 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e002      	b.n	80098b6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80098d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3738      	adds	r7, #56	; 0x38
 80098da:	46bd      	mov	sp, r7
 80098dc:	bdb0      	pop	{r4, r5, r7, pc}
 80098de:	bf00      	nop
 80098e0:	58024400 	.word	0x58024400
 80098e4:	03d09000 	.word	0x03d09000
 80098e8:	003d0900 	.word	0x003d0900
 80098ec:	08010f80 	.word	0x08010f80

080098f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01a      	beq.n	8009a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099ee:	d10a      	bne.n	8009a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
  }
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009a44:	f7f9 ff5e 	bl	8003904 <HAL_GetTick>
 8009a48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0308 	and.w	r3, r3, #8
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d10e      	bne.n	8009a76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f82c 	bl	8009ac4 <UART_WaitOnFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e022      	b.n	8009abc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d10e      	bne.n	8009aa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f816 	bl	8009ac4 <UART_WaitOnFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e00c      	b.n	8009abc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad4:	e062      	b.n	8009b9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d05e      	beq.n	8009b9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ade:	f7f9 ff11 	bl	8003904 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d302      	bcc.n	8009af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d11d      	bne.n	8009b30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0201 	bic.w	r2, r2, #1
 8009b12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e045      	b.n	8009bbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d02e      	beq.n	8009b9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b4c:	d126      	bne.n	8009b9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e00f      	b.n	8009bbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69da      	ldr	r2, [r3, #28]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	bf0c      	ite	eq
 8009bac:	2301      	moveq	r3, #1
 8009bae:	2300      	movne	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d08d      	beq.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_UARTEx_DisableFifoMode+0x16>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e027      	b.n	8009c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2224      	movs	r2, #36	; 0x24
 8009be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0201 	bic.w	r2, r2, #1
 8009c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e02d      	b.n	8009caa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2224      	movs	r2, #36	; 0x24
 8009c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0201 	bic.w	r2, r2, #1
 8009c74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f850 	bl	8009d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e02d      	b.n	8009d26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2224      	movs	r2, #36	; 0x24
 8009cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0201 	bic.w	r2, r2, #1
 8009cf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f812 	bl	8009d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d38:	4a2f      	ldr	r2, [pc, #188]	; (8009df8 <UARTEx_SetNbDataToProcess+0xc8>)
 8009d3a:	f107 0314 	add.w	r3, r7, #20
 8009d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d46:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <UARTEx_SetNbDataToProcess+0xcc>)
 8009d48:	f107 030c 	add.w	r3, r7, #12
 8009d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d108      	bne.n	8009d6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d6c:	e03d      	b.n	8009dea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d6e:	2310      	movs	r3, #16
 8009d70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d72:	2310      	movs	r3, #16
 8009d74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	0e5b      	lsrs	r3, r3, #25
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	0f5b      	lsrs	r3, r3, #29
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d96:	7fbb      	ldrb	r3, [r7, #30]
 8009d98:	7f3a      	ldrb	r2, [r7, #28]
 8009d9a:	f107 0120 	add.w	r1, r7, #32
 8009d9e:	440a      	add	r2, r1
 8009da0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009da4:	fb02 f303 	mul.w	r3, r2, r3
 8009da8:	7f3a      	ldrb	r2, [r7, #28]
 8009daa:	f107 0120 	add.w	r1, r7, #32
 8009dae:	440a      	add	r2, r1
 8009db0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009dc0:	7ffb      	ldrb	r3, [r7, #31]
 8009dc2:	7f7a      	ldrb	r2, [r7, #29]
 8009dc4:	f107 0120 	add.w	r1, r7, #32
 8009dc8:	440a      	add	r2, r1
 8009dca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009dce:	fb02 f303 	mul.w	r3, r2, r3
 8009dd2:	7f7a      	ldrb	r2, [r7, #29]
 8009dd4:	f107 0120 	add.w	r1, r7, #32
 8009dd8:	440a      	add	r2, r1
 8009dda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009dde:	fb93 f3f2 	sdiv	r3, r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009dea:	bf00      	nop
 8009dec:	3724      	adds	r7, #36	; 0x24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	08010f18 	.word	0x08010f18
 8009dfc:	08010f20 	.word	0x08010f20

08009e00 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b10      	ldr	r3, [pc, #64]	; (8009e50 <FMC_NAND_Init+0x50>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	6851      	ldr	r1, [r2, #4]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	6892      	ldr	r2, [r2, #8]
 8009e1a:	4311      	orrs	r1, r2
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	68d2      	ldr	r2, [r2, #12]
 8009e20:	4311      	orrs	r1, r2
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	6912      	ldr	r2, [r2, #16]
 8009e26:	4311      	orrs	r1, r2
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	6952      	ldr	r2, [r2, #20]
 8009e2c:	0252      	lsls	r2, r2, #9
 8009e2e:	4311      	orrs	r1, r2
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	6992      	ldr	r2, [r2, #24]
 8009e34:	0352      	lsls	r2, r2, #13
 8009e36:	430a      	orrs	r2, r1
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	f043 0208 	orr.w	r2, r3, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	fff00189 	.word	0xfff00189

08009e54 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PMEM, PMEM_CLEAR_MASK, (Timing->SetupTime                                 |
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	041b      	lsls	r3, r3, #16
 8009e76:	431a      	orrs	r2, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	061b      	lsls	r3, r3, #24
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
                                             ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PMEM_MEMHIZ_Pos)));

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PATT, PATT_CLEAR_MASK, (Timing->SetupTime                                 |
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	431a      	orrs	r2, r3
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	041b      	lsls	r3, r3, #16
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	061b      	lsls	r3, r3, #24
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	60da      	str	r2, [r3, #12]
                                             ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos)));

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d121      	bne.n	8009f26 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <FMC_SDRAM_Init+0xb4>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	6851      	ldr	r1, [r2, #4]
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	6892      	ldr	r2, [r2, #8]
 8009ef2:	4311      	orrs	r1, r2
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	68d2      	ldr	r2, [r2, #12]
 8009ef8:	4311      	orrs	r1, r2
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	6912      	ldr	r2, [r2, #16]
 8009efe:	4311      	orrs	r1, r2
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	6952      	ldr	r2, [r2, #20]
 8009f04:	4311      	orrs	r1, r2
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	6992      	ldr	r2, [r2, #24]
 8009f0a:	4311      	orrs	r1, r2
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	69d2      	ldr	r2, [r2, #28]
 8009f10:	4311      	orrs	r1, r2
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	6a12      	ldr	r2, [r2, #32]
 8009f16:	4311      	orrs	r1, r2
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	e026      	b.n	8009f74 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	69d9      	ldr	r1, [r3, #28]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	4319      	orrs	r1, r3
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	4b0e      	ldr	r3, [pc, #56]	; (8009f84 <FMC_SDRAM_Init+0xb4>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	6851      	ldr	r1, [r2, #4]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	6892      	ldr	r2, [r2, #8]
 8009f54:	4311      	orrs	r1, r2
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	68d2      	ldr	r2, [r2, #12]
 8009f5a:	4311      	orrs	r1, r2
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	6912      	ldr	r2, [r2, #16]
 8009f60:	4311      	orrs	r1, r2
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	6952      	ldr	r2, [r2, #20]
 8009f66:	4311      	orrs	r1, r2
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	6992      	ldr	r2, [r2, #24]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	ffff8000 	.word	0xffff8000

08009f88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d128      	bne.n	8009fec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1e59      	subs	r1, r3, #1
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	4319      	orrs	r1, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	021b      	lsls	r3, r3, #8
 8009fba:	4319      	orrs	r1, r3
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	031b      	lsls	r3, r3, #12
 8009fc4:	4319      	orrs	r1, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	4319      	orrs	r1, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	051b      	lsls	r3, r3, #20
 8009fd8:	4319      	orrs	r1, r3
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	061b      	lsls	r3, r3, #24
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	431a      	orrs	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	e02d      	b.n	800a048 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <FMC_SDRAM_Timing_Init+0xd0>)
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	68d2      	ldr	r2, [r2, #12]
 8009ff8:	3a01      	subs	r2, #1
 8009ffa:	0311      	lsls	r1, r2, #12
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	6952      	ldr	r2, [r2, #20]
 800a000:	3a01      	subs	r2, #1
 800a002:	0512      	lsls	r2, r2, #20
 800a004:	430a      	orrs	r2, r1
 800a006:	431a      	orrs	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	1e59      	subs	r1, r3, #1
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	3b01      	subs	r3, #1
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	4319      	orrs	r1, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	3b01      	subs	r3, #1
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	4319      	orrs	r1, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	3b01      	subs	r3, #1
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	4319      	orrs	r1, r3
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	061b      	lsls	r3, r3, #24
 800a040:	430b      	orrs	r3, r1
 800a042:	431a      	orrs	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	ff0f0fff 	.word	0xff0f0fff

0800a05c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a05c:	b084      	sub	sp, #16
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	f107 001c 	add.w	r0, r7, #28
 800a06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	2b01      	cmp	r3, #1
 800a072:	d120      	bne.n	800a0b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	4b25      	ldr	r3, [pc, #148]	; (800a11c <USB_CoreInit+0xc0>)
 800a086:	4013      	ands	r3, r2
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d105      	bne.n	800a0aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f94c 	bl	800a348 <USB_CoreReset>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]
 800a0b4:	e01a      	b.n	800a0ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f940 	bl	800a348 <USB_CoreReset>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d106      	bne.n	800a0e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a0de:	e005      	b.n	800a0ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d10b      	bne.n	800a10a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f043 0206 	orr.w	r2, r3, #6
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f043 0220 	orr.w	r2, r3, #32
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a116:	b004      	add	sp, #16
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	ffbdffbf 	.word	0xffbdffbf

0800a120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f043 0201 	orr.w	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f023 0201 	bic.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d106      	bne.n	800a190 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60da      	str	r2, [r3, #12]
 800a18e:	e00b      	b.n	800a1a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a190:	78fb      	ldrb	r3, [r7, #3]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	e001      	b.n	800a1a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e003      	b.n	800a1b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a1a8:	2032      	movs	r0, #50	; 0x32
 800a1aa:	f7f9 fbb7 	bl	800391c <HAL_Delay>

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	019b      	lsls	r3, r3, #6
 800a1ca:	f043 0220 	orr.w	r2, r3, #32
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4a09      	ldr	r2, [pc, #36]	; (800a200 <USB_FlushTxFifo+0x48>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d901      	bls.n	800a1e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e006      	b.n	800a1f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	d0f0      	beq.n	800a1d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	00030d40 	.word	0x00030d40

0800a204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2210      	movs	r2, #16
 800a214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3301      	adds	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4a09      	ldr	r2, [pc, #36]	; (800a244 <USB_FlushRxFifo+0x40>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d901      	bls.n	800a228 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e006      	b.n	800a236 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b10      	cmp	r3, #16
 800a232:	d0f0      	beq.n	800a216 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	00030d40 	.word	0x00030d40

0800a248 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a248:	b480      	push	{r7}
 800a24a:	b089      	sub	sp, #36	; 0x24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4611      	mov	r1, r2
 800a254:	461a      	mov	r2, r3
 800a256:	460b      	mov	r3, r1
 800a258:	71fb      	strb	r3, [r7, #7]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a266:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d11a      	bne.n	800a2a4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a26e:	88bb      	ldrh	r3, [r7, #4]
 800a270:	3303      	adds	r3, #3
 800a272:	089b      	lsrs	r3, r3, #2
 800a274:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a276:	2300      	movs	r3, #0
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e00f      	b.n	800a29c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	031a      	lsls	r2, r3, #12
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	4413      	add	r3, r2
 800a284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a288:	461a      	mov	r2, r3
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	3304      	adds	r3, #4
 800a294:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	3301      	adds	r3, #1
 800a29a:	61bb      	str	r3, [r7, #24]
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d3eb      	bcc.n	800a27c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3724      	adds	r7, #36	; 0x24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b089      	sub	sp, #36	; 0x24
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	60b9      	str	r1, [r7, #8]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a2c8:	88fb      	ldrh	r3, [r7, #6]
 800a2ca:	3303      	adds	r3, #3
 800a2cc:	089b      	lsrs	r3, r3, #2
 800a2ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61bb      	str	r3, [r7, #24]
 800a2d4:	e00b      	b.n	800a2ee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	601a      	str	r2, [r3, #0]
    pDest++;
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d3ef      	bcc.n	800a2d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a2f6:	69fb      	ldr	r3, [r7, #28]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3724      	adds	r7, #36	; 0x24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	4013      	ands	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a31c:	68fb      	ldr	r3, [r7, #12]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	f003 0301 	and.w	r3, r3, #1
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4a13      	ldr	r2, [pc, #76]	; (800a3ac <USB_CoreReset+0x64>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e01b      	b.n	800a39e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	daf2      	bge.n	800a354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f043 0201 	orr.w	r2, r3, #1
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <USB_CoreReset+0x64>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d901      	bls.n	800a390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e006      	b.n	800a39e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d0f0      	beq.n	800a37e <USB_CoreReset+0x36>

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	00030d40 	.word	0x00030d40

0800a3b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	f107 001c 	add.w	r0, r7, #28
 800a3be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d018      	beq.n	800a428 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d10a      	bne.n	800a412 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a40a:	f043 0304 	orr.w	r3, r3, #4
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	e014      	b.n	800a43c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a420:	f023 0304 	bic.w	r3, r3, #4
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	e009      	b.n	800a43c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a436:	f023 0304 	bic.w	r3, r3, #4
 800a43a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a43c:	2110      	movs	r1, #16
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff feba 	bl	800a1b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff fedd 	bl	800a204 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e015      	b.n	800a47c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4413      	add	r3, r2
 800a458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45c:	461a      	mov	r2, r3
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295
 800a462:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a470:	461a      	mov	r2, r3
 800a472:	2300      	movs	r3, #0
 800a474:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	429a      	cmp	r2, r3
 800a482:	d3e5      	bcc.n	800a450 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a484:	2101      	movs	r1, #1
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f8ac 	bl	800a5e4 <USB_DriveVbus>

  HAL_Delay(200U);
 800a48c:	20c8      	movs	r0, #200	; 0xc8
 800a48e:	f7f9 fa45 	bl	800391c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f04f 32ff 	mov.w	r2, #4294967295
 800a49e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a14      	ldr	r2, [pc, #80]	; (800a508 <USB_HostInit+0x158>)
 800a4b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a13      	ldr	r2, [pc, #76]	; (800a50c <USB_HostInit+0x15c>)
 800a4be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a4c2:	e009      	b.n	800a4d8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2280      	movs	r2, #128	; 0x80
 800a4c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a10      	ldr	r2, [pc, #64]	; (800a510 <USB_HostInit+0x160>)
 800a4ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a10      	ldr	r2, [pc, #64]	; (800a514 <USB_HostInit+0x164>)
 800a4d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d105      	bne.n	800a4ea <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f043 0210 	orr.w	r2, r3, #16
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <USB_HostInit+0x168>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a502:	b004      	add	sp, #16
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	01000200 	.word	0x01000200
 800a50c:	00e00300 	.word	0x00e00300
 800a510:	00600080 	.word	0x00600080
 800a514:	004000e0 	.word	0x004000e0
 800a518:	a3200008 	.word	0xa3200008

0800a51c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a53a:	f023 0303 	bic.w	r3, r3, #3
 800a53e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	68f9      	ldr	r1, [r7, #12]
 800a550:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a554:	4313      	orrs	r3, r2
 800a556:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d107      	bne.n	800a56e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a564:	461a      	mov	r2, r3
 800a566:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a56a:	6053      	str	r3, [r2, #4]
 800a56c:	e009      	b.n	800a582 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d106      	bne.n	800a582 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a57a:	461a      	mov	r2, r3
 800a57c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a580:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a5b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a5c0:	2064      	movs	r0, #100	; 0x64
 800a5c2:	f7f9 f9ab 	bl	800391c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a5d4:	200a      	movs	r0, #10
 800a5d6:	f7f9 f9a1 	bl	800391c <HAL_Delay>

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a608:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <USB_DriveVbus+0x44>
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d106      	bne.n	800a628 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a626:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a62e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a632:	d109      	bne.n	800a648 <USB_DriveVbus+0x64>
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a646:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	0c5b      	lsrs	r3, r3, #17
 800a674:	f003 0303 	and.w	r3, r3, #3
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	b29b      	uxth	r3, r3
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	70fb      	strb	r3, [r7, #3]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70bb      	strb	r3, [r7, #2]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a6de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d87e      	bhi.n	800a7e4 <USB_HC_Init+0x13c>
 800a6e6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <USB_HC_Init+0x44>)
 800a6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ec:	0800a6fd 	.word	0x0800a6fd
 800a6f0:	0800a7a7 	.word	0x0800a7a7
 800a6f4:	0800a6fd 	.word	0x0800a6fd
 800a6f8:	0800a769 	.word	0x0800a769
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4413      	add	r3, r2
 800a704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a708:	461a      	mov	r2, r3
 800a70a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a70e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a714:	2b00      	cmp	r3, #0
 800a716:	da10      	bge.n	800a73a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	0151      	lsls	r1, r2, #5
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	440a      	add	r2, r1
 800a72e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a736:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a738:	e057      	b.n	800a7ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a742:	2b00      	cmp	r3, #0
 800a744:	d051      	beq.n	800a7ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	015a      	lsls	r2, r3, #5
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	78fa      	ldrb	r2, [r7, #3]
 800a756:	0151      	lsls	r1, r2, #5
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	440a      	add	r2, r1
 800a75c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a760:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a764:	60d3      	str	r3, [r2, #12]
      break;
 800a766:	e040      	b.n	800a7ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a774:	461a      	mov	r2, r3
 800a776:	f240 639d 	movw	r3, #1693	; 0x69d
 800a77a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a77c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a780:	2b00      	cmp	r3, #0
 800a782:	da34      	bge.n	800a7ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	78fa      	ldrb	r2, [r7, #3]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a79e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a7a4:	e023      	b.n	800a7ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f240 2325 	movw	r3, #549	; 0x225
 800a7b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da17      	bge.n	800a7f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	78fa      	ldrb	r2, [r7, #3]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a7e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a7e2:	e006      	b.n	800a7f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e8:	e004      	b.n	800a7f4 <USB_HC_Init+0x14c>
      break;
 800a7ea:	bf00      	nop
 800a7ec:	e002      	b.n	800a7f4 <USB_HC_Init+0x14c>
      break;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <USB_HC_Init+0x14c>
      break;
 800a7f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7fa:	699a      	ldr	r2, [r3, #24]
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	2101      	movs	r1, #1
 800a804:	fa01 f303 	lsl.w	r3, r1, r3
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a80e:	4313      	orrs	r3, r2
 800a810:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a81e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a822:	2b00      	cmp	r3, #0
 800a824:	da03      	bge.n	800a82e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a82a:	613b      	str	r3, [r7, #16]
 800a82c:	e001      	b.n	800a832 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a832:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d103      	bne.n	800a842 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a83a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	e001      	b.n	800a846 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a846:	787b      	ldrb	r3, [r7, #1]
 800a848:	059b      	lsls	r3, r3, #22
 800a84a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a84e:	78bb      	ldrb	r3, [r7, #2]
 800a850:	02db      	lsls	r3, r3, #11
 800a852:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a856:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a858:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a85c:	049b      	lsls	r3, r3, #18
 800a85e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a862:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a866:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a86a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	0159      	lsls	r1, r3, #5
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	440b      	add	r3, r1
 800a878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a882:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d10f      	bne.n	800a8ac <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a88c:	78fb      	ldrb	r3, [r7, #3]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4413      	add	r3, r2
 800a894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8aa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop

0800a8bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08c      	sub	sp, #48	; 0x30
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d028      	beq.n	800a938 <USB_HC_StartXfer+0x7c>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d124      	bne.n	800a938 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10b      	bne.n	800a90c <USB_HC_StartXfer+0x50>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	795b      	ldrb	r3, [r3, #5]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d107      	bne.n	800a90c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	4619      	mov	r1, r3
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fa2c 	bl	800ad60 <USB_DoPing>
      return HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e111      	b.n	800ab30 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d112      	bne.n	800a938 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	69fa      	ldr	r2, [r7, #28]
 800a922:	0151      	lsls	r1, r2, #5
 800a924:	6a3a      	ldr	r2, [r7, #32]
 800a926:	440a      	add	r2, r1
 800a928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a92c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a930:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d018      	beq.n	800a972 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	8912      	ldrh	r2, [r2, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	3b01      	subs	r3, #1
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	8912      	ldrh	r2, [r2, #8]
 800a950:	fbb3 f3f2 	udiv	r3, r3, r2
 800a954:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a956:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a958:	8b7b      	ldrh	r3, [r7, #26]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d90b      	bls.n	800a976 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a95e:	8b7b      	ldrh	r3, [r7, #26]
 800a960:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a962:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	8912      	ldrh	r2, [r2, #8]
 800a968:	fb02 f203 	mul.w	r2, r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	611a      	str	r2, [r3, #16]
 800a970:	e001      	b.n	800a976 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a972:	2301      	movs	r3, #1
 800a974:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	78db      	ldrb	r3, [r3, #3]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a97e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	8912      	ldrh	r2, [r2, #8]
 800a984:	fb02 f203 	mul.w	r2, r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a996:	04d9      	lsls	r1, r3, #19
 800a998:	4b67      	ldr	r3, [pc, #412]	; (800ab38 <USB_HC_StartXfer+0x27c>)
 800a99a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a99c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	7a9b      	ldrb	r3, [r3, #10]
 800a9a2:	075b      	lsls	r3, r3, #29
 800a9a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9a8:	69f9      	ldr	r1, [r7, #28]
 800a9aa:	0148      	lsls	r0, r1, #5
 800a9ac:	6a39      	ldr	r1, [r7, #32]
 800a9ae:	4401      	add	r1, r0
 800a9b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d009      	beq.n	800a9d2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	68d9      	ldr	r1, [r3, #12]
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ce:	460a      	mov	r2, r1
 800a9d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bf0c      	ite	eq
 800a9e2:	2301      	moveq	r3, #1
 800a9e4:	2300      	movne	r3, #0
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	69fa      	ldr	r2, [r7, #28]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	6a3a      	ldr	r2, [r7, #32]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	7e7b      	ldrb	r3, [r7, #25]
 800aa1a:	075b      	lsls	r3, r3, #29
 800aa1c:	69f9      	ldr	r1, [r7, #28]
 800aa1e:	0148      	lsls	r0, r1, #5
 800aa20:	6a39      	ldr	r1, [r7, #32]
 800aa22:	4401      	add	r1, r0
 800aa24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a40      	ldr	r2, [pc, #256]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa3c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa3e:	4b3f      	ldr	r3, [pc, #252]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa46:	4a3d      	ldr	r2, [pc, #244]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa48:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	78db      	ldrb	r3, [r3, #3]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aa52:	4b3a      	ldr	r3, [pc, #232]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5a:	4a38      	ldr	r2, [pc, #224]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	e005      	b.n	800aa6c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aa60:	4b36      	ldr	r3, [pc, #216]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa68:	4a34      	ldr	r2, [pc, #208]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa6a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa6c:	4b33      	ldr	r3, [pc, #204]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa74:	4a31      	ldr	r2, [pc, #196]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa76:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d14d      	bne.n	800ab2e <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	78db      	ldrb	r3, [r3, #3]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d149      	bne.n	800ab2e <USB_HC_StartXfer+0x272>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d045      	beq.n	800ab2e <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	79db      	ldrb	r3, [r3, #7]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d830      	bhi.n	800ab0c <USB_HC_StartXfer+0x250>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <USB_HC_StartXfer+0x1f4>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800aae5 	.word	0x0800aae5
 800aab8:	0800aac1 	.word	0x0800aac1
 800aabc:	0800aae5 	.word	0x0800aae5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	3303      	adds	r3, #3
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aaca:	8afa      	ldrh	r2, [r7, #22]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d91c      	bls.n	800ab10 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	f043 0220 	orr.w	r2, r3, #32
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	619a      	str	r2, [r3, #24]
          }
          break;
 800aae2:	e015      	b.n	800ab10 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	3303      	adds	r3, #3
 800aaea:	089b      	lsrs	r3, r3, #2
 800aaec:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aaee:	8afa      	ldrh	r2, [r7, #22]
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d90a      	bls.n	800ab14 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	619a      	str	r2, [r3, #24]
          }
          break;
 800ab0a:	e003      	b.n	800ab14 <USB_HC_StartXfer+0x258>

        default:
          break;
 800ab0c:	bf00      	nop
 800ab0e:	e002      	b.n	800ab16 <USB_HC_StartXfer+0x25a>
          break;
 800ab10:	bf00      	nop
 800ab12:	e000      	b.n	800ab16 <USB_HC_StartXfer+0x25a>
          break;
 800ab14:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	68d9      	ldr	r1, [r3, #12]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	785a      	ldrb	r2, [r3, #1]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	2000      	movs	r0, #0
 800ab26:	9000      	str	r0, [sp, #0]
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff fb8d 	bl	800a248 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3728      	adds	r7, #40	; 0x28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	1ff80000 	.word	0x1ff80000
 800ab3c:	24000188 	.word	0x24000188

0800ab40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	b29b      	uxth	r3, r3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b087      	sub	sp, #28
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	0c9b      	lsrs	r3, r3, #18
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <USB_HC_Halt+0x3a>
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d16c      	bne.n	800ac76 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d143      	bne.n	800ac50 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abe6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	0151      	lsls	r1, r2, #5
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	440a      	add	r2, r1
 800ac1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac26:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac34:	d81d      	bhi.n	800ac72 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac4c:	d0ec      	beq.n	800ac28 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac4e:	e080      	b.n	800ad52 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	0151      	lsls	r1, r2, #5
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	440a      	add	r2, r1
 800ac66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac6e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac70:	e06f      	b.n	800ad52 <USB_HC_Halt+0x1f0>
          break;
 800ac72:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac74:	e06d      	b.n	800ad52 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac94:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d143      	bne.n	800ad2e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4413      	add	r3, r2
 800acae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	0151      	lsls	r1, r2, #5
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	440a      	add	r2, r1
 800acbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	4413      	add	r3, r2
 800acce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ace0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ace4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	4413      	add	r3, r2
 800acee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	0151      	lsls	r1, r2, #5
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	440a      	add	r2, r1
 800acfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad04:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad12:	d81d      	bhi.n	800ad50 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad2a:	d0ec      	beq.n	800ad06 <USB_HC_Halt+0x1a4>
 800ad2c:	e011      	b.n	800ad52 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	0151      	lsls	r1, r2, #5
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	440a      	add	r2, r1
 800ad44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	e000      	b.n	800ad52 <USB_HC_Halt+0x1f0>
          break;
 800ad50:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	371c      	adds	r7, #28
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ad74:	2301      	movs	r3, #1
 800ad76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	04da      	lsls	r2, r3, #19
 800ad7c:	4b15      	ldr	r3, [pc, #84]	; (800add4 <USB_DoPing+0x74>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ada8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adbe:	461a      	mov	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	1ff80000 	.word	0x1ff80000

0800add8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff f9aa 	bl	800a142 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800adee:	2110      	movs	r1, #16
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff f9e1 	bl	800a1b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fa04 	bl	800a204 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800adfc:	2300      	movs	r3, #0
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	e01f      	b.n	800ae42 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae36:	461a      	mov	r2, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	613b      	str	r3, [r7, #16]
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d9dc      	bls.n	800ae02 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	613b      	str	r3, [r7, #16]
 800ae4c:	e034      	b.n	800aeb8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae82:	461a      	mov	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae94:	d80c      	bhi.n	800aeb0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeac:	d0ec      	beq.n	800ae88 <USB_StopHost+0xb0>
 800aeae:	e000      	b.n	800aeb2 <USB_StopHost+0xda>
        break;
 800aeb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b0f      	cmp	r3, #15
 800aebc:	d9c7      	bls.n	800ae4e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aec4:	461a      	mov	r2, r3
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f04f 32ff 	mov.w	r2, #4294967295
 800aed2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff f923 	bl	800a120 <USB_EnableGlobalInt>

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800aee8:	4904      	ldr	r1, [pc, #16]	; (800aefc <MX_FATFS_Init+0x18>)
 800aeea:	4805      	ldr	r0, [pc, #20]	; (800af00 <MX_FATFS_Init+0x1c>)
 800aeec:	f005 fb86 	bl	80105fc <FATFS_LinkDriver>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	4b03      	ldr	r3, [pc, #12]	; (800af04 <MX_FATFS_Init+0x20>)
 800aef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aef8:	bf00      	nop
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	240203f4 	.word	0x240203f4
 800af00:	08010f98 	.word	0x08010f98
 800af04:	24020858 	.word	0x24020858

0800af08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af0e:	4618      	mov	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	4619      	mov	r1, r3
 800af42:	4808      	ldr	r0, [pc, #32]	; (800af64 <USBH_status+0x34>)
 800af44:	f000 fe1a 	bl	800bb7c <USBH_MSC_UnitIsReady>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <USBH_status+0x24>
  {
    res = RES_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
 800af52:	e001      	b.n	800af58 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	2402085c 	.word	0x2402085c

0800af68 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b094      	sub	sp, #80	; 0x50
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800af7e:	7bf9      	ldrb	r1, [r7, #15]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	4813      	ldr	r0, [pc, #76]	; (800afd8 <USBH_read+0x70>)
 800af8a:	f000 fe41 	bl	800bc10 <USBH_MSC_Read>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d103      	bne.n	800af9c <USBH_read+0x34>
  {
    res = RES_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af9a:	e017      	b.n	800afcc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800af9c:	f107 0210 	add.w	r2, r7, #16
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	4619      	mov	r1, r3
 800afa4:	480c      	ldr	r0, [pc, #48]	; (800afd8 <USBH_read+0x70>)
 800afa6:	f000 fe0f 	bl	800bbc8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800afaa:	7f7b      	ldrb	r3, [r7, #29]
 800afac:	2b3a      	cmp	r3, #58	; 0x3a
 800afae:	d005      	beq.n	800afbc <USBH_read+0x54>
 800afb0:	2b3a      	cmp	r3, #58	; 0x3a
 800afb2:	dc07      	bgt.n	800afc4 <USBH_read+0x5c>
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d001      	beq.n	800afbc <USBH_read+0x54>
 800afb8:	2b28      	cmp	r3, #40	; 0x28
 800afba:	d103      	bne.n	800afc4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800afbc:	2303      	movs	r3, #3
 800afbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800afc2:	e003      	b.n	800afcc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800afca:	bf00      	nop
    }
  }

  return res;
 800afcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3748      	adds	r7, #72	; 0x48
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2402085c 	.word	0x2402085c

0800afdc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b094      	sub	sp, #80	; 0x50
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800aff2:	7bf9      	ldrb	r1, [r7, #15]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	4817      	ldr	r0, [pc, #92]	; (800b05c <USBH_write+0x80>)
 800affe:	f000 fe70 	bl	800bce2 <USBH_MSC_Write>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d103      	bne.n	800b010 <USBH_write+0x34>
  {
    res = RES_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b00e:	e01f      	b.n	800b050 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b010:	f107 0210 	add.w	r2, r7, #16
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4619      	mov	r1, r3
 800b018:	4810      	ldr	r0, [pc, #64]	; (800b05c <USBH_write+0x80>)
 800b01a:	f000 fdd5 	bl	800bbc8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b01e:	7f7b      	ldrb	r3, [r7, #29]
 800b020:	2b3a      	cmp	r3, #58	; 0x3a
 800b022:	d00d      	beq.n	800b040 <USBH_write+0x64>
 800b024:	2b3a      	cmp	r3, #58	; 0x3a
 800b026:	dc0f      	bgt.n	800b048 <USBH_write+0x6c>
 800b028:	2b28      	cmp	r3, #40	; 0x28
 800b02a:	d009      	beq.n	800b040 <USBH_write+0x64>
 800b02c:	2b28      	cmp	r3, #40	; 0x28
 800b02e:	dc0b      	bgt.n	800b048 <USBH_write+0x6c>
 800b030:	2b04      	cmp	r3, #4
 800b032:	d005      	beq.n	800b040 <USBH_write+0x64>
 800b034:	2b27      	cmp	r3, #39	; 0x27
 800b036:	d107      	bne.n	800b048 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b038:	2302      	movs	r3, #2
 800b03a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b03e:	e007      	b.n	800b050 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b040:	2303      	movs	r3, #3
 800b042:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b046:	e003      	b.n	800b050 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b04e:	bf00      	nop
    }
  }

  return res;
 800b050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b054:	4618      	mov	r0, r3
 800b056:	3748      	adds	r7, #72	; 0x48
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	2402085c 	.word	0x2402085c

0800b060 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b090      	sub	sp, #64	; 0x40
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	603a      	str	r2, [r7, #0]
 800b06a:	71fb      	strb	r3, [r7, #7]
 800b06c:	460b      	mov	r3, r1
 800b06e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b076:	79bb      	ldrb	r3, [r7, #6]
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d852      	bhi.n	800b122 <USBH_ioctl+0xc2>
 800b07c:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <USBH_ioctl+0x24>)
 800b07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b082:	bf00      	nop
 800b084:	0800b095 	.word	0x0800b095
 800b088:	0800b09d 	.word	0x0800b09d
 800b08c:	0800b0c7 	.word	0x0800b0c7
 800b090:	0800b0f3 	.word	0x0800b0f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b09a:	e045      	b.n	800b128 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b09c:	f107 0208 	add.w	r2, r7, #8
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4823      	ldr	r0, [pc, #140]	; (800b134 <USBH_ioctl+0xd4>)
 800b0a6:	f000 fd8f 	bl	800bbc8 <USBH_MSC_GetLUNInfo>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b0bc:	e034      	b.n	800b128 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b0c4:	e030      	b.n	800b128 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4819      	ldr	r0, [pc, #100]	; (800b134 <USBH_ioctl+0xd4>)
 800b0d0:	f000 fd7a 	bl	800bbc8 <USBH_MSC_GetLUNInfo>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b0da:	8a3b      	ldrh	r3, [r7, #16]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b0e8:	e01e      	b.n	800b128 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b0f0:	e01a      	b.n	800b128 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b0f2:	f107 0208 	add.w	r2, r7, #8
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	480e      	ldr	r0, [pc, #56]	; (800b134 <USBH_ioctl+0xd4>)
 800b0fc:	f000 fd64 	bl	800bbc8 <USBH_MSC_GetLUNInfo>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d109      	bne.n	800b11a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b106:	8a3b      	ldrh	r3, [r7, #16]
 800b108:	0a5b      	lsrs	r3, r3, #9
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	461a      	mov	r2, r3
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b118:	e006      	b.n	800b128 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b120:	e002      	b.n	800b128 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b122:	2304      	movs	r3, #4
 800b124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3740      	adds	r7, #64	; 0x40
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	2402085c 	.word	0x2402085c

0800b138 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b138:	b590      	push	{r4, r7, lr}
 800b13a:	b089      	sub	sp, #36	; 0x24
 800b13c:	af04      	add	r7, sp, #16
 800b13e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b146:	7919      	ldrb	r1, [r3, #4]
 800b148:	2350      	movs	r3, #80	; 0x50
 800b14a:	2206      	movs	r2, #6
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fc53 	bl	800c9f8 <USBH_FindInterface>
 800b152:	4603      	mov	r3, r0
 800b154:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	2bff      	cmp	r3, #255	; 0xff
 800b15a:	d002      	beq.n	800b162 <USBH_MSC_InterfaceInit+0x2a>
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d901      	bls.n	800b166 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b162:	2302      	movs	r3, #2
 800b164:	e0ef      	b.n	800b346 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 fc28 	bl	800c9c0 <USBH_SelectInterface>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b17a:	2302      	movs	r3, #2
 800b17c:	e0e3      	b.n	800b346 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b184:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b188:	f005 fdb4 	bl	8010cf4 <malloc>
 800b18c:	4603      	mov	r3, r0
 800b18e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b196:	69db      	ldr	r3, [r3, #28]
 800b198:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e0d0      	b.n	800b346 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b1a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68b8      	ldr	r0, [r7, #8]
 800b1ac:	f005 fdc0 	bl	8010d30 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	211a      	movs	r1, #26
 800b1b6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	b25b      	sxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	da16      	bge.n	800b1f6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	211a      	movs	r1, #26
 800b1ce:	fb01 f303 	mul.w	r3, r1, r3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	211a      	movs	r1, #26
 800b1e4:	fb01 f303 	mul.w	r3, r1, r3
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b1ee:	881a      	ldrh	r2, [r3, #0]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	815a      	strh	r2, [r3, #10]
 800b1f4:	e015      	b.n	800b222 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	211a      	movs	r1, #26
 800b1fc:	fb01 f303 	mul.w	r3, r1, r3
 800b200:	4413      	add	r3, r2
 800b202:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	211a      	movs	r1, #26
 800b212:	fb01 f303 	mul.w	r3, r1, r3
 800b216:	4413      	add	r3, r2
 800b218:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b21c:	881a      	ldrh	r2, [r3, #0]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	211a      	movs	r1, #26
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	4413      	add	r3, r2
 800b22e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b25b      	sxtb	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	da16      	bge.n	800b268 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	211a      	movs	r1, #26
 800b240:	fb01 f303 	mul.w	r3, r1, r3
 800b244:	4413      	add	r3, r2
 800b246:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b24a:	781a      	ldrb	r2, [r3, #0]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	211a      	movs	r1, #26
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b260:	881a      	ldrh	r2, [r3, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	815a      	strh	r2, [r3, #10]
 800b266:	e015      	b.n	800b294 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	211a      	movs	r1, #26
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	4413      	add	r3, r2
 800b274:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	211a      	movs	r1, #26
 800b284:	fb01 f303 	mul.w	r3, r1, r3
 800b288:	4413      	add	r3, r2
 800b28a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b28e:	881a      	ldrh	r2, [r3, #0]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2200      	movs	r2, #0
 800b298:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2200      	movs	r2, #0
 800b29e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	799b      	ldrb	r3, [r3, #6]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f002 fdc4 	bl	800de3a <USBH_AllocPipe>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	79db      	ldrb	r3, [r3, #7]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f002 fdba 	bl	800de3a <USBH_AllocPipe>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fdac 	bl	800be2c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	7959      	ldrb	r1, [r3, #5]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	7998      	ldrb	r0, [r3, #6]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	8912      	ldrh	r2, [r2, #8]
 800b2ec:	9202      	str	r2, [sp, #8]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f002 fd6f 	bl	800dddc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	7919      	ldrb	r1, [r3, #4]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	79d8      	ldrb	r0, [r3, #7]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	8952      	ldrh	r2, [r2, #10]
 800b316:	9202      	str	r2, [sp, #8]
 800b318:	2202      	movs	r2, #2
 800b31a:	9201      	str	r2, [sp, #4]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	4623      	mov	r3, r4
 800b320:	4602      	mov	r2, r0
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f002 fd5a 	bl	800dddc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	791b      	ldrb	r3, [r3, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f005 fbfb 	bl	8010b2c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	795b      	ldrb	r3, [r3, #5]
 800b33a:	2200      	movs	r2, #0
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f005 fbf4 	bl	8010b2c <USBH_LL_SetToggle>

  return USBH_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd90      	pop	{r4, r7, pc}

0800b34e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	795b      	ldrb	r3, [r3, #5]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00e      	beq.n	800b386 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	795b      	ldrb	r3, [r3, #5]
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f002 fd53 	bl	800de1a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	795b      	ldrb	r3, [r3, #5]
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f002 fd7e 	bl	800de7c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00e      	beq.n	800b3ac <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f002 fd40 	bl	800de1a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	791b      	ldrb	r3, [r3, #4]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f002 fd6b 	bl	800de7c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f005 fc9f 	bl	8010d04 <free>
    phost->pActiveClass->pData = 0U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	7b9b      	ldrb	r3, [r3, #14]
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d041      	beq.n	800b47c <USBH_MSC_ClassRequest+0xa2>
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	dc4b      	bgt.n	800b494 <USBH_MSC_ClassRequest+0xba>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <USBH_MSC_ClassRequest+0x2a>
 800b400:	2b02      	cmp	r3, #2
 800b402:	d147      	bne.n	800b494 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fcf0 	bl	800bdee <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	2b03      	cmp	r3, #3
 800b416:	d104      	bne.n	800b422 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2200      	movs	r2, #0
 800b41c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d137      	bne.n	800b498 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d804      	bhi.n	800b43a <USBH_MSC_ClassRequest+0x60>
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	b2da      	uxtb	r2, r3
 800b438:	e000      	b.n	800b43c <USBH_MSC_ClassRequest+0x62>
 800b43a:	2202      	movs	r2, #2
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b440:	2300      	movs	r3, #0
 800b442:	73bb      	strb	r3, [r7, #14]
 800b444:	e014      	b.n	800b470 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	2134      	movs	r1, #52	; 0x34
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	4413      	add	r3, r2
 800b452:	3392      	adds	r3, #146	; 0x92
 800b454:	2202      	movs	r2, #2
 800b456:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	2134      	movs	r1, #52	; 0x34
 800b45e:	fb01 f303 	mul.w	r3, r1, r3
 800b462:	4413      	add	r3, r2
 800b464:	33c1      	adds	r3, #193	; 0xc1
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	3301      	adds	r3, #1
 800b46e:	73bb      	strb	r3, [r7, #14]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	7bba      	ldrb	r2, [r7, #14]
 800b476:	429a      	cmp	r2, r3
 800b478:	d3e5      	bcc.n	800b446 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b47a:	e00d      	b.n	800b498 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b47c:	2100      	movs	r1, #0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f002 f87b 	bl	800d57a <USBH_ClrFeature>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d108      	bne.n	800b49c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	7bda      	ldrb	r2, [r3, #15]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b492:	e003      	b.n	800b49c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b494:	bf00      	nop
 800b496:	e002      	b.n	800b49e <USBH_MSC_ClassRequest+0xc4>
      break;
 800b498:	bf00      	nop
 800b49a:	e000      	b.n	800b49e <USBH_MSC_ClassRequest+0xc4>
      break;
 800b49c:	bf00      	nop
  }

  return status;
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	7b1b      	ldrb	r3, [r3, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <USBH_MSC_Process+0x2e>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	f000 8271 	beq.w	800b9b6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b4d4:	e272      	b.n	800b9bc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	f080 824f 	bcs.w	800b986 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	2334      	movs	r3, #52	; 0x34
 800b4f4:	fb03 f301 	mul.w	r3, r3, r1
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3391      	adds	r3, #145	; 0x91
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b506:	4619      	mov	r1, r3
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	2334      	movs	r3, #52	; 0x34
 800b50c:	fb03 f301 	mul.w	r3, r3, r1
 800b510:	4413      	add	r3, r2
 800b512:	3390      	adds	r3, #144	; 0x90
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2b08      	cmp	r3, #8
 800b518:	f200 8243 	bhi.w	800b9a2 <USBH_MSC_Process+0x4fa>
 800b51c:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <USBH_MSC_Process+0x7c>)
 800b51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b522:	bf00      	nop
 800b524:	0800b549 	.word	0x0800b549
 800b528:	0800b9a3 	.word	0x0800b9a3
 800b52c:	0800b611 	.word	0x0800b611
 800b530:	0800b795 	.word	0x0800b795
 800b534:	0800b56f 	.word	0x0800b56f
 800b538:	0800b861 	.word	0x0800b861
 800b53c:	0800b9a3 	.word	0x0800b9a3
 800b540:	0800b9a3 	.word	0x0800b9a3
 800b544:	0800b975 	.word	0x0800b975
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b54e:	4619      	mov	r1, r3
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	2334      	movs	r3, #52	; 0x34
 800b554:	fb03 f301 	mul.w	r3, r3, r1
 800b558:	4413      	add	r3, r2
 800b55a:	3390      	adds	r3, #144	; 0x90
 800b55c:	2204      	movs	r2, #4
 800b55e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b56c:	e222      	b.n	800b9b4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b574:	b2d9      	uxtb	r1, r3
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b57c:	461a      	mov	r2, r3
 800b57e:	2334      	movs	r3, #52	; 0x34
 800b580:	fb03 f302 	mul.w	r3, r3, r2
 800b584:	3398      	adds	r3, #152	; 0x98
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	4413      	add	r3, r2
 800b58a:	3307      	adds	r3, #7
 800b58c:	461a      	mov	r2, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 ff6a 	bl	800c468 <USBH_MSC_SCSI_Inquiry>
 800b594:	4603      	mov	r3, r0
 800b596:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10b      	bne.n	800b5b6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	2334      	movs	r3, #52	; 0x34
 800b5aa:	fb03 f301 	mul.w	r3, r3, r1
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3390      	adds	r3, #144	; 0x90
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d10c      	bne.n	800b5d6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	2334      	movs	r3, #52	; 0x34
 800b5c8:	fb03 f301 	mul.w	r3, r3, r1
 800b5cc:	4413      	add	r3, r2
 800b5ce:	3390      	adds	r3, #144	; 0x90
 800b5d0:	2205      	movs	r2, #5
 800b5d2:	701a      	strb	r2, [r3, #0]
            break;
 800b5d4:	e1e7      	b.n	800b9a6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	f040 81e4 	bne.w	800b9a6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	2334      	movs	r3, #52	; 0x34
 800b5ea:	fb03 f301 	mul.w	r3, r3, r1
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3390      	adds	r3, #144	; 0x90
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	2334      	movs	r3, #52	; 0x34
 800b602:	fb03 f301 	mul.w	r3, r3, r1
 800b606:	4413      	add	r3, r2
 800b608:	3391      	adds	r3, #145	; 0x91
 800b60a:	2202      	movs	r2, #2
 800b60c:	701a      	strb	r2, [r3, #0]
            break;
 800b60e:	e1ca      	b.n	800b9a6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fe66 	bl	800c2ec <USBH_MSC_SCSI_TestUnitReady>
 800b620:	4603      	mov	r3, r0
 800b622:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d149      	bne.n	800b6be <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b630:	4619      	mov	r1, r3
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	2334      	movs	r3, #52	; 0x34
 800b636:	fb03 f301 	mul.w	r3, r3, r1
 800b63a:	4413      	add	r3, r2
 800b63c:	3392      	adds	r3, #146	; 0x92
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00c      	beq.n	800b65e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b64a:	4619      	mov	r1, r3
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	2334      	movs	r3, #52	; 0x34
 800b650:	fb03 f301 	mul.w	r3, r3, r1
 800b654:	4413      	add	r3, r2
 800b656:	33c1      	adds	r3, #193	; 0xc1
 800b658:	2201      	movs	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e00b      	b.n	800b676 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b664:	4619      	mov	r1, r3
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	2334      	movs	r3, #52	; 0x34
 800b66a:	fb03 f301 	mul.w	r3, r3, r1
 800b66e:	4413      	add	r3, r2
 800b670:	33c1      	adds	r3, #193	; 0xc1
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b67c:	4619      	mov	r1, r3
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	2334      	movs	r3, #52	; 0x34
 800b682:	fb03 f301 	mul.w	r3, r3, r1
 800b686:	4413      	add	r3, r2
 800b688:	3390      	adds	r3, #144	; 0x90
 800b68a:	2203      	movs	r2, #3
 800b68c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b694:	4619      	mov	r1, r3
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	2334      	movs	r3, #52	; 0x34
 800b69a:	fb03 f301 	mul.w	r3, r3, r1
 800b69e:	4413      	add	r3, r2
 800b6a0:	3391      	adds	r3, #145	; 0x91
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	2334      	movs	r3, #52	; 0x34
 800b6b2:	fb03 f301 	mul.w	r3, r3, r1
 800b6b6:	4413      	add	r3, r2
 800b6b8:	3392      	adds	r3, #146	; 0x92
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d14a      	bne.n	800b75a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	2334      	movs	r3, #52	; 0x34
 800b6d0:	fb03 f301 	mul.w	r3, r3, r1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	3392      	adds	r3, #146	; 0x92
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d00c      	beq.n	800b6f8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	2334      	movs	r3, #52	; 0x34
 800b6ea:	fb03 f301 	mul.w	r3, r3, r1
 800b6ee:	4413      	add	r3, r2
 800b6f0:	33c1      	adds	r3, #193	; 0xc1
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e00b      	b.n	800b710 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6fe:	4619      	mov	r1, r3
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	2334      	movs	r3, #52	; 0x34
 800b704:	fb03 f301 	mul.w	r3, r3, r1
 800b708:	4413      	add	r3, r2
 800b70a:	33c1      	adds	r3, #193	; 0xc1
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b716:	4619      	mov	r1, r3
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	2334      	movs	r3, #52	; 0x34
 800b71c:	fb03 f301 	mul.w	r3, r3, r1
 800b720:	4413      	add	r3, r2
 800b722:	3390      	adds	r3, #144	; 0x90
 800b724:	2205      	movs	r2, #5
 800b726:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b72e:	4619      	mov	r1, r3
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	2334      	movs	r3, #52	; 0x34
 800b734:	fb03 f301 	mul.w	r3, r3, r1
 800b738:	4413      	add	r3, r2
 800b73a:	3391      	adds	r3, #145	; 0x91
 800b73c:	2201      	movs	r2, #1
 800b73e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b746:	4619      	mov	r1, r3
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	2334      	movs	r3, #52	; 0x34
 800b74c:	fb03 f301 	mul.w	r3, r3, r1
 800b750:	4413      	add	r3, r2
 800b752:	3392      	adds	r3, #146	; 0x92
 800b754:	2202      	movs	r2, #2
 800b756:	701a      	strb	r2, [r3, #0]
            break;
 800b758:	e127      	b.n	800b9aa <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	f040 8124 	bne.w	800b9aa <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b768:	4619      	mov	r1, r3
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	2334      	movs	r3, #52	; 0x34
 800b76e:	fb03 f301 	mul.w	r3, r3, r1
 800b772:	4413      	add	r3, r2
 800b774:	3390      	adds	r3, #144	; 0x90
 800b776:	2201      	movs	r2, #1
 800b778:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b780:	4619      	mov	r1, r3
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	2334      	movs	r3, #52	; 0x34
 800b786:	fb03 f301 	mul.w	r3, r3, r1
 800b78a:	4413      	add	r3, r2
 800b78c:	3391      	adds	r3, #145	; 0x91
 800b78e:	2202      	movs	r2, #2
 800b790:	701a      	strb	r2, [r3, #0]
            break;
 800b792:	e10a      	b.n	800b9aa <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b79a:	b2d9      	uxtb	r1, r3
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	2334      	movs	r3, #52	; 0x34
 800b7a6:	fb03 f302 	mul.w	r3, r3, r2
 800b7aa:	3390      	adds	r3, #144	; 0x90
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fddc 	bl	800c372 <USBH_MSC_SCSI_ReadCapacity>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d120      	bne.n	800b806 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	2334      	movs	r3, #52	; 0x34
 800b7d0:	fb03 f301 	mul.w	r3, r3, r1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3390      	adds	r3, #144	; 0x90
 800b7d8:	2201      	movs	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	2334      	movs	r3, #52	; 0x34
 800b7e8:	fb03 f301 	mul.w	r3, r3, r1
 800b7ec:	4413      	add	r3, r2
 800b7ee:	3391      	adds	r3, #145	; 0x91
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b804:	e0d3      	b.n	800b9ae <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d10c      	bne.n	800b826 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b812:	4619      	mov	r1, r3
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	2334      	movs	r3, #52	; 0x34
 800b818:	fb03 f301 	mul.w	r3, r3, r1
 800b81c:	4413      	add	r3, r2
 800b81e:	3390      	adds	r3, #144	; 0x90
 800b820:	2205      	movs	r2, #5
 800b822:	701a      	strb	r2, [r3, #0]
            break;
 800b824:	e0c3      	b.n	800b9ae <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	2b04      	cmp	r3, #4
 800b82a:	f040 80c0 	bne.w	800b9ae <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b834:	4619      	mov	r1, r3
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	2334      	movs	r3, #52	; 0x34
 800b83a:	fb03 f301 	mul.w	r3, r3, r1
 800b83e:	4413      	add	r3, r2
 800b840:	3390      	adds	r3, #144	; 0x90
 800b842:	2201      	movs	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b84c:	4619      	mov	r1, r3
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	2334      	movs	r3, #52	; 0x34
 800b852:	fb03 f301 	mul.w	r3, r3, r1
 800b856:	4413      	add	r3, r2
 800b858:	3391      	adds	r3, #145	; 0x91
 800b85a:	2202      	movs	r2, #2
 800b85c:	701a      	strb	r2, [r3, #0]
            break;
 800b85e:	e0a6      	b.n	800b9ae <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b866:	b2d9      	uxtb	r1, r3
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b86e:	461a      	mov	r2, r3
 800b870:	2334      	movs	r3, #52	; 0x34
 800b872:	fb03 f302 	mul.w	r3, r3, r2
 800b876:	3398      	adds	r3, #152	; 0x98
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	4413      	add	r3, r2
 800b87c:	3304      	adds	r3, #4
 800b87e:	461a      	mov	r2, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fe96 	bl	800c5b2 <USBH_MSC_SCSI_RequestSense>
 800b886:	4603      	mov	r3, r0
 800b888:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d145      	bne.n	800b91c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b896:	4619      	mov	r1, r3
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	2334      	movs	r3, #52	; 0x34
 800b89c:	fb03 f301 	mul.w	r3, r3, r1
 800b8a0:	4413      	add	r3, r2
 800b8a2:	339c      	adds	r3, #156	; 0x9c
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b06      	cmp	r3, #6
 800b8a8:	d00c      	beq.n	800b8c4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	2334      	movs	r3, #52	; 0x34
 800b8b6:	fb03 f301 	mul.w	r3, r3, r1
 800b8ba:	4413      	add	r3, r2
 800b8bc:	339c      	adds	r3, #156	; 0x9c
 800b8be:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d117      	bne.n	800b8f4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	f242 720f 	movw	r2, #9999	; 0x270f
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d80c      	bhi.n	800b8f4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	2334      	movs	r3, #52	; 0x34
 800b8e6:	fb03 f301 	mul.w	r3, r3, r1
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3390      	adds	r3, #144	; 0x90
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	701a      	strb	r2, [r3, #0]
                  break;
 800b8f2:	e05f      	b.n	800b9b4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	2334      	movs	r3, #52	; 0x34
 800b900:	fb03 f301 	mul.w	r3, r3, r1
 800b904:	4413      	add	r3, r2
 800b906:	3390      	adds	r3, #144	; 0x90
 800b908:	2201      	movs	r2, #1
 800b90a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b912:	3301      	adds	r3, #1
 800b914:	b29a      	uxth	r2, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d10c      	bne.n	800b93c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b928:	4619      	mov	r1, r3
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	2334      	movs	r3, #52	; 0x34
 800b92e:	fb03 f301 	mul.w	r3, r3, r1
 800b932:	4413      	add	r3, r2
 800b934:	3390      	adds	r3, #144	; 0x90
 800b936:	2208      	movs	r2, #8
 800b938:	701a      	strb	r2, [r3, #0]
            break;
 800b93a:	e03a      	b.n	800b9b2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d137      	bne.n	800b9b2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b948:	4619      	mov	r1, r3
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	2334      	movs	r3, #52	; 0x34
 800b94e:	fb03 f301 	mul.w	r3, r3, r1
 800b952:	4413      	add	r3, r2
 800b954:	3390      	adds	r3, #144	; 0x90
 800b956:	2201      	movs	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b960:	4619      	mov	r1, r3
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	2334      	movs	r3, #52	; 0x34
 800b966:	fb03 f301 	mul.w	r3, r3, r1
 800b96a:	4413      	add	r3, r2
 800b96c:	3391      	adds	r3, #145	; 0x91
 800b96e:	2202      	movs	r2, #2
 800b970:	701a      	strb	r2, [r3, #0]
            break;
 800b972:	e01e      	b.n	800b9b2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b97a:	3301      	adds	r3, #1
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b984:	e016      	b.n	800b9b4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	2201      	movs	r2, #1
 800b992:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b99a:	2102      	movs	r1, #2
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	4798      	blx	r3
      break;
 800b9a0:	e00c      	b.n	800b9bc <USBH_MSC_Process+0x514>
            break;
 800b9a2:	bf00      	nop
 800b9a4:	e00a      	b.n	800b9bc <USBH_MSC_Process+0x514>
            break;
 800b9a6:	bf00      	nop
 800b9a8:	e008      	b.n	800b9bc <USBH_MSC_Process+0x514>
            break;
 800b9aa:	bf00      	nop
 800b9ac:	e006      	b.n	800b9bc <USBH_MSC_Process+0x514>
            break;
 800b9ae:	bf00      	nop
 800b9b0:	e004      	b.n	800b9bc <USBH_MSC_Process+0x514>
            break;
 800b9b2:	bf00      	nop
      break;
 800b9b4:	e002      	b.n	800b9bc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ba:	bf00      	nop
  }
  return error;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop

0800b9c8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b088      	sub	sp, #32
 800b9e2:	af02      	add	r7, sp, #8
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b9fc:	78fb      	ldrb	r3, [r7, #3]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	2134      	movs	r1, #52	; 0x34
 800ba02:	fb01 f303 	mul.w	r3, r1, r3
 800ba06:	4413      	add	r3, r2
 800ba08:	3390      	adds	r3, #144	; 0x90
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b07      	cmp	r3, #7
 800ba0e:	d03c      	beq.n	800ba8a <USBH_MSC_RdWrProcess+0xac>
 800ba10:	2b07      	cmp	r3, #7
 800ba12:	f300 80a7 	bgt.w	800bb64 <USBH_MSC_RdWrProcess+0x186>
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d06c      	beq.n	800baf4 <USBH_MSC_RdWrProcess+0x116>
 800ba1a:	2b06      	cmp	r3, #6
 800ba1c:	f040 80a2 	bne.w	800bb64 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ba20:	78f9      	ldrb	r1, [r7, #3]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fea5 	bl	800c77a <USBH_MSC_SCSI_Read>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10b      	bne.n	800ba52 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	2134      	movs	r1, #52	; 0x34
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	4413      	add	r3, r2
 800ba46:	3390      	adds	r3, #144	; 0x90
 800ba48:	2201      	movs	r2, #1
 800ba4a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ba50:	e08a      	b.n	800bb68 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d109      	bne.n	800ba6c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ba58:	78fb      	ldrb	r3, [r7, #3]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	2134      	movs	r1, #52	; 0x34
 800ba5e:	fb01 f303 	mul.w	r3, r1, r3
 800ba62:	4413      	add	r3, r2
 800ba64:	3390      	adds	r3, #144	; 0x90
 800ba66:	2205      	movs	r2, #5
 800ba68:	701a      	strb	r2, [r3, #0]
      break;
 800ba6a:	e07d      	b.n	800bb68 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d17a      	bne.n	800bb68 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	2134      	movs	r1, #52	; 0x34
 800ba78:	fb01 f303 	mul.w	r3, r1, r3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	3390      	adds	r3, #144	; 0x90
 800ba80:	2208      	movs	r2, #8
 800ba82:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ba84:	2302      	movs	r3, #2
 800ba86:	75fb      	strb	r3, [r7, #23]
      break;
 800ba88:	e06e      	b.n	800bb68 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ba8a:	78f9      	ldrb	r1, [r7, #3]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2300      	movs	r3, #0
 800ba92:	2200      	movs	r2, #0
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fe05 	bl	800c6a4 <USBH_MSC_SCSI_Write>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	2134      	movs	r1, #52	; 0x34
 800baaa:	fb01 f303 	mul.w	r3, r1, r3
 800baae:	4413      	add	r3, r2
 800bab0:	3390      	adds	r3, #144	; 0x90
 800bab2:	2201      	movs	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800baba:	e057      	b.n	800bb6c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d109      	bne.n	800bad6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	2134      	movs	r1, #52	; 0x34
 800bac8:	fb01 f303 	mul.w	r3, r1, r3
 800bacc:	4413      	add	r3, r2
 800bace:	3390      	adds	r3, #144	; 0x90
 800bad0:	2205      	movs	r2, #5
 800bad2:	701a      	strb	r2, [r3, #0]
      break;
 800bad4:	e04a      	b.n	800bb6c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b04      	cmp	r3, #4
 800bada:	d147      	bne.n	800bb6c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	2134      	movs	r1, #52	; 0x34
 800bae2:	fb01 f303 	mul.w	r3, r1, r3
 800bae6:	4413      	add	r3, r2
 800bae8:	3390      	adds	r3, #144	; 0x90
 800baea:	2208      	movs	r2, #8
 800baec:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800baee:	2302      	movs	r3, #2
 800baf0:	75fb      	strb	r3, [r7, #23]
      break;
 800baf2:	e03b      	b.n	800bb6c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2234      	movs	r2, #52	; 0x34
 800baf8:	fb02 f303 	mul.w	r3, r2, r3
 800bafc:	3398      	adds	r3, #152	; 0x98
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	4413      	add	r3, r2
 800bb02:	1d1a      	adds	r2, r3, #4
 800bb04:	78fb      	ldrb	r3, [r7, #3]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fd52 	bl	800c5b2 <USBH_MSC_SCSI_RequestSense>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d113      	bne.n	800bb40 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	2134      	movs	r1, #52	; 0x34
 800bb1e:	fb01 f303 	mul.w	r3, r1, r3
 800bb22:	4413      	add	r3, r2
 800bb24:	3390      	adds	r3, #144	; 0x90
 800bb26:	2201      	movs	r2, #1
 800bb28:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	2134      	movs	r1, #52	; 0x34
 800bb30:	fb01 f303 	mul.w	r3, r1, r3
 800bb34:	4413      	add	r3, r2
 800bb36:	3391      	adds	r3, #145	; 0x91
 800bb38:	2202      	movs	r2, #2
 800bb3a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d014      	beq.n	800bb70 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d111      	bne.n	800bb70 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	2134      	movs	r1, #52	; 0x34
 800bb52:	fb01 f303 	mul.w	r3, r1, r3
 800bb56:	4413      	add	r3, r2
 800bb58:	3390      	adds	r3, #144	; 0x90
 800bb5a:	2208      	movs	r2, #8
 800bb5c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb62:	e005      	b.n	800bb70 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800bb64:	bf00      	nop
 800bb66:	e004      	b.n	800bb72 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb68:	bf00      	nop
 800bb6a:	e002      	b.n	800bb72 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb6c:	bf00      	nop
 800bb6e:	e000      	b.n	800bb72 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bb70:	bf00      	nop

  }
  return error;
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b0b      	cmp	r3, #11
 800bb9a:	d10c      	bne.n	800bbb6 <USBH_MSC_UnitIsReady+0x3a>
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	2134      	movs	r1, #52	; 0x34
 800bba2:	fb01 f303 	mul.w	r3, r1, r3
 800bba6:	4413      	add	r3, r2
 800bba8:	3391      	adds	r3, #145	; 0x91
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d102      	bne.n	800bbb6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	73fb      	strb	r3, [r7, #15]
 800bbb4:	e001      	b.n	800bbba <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b0b      	cmp	r3, #11
 800bbe8:	d10d      	bne.n	800bc06 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bbea:	7afb      	ldrb	r3, [r7, #11]
 800bbec:	2234      	movs	r2, #52	; 0x34
 800bbee:	fb02 f303 	mul.w	r3, r2, r3
 800bbf2:	3390      	adds	r3, #144	; 0x90
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	2234      	movs	r2, #52	; 0x34
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f005 f889 	bl	8010d14 <memcpy>
    return USBH_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	e000      	b.n	800bc08 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bc06:	2302      	movs	r3, #2
  }
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	607a      	str	r2, [r7, #4]
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00e      	beq.n	800bc54 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bc3c:	2b0b      	cmp	r3, #11
 800bc3e:	d109      	bne.n	800bc54 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	2134      	movs	r1, #52	; 0x34
 800bc46:	fb01 f303 	mul.w	r3, r1, r3
 800bc4a:	4413      	add	r3, r2
 800bc4c:	3390      	adds	r3, #144	; 0x90
 800bc4e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d001      	beq.n	800bc58 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bc54:	2302      	movs	r3, #2
 800bc56:	e040      	b.n	800bcda <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2206      	movs	r2, #6
 800bc5c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	2134      	movs	r1, #52	; 0x34
 800bc64:	fb01 f303 	mul.w	r3, r1, r3
 800bc68:	4413      	add	r3, r2
 800bc6a:	3390      	adds	r3, #144	; 0x90
 800bc6c:	2206      	movs	r2, #6
 800bc6e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bc70:	7afb      	ldrb	r3, [r7, #11]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bc7a:	7af9      	ldrb	r1, [r7, #11]
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 fd78 	bl	800c77a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc90:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bc92:	e016      	b.n	800bcc2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	1ad2      	subs	r2, r2, r3
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	f242 7110 	movw	r1, #10000	; 0x2710
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d805      	bhi.n	800bcb8 <USBH_MSC_Read+0xa8>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e00b      	b.n	800bcda <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f7ff fe89 	bl	800b9de <USBH_MSC_RdWrProcess>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d0e0      	beq.n	800bc94 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b088      	sub	sp, #32
 800bce6:	af02      	add	r7, sp, #8
 800bce8:	60f8      	str	r0, [r7, #12]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00e      	beq.n	800bd26 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bd0e:	2b0b      	cmp	r3, #11
 800bd10:	d109      	bne.n	800bd26 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bd12:	7afb      	ldrb	r3, [r7, #11]
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	2134      	movs	r1, #52	; 0x34
 800bd18:	fb01 f303 	mul.w	r3, r1, r3
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3390      	adds	r3, #144	; 0x90
 800bd20:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d001      	beq.n	800bd2a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bd26:	2302      	movs	r3, #2
 800bd28:	e040      	b.n	800bdac <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2207      	movs	r2, #7
 800bd2e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	2134      	movs	r1, #52	; 0x34
 800bd36:	fb01 f303 	mul.w	r3, r1, r3
 800bd3a:	4413      	add	r3, r2
 800bd3c:	3390      	adds	r3, #144	; 0x90
 800bd3e:	2207      	movs	r2, #7
 800bd40:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bd42:	7afb      	ldrb	r3, [r7, #11]
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bd4c:	7af9      	ldrb	r1, [r7, #11]
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 fca4 	bl	800c6a4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd62:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bd64:	e016      	b.n	800bd94 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	f242 7110 	movw	r1, #10000	; 0x2710
 800bd76:	fb01 f303 	mul.w	r3, r1, r3
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d805      	bhi.n	800bd8a <USBH_MSC_Write+0xa8>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d104      	bne.n	800bd94 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bd90:	2302      	movs	r3, #2
 800bd92:	e00b      	b.n	800bdac <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bd94:	7afb      	ldrb	r3, [r7, #11]
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fe20 	bl	800b9de <USBH_MSC_RdWrProcess>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d0e0      	beq.n	800bd66 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2201      	movs	r2, #1
 800bda8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2221      	movs	r2, #33	; 0x21
 800bdc0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	22ff      	movs	r2, #255	; 0xff
 800bdc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800bdda:	2200      	movs	r2, #0
 800bddc:	2100      	movs	r1, #0
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 fdab 	bl	800d93a <USBH_CtlReq>
 800bde4:	4603      	mov	r3, r0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	22a1      	movs	r2, #161	; 0xa1
 800bdfc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	22fe      	movs	r2, #254	; 0xfe
 800be02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800be16:	2201      	movs	r2, #1
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f001 fd8d 	bl	800d93a <USBH_CtlReq>
 800be20:	4603      	mov	r3, r0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4a09      	ldr	r2, [pc, #36]	; (800be68 <USBH_MSC_BOT_Init+0x3c>)
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4a09      	ldr	r2, [pc, #36]	; (800be6c <USBH_MSC_BOT_Init+0x40>)
 800be48:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	43425355 	.word	0x43425355
 800be6c:	20304050 	.word	0x20304050

0800be70 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800be7c:	2301      	movs	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800be80:	2301      	movs	r3, #1
 800be82:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800be84:	2301      	movs	r3, #1
 800be86:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be88:	2300      	movs	r3, #0
 800be8a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bea0:	3b01      	subs	r3, #1
 800bea2:	2b0a      	cmp	r3, #10
 800bea4:	f200 819e 	bhi.w	800c1e4 <USBH_MSC_BOT_Process+0x374>
 800bea8:	a201      	add	r2, pc, #4	; (adr r2, 800beb0 <USBH_MSC_BOT_Process+0x40>)
 800beaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beae:	bf00      	nop
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	0800bf05 	.word	0x0800bf05
 800beb8:	0800bf6f 	.word	0x0800bf6f
 800bebc:	0800bf8d 	.word	0x0800bf8d
 800bec0:	0800c011 	.word	0x0800c011
 800bec4:	0800c033 	.word	0x0800c033
 800bec8:	0800c0cb 	.word	0x0800c0cb
 800becc:	0800c0e7 	.word	0x0800c0e7
 800bed0:	0800c139 	.word	0x0800c139
 800bed4:	0800c169 	.word	0x0800c169
 800bed8:	0800c1cb 	.word	0x0800c1cb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	78fa      	ldrb	r2, [r7, #3]
 800bee0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	795b      	ldrb	r3, [r3, #5]
 800bef6:	2201      	movs	r2, #1
 800bef8:	9200      	str	r2, [sp, #0]
 800befa:	221f      	movs	r2, #31
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 ff2a 	bl	800dd56 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bf02:	e17e      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	795b      	ldrb	r3, [r3, #5]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f004 fde4 	bl	8010ad8 <USBH_LL_GetURBState>
 800bf10:	4603      	mov	r3, r0
 800bf12:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf14:	7d3b      	ldrb	r3, [r7, #20]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d118      	bne.n	800bf4c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00f      	beq.n	800bf42 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bf28:	b25b      	sxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	da04      	bge.n	800bf38 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	2203      	movs	r2, #3
 800bf32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf36:	e157      	b.n	800c1e8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	2205      	movs	r2, #5
 800bf3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf40:	e152      	b.n	800c1e8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2207      	movs	r2, #7
 800bf46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf4a:	e14d      	b.n	800c1e8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf4c:	7d3b      	ldrb	r3, [r7, #20]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d104      	bne.n	800bf5c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf5a:	e145      	b.n	800c1e8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bf5c:	7d3b      	ldrb	r3, [r7, #20]
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	f040 8142 	bne.w	800c1e8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	220a      	movs	r2, #10
 800bf68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bf6c:	e13c      	b.n	800c1e8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	895a      	ldrh	r2, [r3, #10]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	791b      	ldrb	r3, [r3, #4]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f001 ff0f 	bl	800dda0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2204      	movs	r2, #4
 800bf86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800bf8a:	e13a      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	791b      	ldrb	r3, [r3, #4]
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f004 fda0 	bl	8010ad8 <USBH_LL_GetURBState>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bf9c:	7d3b      	ldrb	r3, [r7, #20]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d12d      	bne.n	800bffe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	8952      	ldrh	r2, [r2, #10]
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d910      	bls.n	800bfd0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	8952      	ldrh	r2, [r2, #10]
 800bfb8:	441a      	add	r2, r3
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	8952      	ldrh	r2, [r2, #10]
 800bfc8:	1a9a      	subs	r2, r3, r2
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	65da      	str	r2, [r3, #92]	; 0x5c
 800bfce:	e002      	b.n	800bfd6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	895a      	ldrh	r2, [r3, #10]
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	791b      	ldrb	r3, [r3, #4]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 fed7 	bl	800dda0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800bff2:	e0fb      	b.n	800c1ec <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	2207      	movs	r2, #7
 800bff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bffc:	e0f6      	b.n	800c1ec <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800bffe:	7d3b      	ldrb	r3, [r7, #20]
 800c000:	2b05      	cmp	r3, #5
 800c002:	f040 80f3 	bne.w	800c1ec <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2209      	movs	r2, #9
 800c00a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c00e:	e0ed      	b.n	800c1ec <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	891a      	ldrh	r2, [r3, #8]
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	795b      	ldrb	r3, [r3, #5]
 800c01e:	2001      	movs	r0, #1
 800c020:	9000      	str	r0, [sp, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 fe97 	bl	800dd56 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2206      	movs	r2, #6
 800c02c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c030:	e0e7      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	795b      	ldrb	r3, [r3, #5]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f004 fd4d 	bl	8010ad8 <USBH_LL_GetURBState>
 800c03e:	4603      	mov	r3, r0
 800c040:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c042:	7d3b      	ldrb	r3, [r7, #20]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d12f      	bne.n	800c0a8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	8912      	ldrh	r2, [r2, #8]
 800c050:	4293      	cmp	r3, r2
 800c052:	d910      	bls.n	800c076 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	8912      	ldrh	r2, [r2, #8]
 800c05e:	441a      	add	r2, r3
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	8912      	ldrh	r2, [r2, #8]
 800c06e:	1a9a      	subs	r2, r3, r2
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	65da      	str	r2, [r3, #92]	; 0x5c
 800c074:	e002      	b.n	800c07c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2200      	movs	r2, #0
 800c07a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00c      	beq.n	800c09e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	891a      	ldrh	r2, [r3, #8]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	795b      	ldrb	r3, [r3, #5]
 800c092:	2001      	movs	r0, #1
 800c094:	9000      	str	r0, [sp, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 fe5d 	bl	800dd56 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c09c:	e0a8      	b.n	800c1f0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0a6:	e0a3      	b.n	800c1f0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c0a8:	7d3b      	ldrb	r3, [r7, #20]
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d104      	bne.n	800c0b8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	2205      	movs	r2, #5
 800c0b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0b6:	e09b      	b.n	800c1f0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c0b8:	7d3b      	ldrb	r3, [r7, #20]
 800c0ba:	2b05      	cmp	r3, #5
 800c0bc:	f040 8098 	bne.w	800c1f0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	220a      	movs	r2, #10
 800c0c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0c8:	e092      	b.n	800c1f0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	791b      	ldrb	r3, [r3, #4]
 800c0d4:	220d      	movs	r2, #13
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 fe62 	bl	800dda0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	2208      	movs	r2, #8
 800c0e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0e4:	e08d      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	791b      	ldrb	r3, [r3, #4]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f004 fcf3 	bl	8010ad8 <USBH_LL_GetURBState>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c0f6:	7d3b      	ldrb	r3, [r7, #20]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d115      	bne.n	800c128 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f8a9 	bl	800c264 <USBH_MSC_DecodeCSW>
 800c112:	4603      	mov	r3, r0
 800c114:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c116:	7d7b      	ldrb	r3, [r7, #21]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d102      	bne.n	800c122 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c120:	e068      	b.n	800c1f4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c122:	2302      	movs	r3, #2
 800c124:	75fb      	strb	r3, [r7, #23]
      break;
 800c126:	e065      	b.n	800c1f4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c128:	7d3b      	ldrb	r3, [r7, #20]
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d162      	bne.n	800c1f4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2209      	movs	r2, #9
 800c132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c136:	e05d      	b.n	800c1f4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	2200      	movs	r2, #0
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f864 	bl	800c20c <USBH_MSC_BOT_Abort>
 800c144:	4603      	mov	r3, r0
 800c146:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c148:	7dbb      	ldrb	r3, [r7, #22]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	2207      	movs	r2, #7
 800c152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c156:	e04f      	b.n	800c1f8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c158:	7dbb      	ldrb	r3, [r7, #22]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d14c      	bne.n	800c1f8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	220b      	movs	r2, #11
 800c162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c166:	e047      	b.n	800c1f8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	2201      	movs	r2, #1
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f84c 	bl	800c20c <USBH_MSC_BOT_Abort>
 800c174:	4603      	mov	r3, r0
 800c176:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c178:	7dbb      	ldrb	r3, [r7, #22]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d11d      	bne.n	800c1ba <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	795b      	ldrb	r3, [r3, #5]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f004 fd04 	bl	8010b92 <USBH_LL_GetToggle>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	7959      	ldrb	r1, [r3, #5]
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	f1c3 0301 	rsb	r3, r3, #1
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	461a      	mov	r2, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f004 fcc5 	bl	8010b2c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	791b      	ldrb	r3, [r3, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f004 fcbe 	bl	8010b2c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2209      	movs	r2, #9
 800c1b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c1b8:	e020      	b.n	800c1fc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c1ba:	7dbb      	ldrb	r3, [r7, #22]
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d11d      	bne.n	800c1fc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	220b      	movs	r2, #11
 800c1c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c1c8:	e018      	b.n	800c1fc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fdf2 	bl	800bdb4 <USBH_MSC_BOT_REQ_Reset>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d112      	bne.n	800c200 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c1e2:	e00d      	b.n	800c200 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c1e4:	bf00      	nop
 800c1e6:	e00c      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1e8:	bf00      	nop
 800c1ea:	e00a      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1ec:	bf00      	nop
 800c1ee:	e008      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1f0:	bf00      	nop
 800c1f2:	e006      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1f4:	bf00      	nop
 800c1f6:	e004      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1f8:	bf00      	nop
 800c1fa:	e002      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c1fc:	bf00      	nop
 800c1fe:	e000      	b.n	800c202 <USBH_MSC_BOT_Process+0x392>
      break;
 800c200:	bf00      	nop
  }
  return status;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
 800c218:	4613      	mov	r3, r2
 800c21a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c21c:	2302      	movs	r3, #2
 800c21e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c22a:	78bb      	ldrb	r3, [r7, #2]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <USBH_MSC_BOT_Abort+0x2a>
 800c230:	2b01      	cmp	r3, #1
 800c232:	d009      	beq.n	800c248 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c234:	e011      	b.n	800c25a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	79db      	ldrb	r3, [r3, #7]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 f99c 	bl	800d57a <USBH_ClrFeature>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	e008      	b.n	800c25a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	799b      	ldrb	r3, [r3, #6]
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 f993 	bl	800d57a <USBH_ClrFeature>
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]
      break;
 800c258:	bf00      	nop
  }
  return status;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c276:	2301      	movs	r3, #1
 800c278:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	791b      	ldrb	r3, [r3, #4]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f004 fb97 	bl	80109b4 <USBH_LL_GetLastXferSize>
 800c286:	4603      	mov	r3, r0
 800c288:	2b0d      	cmp	r3, #13
 800c28a:	d002      	beq.n	800c292 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c28c:	2302      	movs	r3, #2
 800c28e:	73fb      	strb	r3, [r7, #15]
 800c290:	e024      	b.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c296:	4a14      	ldr	r2, [pc, #80]	; (800c2e8 <USBH_MSC_DecodeCSW+0x84>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d11d      	bne.n	800c2d8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d119      	bne.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d102      	bne.n	800c2b8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
 800c2b6:	e011      	b.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d102      	bne.n	800c2c8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	73fb      	strb	r3, [r7, #15]
 800c2c6:	e009      	b.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d104      	bne.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	73fb      	strb	r3, [r7, #15]
 800c2d6:	e001      	b.n	800c2dc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c2d8:	2302      	movs	r3, #2
 800c2da:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	53425355 	.word	0x53425355

0800c2ec <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c302:	69db      	ldr	r3, [r3, #28]
 800c304:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d002      	beq.n	800c316 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c310:	2b02      	cmp	r3, #2
 800c312:	d021      	beq.n	800c358 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c314:	e028      	b.n	800c368 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	220a      	movs	r2, #10
 800c328:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	3363      	adds	r3, #99	; 0x63
 800c330:	2210      	movs	r2, #16
 800c332:	2100      	movs	r1, #0
 800c334:	4618      	mov	r0, r3
 800c336:	f004 fcfb 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2202      	movs	r2, #2
 800c34e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c352:	2301      	movs	r3, #1
 800c354:	73fb      	strb	r3, [r7, #15]
      break;
 800c356:	e007      	b.n	800c368 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c358:	78fb      	ldrb	r3, [r7, #3]
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff fd87 	bl	800be70 <USBH_MSC_BOT_Process>
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
      break;
 800c366:	bf00      	nop
  }

  return error;
 800c368:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b086      	sub	sp, #24
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	460b      	mov	r3, r1
 800c37c:	607a      	str	r2, [r7, #4]
 800c37e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c380:	2301      	movs	r3, #1
 800c382:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c394:	2b01      	cmp	r3, #1
 800c396:	d002      	beq.n	800c39e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d027      	beq.n	800c3ec <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c39c:	e05f      	b.n	800c45e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2208      	movs	r2, #8
 800c3a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2280      	movs	r2, #128	; 0x80
 800c3a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	220a      	movs	r2, #10
 800c3b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	3363      	adds	r3, #99	; 0x63
 800c3b8:	2210      	movs	r2, #16
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f004 fcb7 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	2225      	movs	r2, #37	; 0x25
 800c3c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f103 0210 	add.w	r2, r3, #16
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ea:	e038      	b.n	800c45e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff fd3d 	bl	800be70 <USBH_MSC_BOT_Process>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d12d      	bne.n	800c45c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c406:	3303      	adds	r3, #3
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c412:	3302      	adds	r3, #2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	021b      	lsls	r3, r3, #8
 800c418:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c420:	3301      	adds	r3, #1
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c426:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	061b      	lsls	r3, r3, #24
 800c432:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c43e:	3307      	adds	r3, #7
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	b29a      	uxth	r2, r3
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c44a:	3306      	adds	r3, #6
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	021b      	lsls	r3, r3, #8
 800c452:	b29b      	uxth	r3, r3
 800c454:	4313      	orrs	r3, r2
 800c456:	b29a      	uxth	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	809a      	strh	r2, [r3, #4]
      break;
 800c45c:	bf00      	nop
  }

  return error;
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	460b      	mov	r3, r1
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c476:	2302      	movs	r3, #2
 800c478:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d002      	beq.n	800c494 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d03d      	beq.n	800c50e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c492:	e089      	b.n	800c5a8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2224      	movs	r2, #36	; 0x24
 800c498:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2280      	movs	r2, #128	; 0x80
 800c49e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	220a      	movs	r2, #10
 800c4a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	3363      	adds	r3, #99	; 0x63
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f004 fc3c 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2212      	movs	r2, #18
 800c4bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c4c0:	7afb      	ldrb	r3, [r7, #11]
 800c4c2:	015b      	lsls	r3, r3, #5
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	2224      	movs	r2, #36	; 0x24
 800c4e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	f103 0210 	add.w	r2, r3, #16
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c508:	2301      	movs	r3, #1
 800c50a:	75fb      	strb	r3, [r7, #23]
      break;
 800c50c:	e04c      	b.n	800c5a8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	4619      	mov	r1, r3
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f7ff fcac 	bl	800be70 <USBH_MSC_BOT_Process>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d141      	bne.n	800c5a6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c522:	2222      	movs	r2, #34	; 0x22
 800c524:	2100      	movs	r1, #0
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f004 fc02 	bl	8010d30 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	f003 031f 	and.w	r3, r3, #31
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	095b      	lsrs	r3, r3, #5
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c554:	3301      	adds	r3, #1
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	b25b      	sxtb	r3, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	da03      	bge.n	800c566 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	709a      	strb	r2, [r3, #2]
 800c564:	e002      	b.n	800c56c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	1cd8      	adds	r0, r3, #3
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	3308      	adds	r3, #8
 800c578:	2208      	movs	r2, #8
 800c57a:	4619      	mov	r1, r3
 800c57c:	f004 fbca 	bl	8010d14 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f103 000c 	add.w	r0, r3, #12
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c58c:	3310      	adds	r3, #16
 800c58e:	2210      	movs	r2, #16
 800c590:	4619      	mov	r1, r3
 800c592:	f004 fbbf 	bl	8010d14 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	331d      	adds	r3, #29
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c5a0:	3220      	adds	r2, #32
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	601a      	str	r2, [r3, #0]
      break;
 800c5a6:	bf00      	nop
  }

  return error;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b086      	sub	sp, #24
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	607a      	str	r2, [r7, #4]
 800c5be:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d002      	beq.n	800c5de <USBH_MSC_SCSI_RequestSense+0x2c>
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d03d      	beq.n	800c658 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c5dc:	e05d      	b.n	800c69a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	220e      	movs	r2, #14
 800c5e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	2280      	movs	r2, #128	; 0x80
 800c5e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	3363      	adds	r3, #99	; 0x63
 800c5f8:	2210      	movs	r2, #16
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 fb97 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2203      	movs	r2, #3
 800c606:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c60a:	7afb      	ldrb	r3, [r7, #11]
 800c60c:	015b      	lsls	r3, r3, #5
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	220e      	movs	r2, #14
 800c62a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2202      	movs	r2, #2
 800c642:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f103 0210 	add.w	r2, r3, #16
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c652:	2301      	movs	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
      break;
 800c656:	e020      	b.n	800c69a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	4619      	mov	r1, r3
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fc07 	bl	800be70 <USBH_MSC_BOT_Process>
 800c662:	4603      	mov	r3, r0
 800c664:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d115      	bne.n	800c698 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c672:	3302      	adds	r3, #2
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 030f 	and.w	r3, r3, #15
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c686:	7b1a      	ldrb	r2, [r3, #12]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c692:	7b5a      	ldrb	r2, [r3, #13]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	709a      	strb	r2, [r3, #2]
      break;
 800c698:	bf00      	nop
  }

  return error;
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3718      	adds	r7, #24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	607a      	str	r2, [r7, #4]
 800c6ae:	603b      	str	r3, [r7, #0]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6be:	69db      	ldr	r3, [r3, #28]
 800c6c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d002      	beq.n	800c6d2 <USBH_MSC_SCSI_Write+0x2e>
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d047      	beq.n	800c760 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c6d0:	e04e      	b.n	800c770 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	fb03 f202 	mul.w	r2, r3, r2
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	220a      	movs	r2, #10
 800c6f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	3363      	adds	r3, #99	; 0x63
 800c6f8:	2210      	movs	r2, #16
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f004 fb17 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	222a      	movs	r2, #42	; 0x2a
 800c706:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c70a:	79fa      	ldrb	r2, [r7, #7]
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c712:	79ba      	ldrb	r2, [r7, #6]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c71a:	797a      	ldrb	r2, [r7, #5]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c722:	1d3b      	adds	r3, r7, #4
 800c724:	781a      	ldrb	r2, [r3, #0]
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c72c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c736:	f107 0320 	add.w	r3, r7, #32
 800c73a:	781a      	ldrb	r2, [r3, #0]
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2202      	movs	r2, #2
 800c74e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c75a:	2301      	movs	r3, #1
 800c75c:	75fb      	strb	r3, [r7, #23]
      break;
 800c75e:	e007      	b.n	800c770 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c760:	7afb      	ldrb	r3, [r7, #11]
 800c762:	4619      	mov	r1, r3
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7ff fb83 	bl	800be70 <USBH_MSC_BOT_Process>
 800c76a:	4603      	mov	r3, r0
 800c76c:	75fb      	strb	r3, [r7, #23]
      break;
 800c76e:	bf00      	nop
  }

  return error;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
 800c786:	460b      	mov	r3, r1
 800c788:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c78a:	2302      	movs	r3, #2
 800c78c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d002      	beq.n	800c7a8 <USBH_MSC_SCSI_Read+0x2e>
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d047      	beq.n	800c836 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c7a6:	e04e      	b.n	800c846 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	fb03 f202 	mul.w	r2, r3, r2
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2280      	movs	r2, #128	; 0x80
 800c7be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	220a      	movs	r2, #10
 800c7c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	3363      	adds	r3, #99	; 0x63
 800c7ce:	2210      	movs	r2, #16
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f004 faac 	bl	8010d30 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2228      	movs	r2, #40	; 0x28
 800c7dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c7e0:	79fa      	ldrb	r2, [r7, #7]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c7e8:	79ba      	ldrb	r2, [r7, #6]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c7f0:	797a      	ldrb	r2, [r7, #5]
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c7f8:	1d3b      	adds	r3, r7, #4
 800c7fa:	781a      	ldrb	r2, [r3, #0]
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c802:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c80c:	f107 0320 	add.w	r3, r7, #32
 800c810:	781a      	ldrb	r2, [r3, #0]
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	2202      	movs	r2, #2
 800c824:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c830:	2301      	movs	r3, #1
 800c832:	75fb      	strb	r3, [r7, #23]
      break;
 800c834:	e007      	b.n	800c846 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c836:	7afb      	ldrb	r3, [r7, #11]
 800c838:	4619      	mov	r1, r3
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fb18 	bl	800be70 <USBH_MSC_BOT_Process>
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
      break;
 800c844:	bf00      	nop
  }

  return error;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	4613      	mov	r3, r2
 800c85c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c864:	2302      	movs	r3, #2
 800c866:	e029      	b.n	800c8bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	79fa      	ldrb	r2, [r7, #7]
 800c86c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 f81f 	bl	800c8c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f003 ffc3 	bl	8010840 <USBH_LL_Init>

  return USBH_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	e009      	b.n	800c8ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	33e0      	adds	r3, #224	; 0xe0
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b0e      	cmp	r3, #14
 800c8ee:	d9f2      	bls.n	800c8d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	e009      	b.n	800c90a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c900:	2200      	movs	r2, #0
 800c902:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	3301      	adds	r3, #1
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c910:	d3f1      	bcc.n	800c8f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2240      	movs	r2, #64	; 0x40
 800c936:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d016      	beq.n	800c9ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10e      	bne.n	800c9a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c990:	1c59      	adds	r1, r3, #1
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	33de      	adds	r3, #222	; 0xde
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]
 800c9a6:	e004      	b.n	800c9b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	73fb      	strb	r3, [r7, #15]
 800c9ac:	e001      	b.n	800c9b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c9d6:	78fa      	ldrb	r2, [r7, #3]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d204      	bcs.n	800c9e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	78fa      	ldrb	r2, [r7, #3]
 800c9e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c9e4:	e001      	b.n	800c9ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	4608      	mov	r0, r1
 800ca02:	4611      	mov	r1, r2
 800ca04:	461a      	mov	r2, r3
 800ca06:	4603      	mov	r3, r0
 800ca08:	70fb      	strb	r3, [r7, #3]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70bb      	strb	r3, [r7, #2]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ca20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ca22:	e025      	b.n	800ca70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	221a      	movs	r2, #26
 800ca28:	fb02 f303 	mul.w	r3, r2, r3
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4413      	add	r3, r2
 800ca32:	3302      	adds	r3, #2
 800ca34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	795b      	ldrb	r3, [r3, #5]
 800ca3a:	78fa      	ldrb	r2, [r7, #3]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d002      	beq.n	800ca46 <USBH_FindInterface+0x4e>
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	2bff      	cmp	r3, #255	; 0xff
 800ca44:	d111      	bne.n	800ca6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ca4a:	78ba      	ldrb	r2, [r7, #2]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d002      	beq.n	800ca56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca50:	78bb      	ldrb	r3, [r7, #2]
 800ca52:	2bff      	cmp	r3, #255	; 0xff
 800ca54:	d109      	bne.n	800ca6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca5a:	787a      	ldrb	r2, [r7, #1]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d002      	beq.n	800ca66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca60:	787b      	ldrb	r3, [r7, #1]
 800ca62:	2bff      	cmp	r3, #255	; 0xff
 800ca64:	d101      	bne.n	800ca6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	e006      	b.n	800ca78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d9d6      	bls.n	800ca24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ca76:	23ff      	movs	r3, #255	; 0xff
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f003 ff19 	bl	80108c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ca92:	2101      	movs	r1, #1
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f004 f832 	bl	8010afe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b088      	sub	sp, #32
 800caa8:	af04      	add	r7, sp, #16
 800caaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800caac:	2302      	movs	r3, #2
 800caae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d102      	bne.n	800cac6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2203      	movs	r2, #3
 800cac4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b0b      	cmp	r3, #11
 800cace:	f200 81b3 	bhi.w	800ce38 <USBH_Process+0x394>
 800cad2:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <USBH_Process+0x34>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800cb09 	.word	0x0800cb09
 800cadc:	0800cb3b 	.word	0x0800cb3b
 800cae0:	0800cba3 	.word	0x0800cba3
 800cae4:	0800cdd3 	.word	0x0800cdd3
 800cae8:	0800ce39 	.word	0x0800ce39
 800caec:	0800cc47 	.word	0x0800cc47
 800caf0:	0800cd79 	.word	0x0800cd79
 800caf4:	0800cc7d 	.word	0x0800cc7d
 800caf8:	0800cc9d 	.word	0x0800cc9d
 800cafc:	0800ccbd 	.word	0x0800ccbd
 800cb00:	0800cceb 	.word	0x0800cceb
 800cb04:	0800cdbb 	.word	0x0800cdbb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 8193 	beq.w	800ce3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cb1c:	20c8      	movs	r0, #200	; 0xc8
 800cb1e:	f004 f86b 	bl	8010bf8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f003 ff2b 	bl	801097e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cb38:	e180      	b.n	800ce3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d107      	bne.n	800cb54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cb52:	e182      	b.n	800ce5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cb5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb5e:	d914      	bls.n	800cb8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cb66:	3301      	adds	r3, #1
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d903      	bls.n	800cb82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	220d      	movs	r2, #13
 800cb7e:	701a      	strb	r2, [r3, #0]
      break;
 800cb80:	e16b      	b.n	800ce5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
      break;
 800cb88:	e167      	b.n	800ce5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cb90:	f103 020a 	add.w	r2, r3, #10
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cb9a:	200a      	movs	r0, #10
 800cb9c:	f004 f82c 	bl	8010bf8 <USBH_Delay>
      break;
 800cba0:	e15b      	b.n	800ce5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbb2:	2104      	movs	r1, #4
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cbb8:	2064      	movs	r0, #100	; 0x64
 800cbba:	f004 f81d 	bl	8010bf8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f003 feb6 	bl	8010930 <USBH_LL_GetSpeed>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2205      	movs	r2, #5
 800cbd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 f92f 	bl	800de3a <USBH_AllocPipe>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cbe4:	2180      	movs	r1, #128	; 0x80
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f001 f927 	bl	800de3a <USBH_AllocPipe>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7919      	ldrb	r1, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc08:	b292      	uxth	r2, r2
 800cc0a:	9202      	str	r2, [sp, #8]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	9201      	str	r2, [sp, #4]
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4603      	mov	r3, r0
 800cc14:	2280      	movs	r2, #128	; 0x80
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 f8e0 	bl	800dddc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	7959      	ldrb	r1, [r3, #5]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cc30:	b292      	uxth	r2, r2
 800cc32:	9202      	str	r2, [sp, #8]
 800cc34:	2200      	movs	r2, #0
 800cc36:	9201      	str	r2, [sp, #4]
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f001 f8cc 	bl	800dddc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc44:	e109      	b.n	800ce5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f90c 	bl	800ce64 <USBH_HandleEnum>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f040 80f3 	bne.w	800ce40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d103      	bne.n	800cc74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2208      	movs	r2, #8
 800cc70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cc72:	e0e5      	b.n	800ce40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2207      	movs	r2, #7
 800cc78:	701a      	strb	r2, [r3, #0]
      break;
 800cc7a:	e0e1      	b.n	800ce40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80de 	beq.w	800ce44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc8e:	2101      	movs	r1, #1
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2208      	movs	r2, #8
 800cc98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cc9a:	e0d3      	b.n	800ce44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	4619      	mov	r1, r3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fc20 	bl	800d4ec <USBH_SetCfg>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 80ca 	bne.w	800ce48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2209      	movs	r2, #9
 800ccb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ccba:	e0c5      	b.n	800ce48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00b      	beq.n	800cce2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ccca:	2101      	movs	r1, #1
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fc30 	bl	800d532 <USBH_SetFeature>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 80b9 	bne.w	800ce4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	220a      	movs	r2, #10
 800ccde:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cce0:	e0b4      	b.n	800ce4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	220a      	movs	r2, #10
 800cce6:	701a      	strb	r2, [r3, #0]
      break;
 800cce8:	e0b0      	b.n	800ce4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 80ad 	beq.w	800ce50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]
 800cd02:	e016      	b.n	800cd32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cd04:	7bfa      	ldrb	r2, [r7, #15]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	32de      	adds	r2, #222	; 0xde
 800cd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0e:	791a      	ldrb	r2, [r3, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d108      	bne.n	800cd2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cd1a:	7bfa      	ldrb	r2, [r7, #15]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	32de      	adds	r2, #222	; 0xde
 800cd20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cd2a:	e005      	b.n	800cd38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	73fb      	strb	r3, [r7, #15]
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0e5      	beq.n	800cd04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d016      	beq.n	800cd70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	4798      	blx	r3
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d109      	bne.n	800cd68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2206      	movs	r2, #6
 800cd58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd60:	2103      	movs	r1, #3
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cd66:	e073      	b.n	800ce50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	220d      	movs	r2, #13
 800cd6c:	701a      	strb	r2, [r3, #0]
      break;
 800cd6e:	e06f      	b.n	800ce50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	220d      	movs	r2, #13
 800cd74:	701a      	strb	r2, [r3, #0]
      break;
 800cd76:	e06b      	b.n	800ce50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d017      	beq.n	800cdb2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	4798      	blx	r3
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d103      	bne.n	800cda2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	220b      	movs	r2, #11
 800cd9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cda0:	e058      	b.n	800ce54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d154      	bne.n	800ce54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	220d      	movs	r2, #13
 800cdae:	701a      	strb	r2, [r3, #0]
      break;
 800cdb0:	e050      	b.n	800ce54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	220d      	movs	r2, #13
 800cdb6:	701a      	strb	r2, [r3, #0]
      break;
 800cdb8:	e04c      	b.n	800ce54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d049      	beq.n	800ce58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	4798      	blx	r3
      }
      break;
 800cdd0:	e042      	b.n	800ce58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff fd72 	bl	800c8c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d009      	beq.n	800cdfe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce0e:	2105      	movs	r1, #5
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d107      	bne.n	800ce30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff fe2b 	bl	800ca84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ce2e:	e014      	b.n	800ce5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f003 fd47 	bl	80108c4 <USBH_LL_Start>
      break;
 800ce36:	e010      	b.n	800ce5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ce38:	bf00      	nop
 800ce3a:	e00e      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce3c:	bf00      	nop
 800ce3e:	e00c      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce40:	bf00      	nop
 800ce42:	e00a      	b.n	800ce5a <USBH_Process+0x3b6>
    break;
 800ce44:	bf00      	nop
 800ce46:	e008      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce48:	bf00      	nop
 800ce4a:	e006      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce4c:	bf00      	nop
 800ce4e:	e004      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce50:	bf00      	nop
 800ce52:	e002      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <USBH_Process+0x3b6>
      break;
 800ce58:	bf00      	nop
  }
  return USBH_OK;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af04      	add	r7, sp, #16
 800ce6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ce70:	2301      	movs	r3, #1
 800ce72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	785b      	ldrb	r3, [r3, #1]
 800ce78:	2b07      	cmp	r3, #7
 800ce7a:	f200 81c1 	bhi.w	800d200 <USBH_HandleEnum+0x39c>
 800ce7e:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <USBH_HandleEnum+0x20>)
 800ce80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce84:	0800cea5 	.word	0x0800cea5
 800ce88:	0800cf63 	.word	0x0800cf63
 800ce8c:	0800cfcd 	.word	0x0800cfcd
 800ce90:	0800d05b 	.word	0x0800d05b
 800ce94:	0800d0c5 	.word	0x0800d0c5
 800ce98:	0800d135 	.word	0x0800d135
 800ce9c:	0800d17b 	.word	0x0800d17b
 800cea0:	0800d1c1 	.word	0x0800d1c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cea4:	2108      	movs	r1, #8
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fa50 	bl	800d34c <USBH_Get_DevDesc>
 800ceac:	4603      	mov	r3, r0
 800ceae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ceb0:	7bbb      	ldrb	r3, [r7, #14]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d130      	bne.n	800cf18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	7919      	ldrb	r1, [r3, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ceda:	b292      	uxth	r2, r2
 800cedc:	9202      	str	r2, [sp, #8]
 800cede:	2200      	movs	r2, #0
 800cee0:	9201      	str	r2, [sp, #4]
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	4603      	mov	r3, r0
 800cee6:	2280      	movs	r2, #128	; 0x80
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 ff77 	bl	800dddc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7959      	ldrb	r1, [r3, #5]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf02:	b292      	uxth	r2, r2
 800cf04:	9202      	str	r2, [sp, #8]
 800cf06:	2200      	movs	r2, #0
 800cf08:	9201      	str	r2, [sp, #4]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2200      	movs	r2, #0
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 ff63 	bl	800dddc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf16:	e175      	b.n	800d204 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	f040 8172 	bne.w	800d204 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf26:	3301      	adds	r3, #1
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	d903      	bls.n	800cf42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	220d      	movs	r2, #13
 800cf3e:	701a      	strb	r2, [r3, #0]
      break;
 800cf40:	e160      	b.n	800d204 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	795b      	ldrb	r3, [r3, #5]
 800cf46:	4619      	mov	r1, r3
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 ff97 	bl	800de7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 ff91 	bl	800de7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	701a      	strb	r2, [r3, #0]
      break;
 800cf60:	e150      	b.n	800d204 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cf62:	2112      	movs	r1, #18
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f9f1 	bl	800d34c <USBH_Get_DevDesc>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf6e:	7bbb      	ldrb	r3, [r7, #14]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf7a:	e145      	b.n	800d208 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	f040 8142 	bne.w	800d208 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	b2da      	uxtb	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d903      	bls.n	800cfa6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	220d      	movs	r2, #13
 800cfa2:	701a      	strb	r2, [r3, #0]
      break;
 800cfa4:	e130      	b.n	800d208 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	795b      	ldrb	r3, [r3, #5]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 ff65 	bl	800de7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	791b      	ldrb	r3, [r3, #4]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 ff5f 	bl	800de7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	701a      	strb	r2, [r3, #0]
      break;
 800cfca:	e11d      	b.n	800d208 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cfcc:	2101      	movs	r1, #1
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fa68 	bl	800d4a4 <USBH_SetAddress>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d132      	bne.n	800d044 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cfde:	2002      	movs	r0, #2
 800cfe0:	f003 fe0a 	bl	8010bf8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2203      	movs	r2, #3
 800cff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	7919      	ldrb	r1, [r3, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d006:	b292      	uxth	r2, r2
 800d008:	9202      	str	r2, [sp, #8]
 800d00a:	2200      	movs	r2, #0
 800d00c:	9201      	str	r2, [sp, #4]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	4603      	mov	r3, r0
 800d012:	2280      	movs	r2, #128	; 0x80
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fee1 	bl	800dddc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	7959      	ldrb	r1, [r3, #5]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d02e:	b292      	uxth	r2, r2
 800d030:	9202      	str	r2, [sp, #8]
 800d032:	2200      	movs	r2, #0
 800d034:	9201      	str	r2, [sp, #4]
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	4603      	mov	r3, r0
 800d03a:	2200      	movs	r2, #0
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fecd 	bl	800dddc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d042:	e0e3      	b.n	800d20c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	2b03      	cmp	r3, #3
 800d048:	f040 80e0 	bne.w	800d20c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	220d      	movs	r2, #13
 800d050:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	705a      	strb	r2, [r3, #1]
      break;
 800d058:	e0d8      	b.n	800d20c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d05a:	2109      	movs	r1, #9
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f99d 	bl	800d39c <USBH_Get_CfgDesc>
 800d062:	4603      	mov	r3, r0
 800d064:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d066:	7bbb      	ldrb	r3, [r7, #14]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2204      	movs	r2, #4
 800d070:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d072:	e0cd      	b.n	800d210 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d074:	7bbb      	ldrb	r3, [r7, #14]
 800d076:	2b03      	cmp	r3, #3
 800d078:	f040 80ca 	bne.w	800d210 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d082:	3301      	adds	r3, #1
 800d084:	b2da      	uxtb	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d092:	2b03      	cmp	r3, #3
 800d094:	d903      	bls.n	800d09e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	220d      	movs	r2, #13
 800d09a:	701a      	strb	r2, [r3, #0]
      break;
 800d09c:	e0b8      	b.n	800d210 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	795b      	ldrb	r3, [r3, #5]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fee9 	bl	800de7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	791b      	ldrb	r3, [r3, #4]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fee3 	bl	800de7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	701a      	strb	r2, [r3, #0]
      break;
 800d0c2:	e0a5      	b.n	800d210 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f965 	bl	800d39c <USBH_Get_CfgDesc>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d103      	bne.n	800d0e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2205      	movs	r2, #5
 800d0e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0e2:	e097      	b.n	800d214 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	f040 8094 	bne.w	800d214 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d102:	2b03      	cmp	r3, #3
 800d104:	d903      	bls.n	800d10e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	220d      	movs	r2, #13
 800d10a:	701a      	strb	r2, [r3, #0]
      break;
 800d10c:	e082      	b.n	800d214 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	795b      	ldrb	r3, [r3, #5]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 feb1 	bl	800de7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	791b      	ldrb	r3, [r3, #4]
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 feab 	bl	800de7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
      break;
 800d132:	e06f      	b.n	800d214 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d019      	beq.n	800d172 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d14a:	23ff      	movs	r3, #255	; 0xff
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f949 	bl	800d3e4 <USBH_Get_StringDesc>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d156:	7bbb      	ldrb	r3, [r7, #14]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2206      	movs	r2, #6
 800d160:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d162:	e059      	b.n	800d218 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	2b03      	cmp	r3, #3
 800d168:	d156      	bne.n	800d218 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2206      	movs	r2, #6
 800d16e:	705a      	strb	r2, [r3, #1]
      break;
 800d170:	e052      	b.n	800d218 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2206      	movs	r2, #6
 800d176:	705a      	strb	r2, [r3, #1]
      break;
 800d178:	e04e      	b.n	800d218 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d180:	2b00      	cmp	r3, #0
 800d182:	d019      	beq.n	800d1b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d190:	23ff      	movs	r3, #255	; 0xff
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f926 	bl	800d3e4 <USBH_Get_StringDesc>
 800d198:	4603      	mov	r3, r0
 800d19a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d103      	bne.n	800d1aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2207      	movs	r2, #7
 800d1a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d1a8:	e038      	b.n	800d21c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1aa:	7bbb      	ldrb	r3, [r7, #14]
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d135      	bne.n	800d21c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2207      	movs	r2, #7
 800d1b4:	705a      	strb	r2, [r3, #1]
      break;
 800d1b6:	e031      	b.n	800d21c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2207      	movs	r2, #7
 800d1bc:	705a      	strb	r2, [r3, #1]
      break;
 800d1be:	e02d      	b.n	800d21c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d017      	beq.n	800d1fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1d6:	23ff      	movs	r3, #255	; 0xff
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f903 	bl	800d3e4 <USBH_Get_StringDesc>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d1ec:	e018      	b.n	800d220 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1ee:	7bbb      	ldrb	r3, [r7, #14]
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d115      	bne.n	800d220 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f8:	e012      	b.n	800d220 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d1fe:	e00f      	b.n	800d220 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d200:	bf00      	nop
 800d202:	e00e      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d204:	bf00      	nop
 800d206:	e00c      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d208:	bf00      	nop
 800d20a:	e00a      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d20c:	bf00      	nop
 800d20e:	e008      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d210:	bf00      	nop
 800d212:	e006      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d214:	bf00      	nop
 800d216:	e004      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d218:	bf00      	nop
 800d21a:	e002      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d21c:	bf00      	nop
 800d21e:	e000      	b.n	800d222 <USBH_HandleEnum+0x3be>
      break;
 800d220:	bf00      	nop
  }
  return Status;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d23e:	bf00      	nop
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f804 	bl	800d26e <USBH_HandleSof>
}
 800d266:	bf00      	nop
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b0b      	cmp	r3, #11
 800d27e:	d10a      	bne.n	800d296 <USBH_HandleSof+0x28>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	4798      	blx	r3
  }
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d2ae:	bf00      	nop
}
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b083      	sub	sp, #12
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d2ca:	bf00      	nop
}
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b083      	sub	sp, #12
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f003 fae8 	bl	80108fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	791b      	ldrb	r3, [r3, #4]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fda3 	bl	800de7c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	795b      	ldrb	r3, [r3, #5]
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fd9d 	bl	800de7c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af02      	add	r7, sp, #8
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	b29b      	uxth	r3, r3
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	4613      	mov	r3, r2
 800d366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d36a:	2100      	movs	r1, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f864 	bl	800d43a <USBH_GetDescriptor>
 800d372:	4603      	mov	r3, r0
 800d374:	73fb      	strb	r3, [r7, #15]
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d388:	78fa      	ldrb	r2, [r7, #3]
 800d38a:	b292      	uxth	r2, r2
 800d38c:	4619      	mov	r1, r3
 800d38e:	f000 f918 	bl	800d5c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d392:	7bfb      	ldrb	r3, [r7, #15]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	331c      	adds	r3, #28
 800d3ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d3ae:	887b      	ldrh	r3, [r7, #2]
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f83d 	bl	800d43a <USBH_GetDescriptor>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	72fb      	strb	r3, [r7, #11]
 800d3c4:	7afb      	ldrb	r3, [r7, #11]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d107      	bne.n	800d3da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d3d0:	887a      	ldrh	r2, [r7, #2]
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 f964 	bl	800d6a2 <USBH_ParseCfgDesc>
  }

  return status;
 800d3da:	7afb      	ldrb	r3, [r7, #11]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	72fb      	strb	r3, [r7, #11]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d3f8:	7afb      	ldrb	r3, [r7, #11]
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d400:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d408:	893b      	ldrh	r3, [r7, #8]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	460b      	mov	r3, r1
 800d40e:	2100      	movs	r1, #0
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f000 f812 	bl	800d43a <USBH_GetDescriptor>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d107      	bne.n	800d430 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d426:	893a      	ldrh	r2, [r7, #8]
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fa37 	bl	800d89e <USBH_ParseStringDesc>
  }

  return status;
 800d430:	7dfb      	ldrb	r3, [r7, #23]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	607b      	str	r3, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	72fb      	strb	r3, [r7, #11]
 800d448:	4613      	mov	r3, r2
 800d44a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	789b      	ldrb	r3, [r3, #2]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d11c      	bne.n	800d48e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d454:	7afb      	ldrb	r3, [r7, #11]
 800d456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2206      	movs	r2, #6
 800d464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	893a      	ldrh	r2, [r7, #8]
 800d46a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d46c:	893b      	ldrh	r3, [r7, #8]
 800d46e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d476:	d104      	bne.n	800d482 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f240 4209 	movw	r2, #1033	; 0x409
 800d47e:	829a      	strh	r2, [r3, #20]
 800d480:	e002      	b.n	800d488 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	8b3a      	ldrh	r2, [r7, #24]
 800d48c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d48e:	8b3b      	ldrh	r3, [r7, #24]
 800d490:	461a      	mov	r2, r3
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 fa50 	bl	800d93a <USBH_CtlReq>
 800d49a:	4603      	mov	r3, r0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	789b      	ldrb	r3, [r3, #2]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d10f      	bne.n	800d4d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2205      	movs	r2, #5
 800d4c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d4c4:	78fb      	ldrb	r3, [r7, #3]
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fa2c 	bl	800d93a <USBH_CtlReq>
 800d4e2:	4603      	mov	r3, r0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	789b      	ldrb	r3, [r3, #2]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d10e      	bne.n	800d51e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2209      	movs	r2, #9
 800d50a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	887a      	ldrh	r2, [r7, #2]
 800d510:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d51e:	2200      	movs	r2, #0
 800d520:	2100      	movs	r1, #0
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa09 	bl	800d93a <USBH_CtlReq>
 800d528:	4603      	mov	r3, r0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b082      	sub	sp, #8
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	460b      	mov	r3, r1
 800d53c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	789b      	ldrb	r3, [r3, #2]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d10f      	bne.n	800d566 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2203      	movs	r2, #3
 800d550:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d552:	78fb      	ldrb	r3, [r7, #3]
 800d554:	b29a      	uxth	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d566:	2200      	movs	r2, #0
 800d568:	2100      	movs	r1, #0
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f9e5 	bl	800d93a <USBH_CtlReq>
 800d570:	4603      	mov	r3, r0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	789b      	ldrb	r3, [r3, #2]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d10f      	bne.n	800d5ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2202      	movs	r2, #2
 800d592:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 f9c1 	bl	800d93a <USBH_CtlReq>
 800d5b8:	4603      	mov	r3, r0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	781a      	ldrb	r2, [r3, #0]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	785a      	ldrb	r2, [r3, #1]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	3302      	adds	r3, #2
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	3303      	adds	r3, #3
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	791a      	ldrb	r2, [r3, #4]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	795a      	ldrb	r2, [r3, #5]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	799a      	ldrb	r2, [r3, #6]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	79da      	ldrb	r2, [r3, #7]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d61c:	88fb      	ldrh	r3, [r7, #6]
 800d61e:	2b08      	cmp	r3, #8
 800d620:	d939      	bls.n	800d696 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	3308      	adds	r3, #8
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	3309      	adds	r3, #9
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	b29b      	uxth	r3, r3
 800d636:	4313      	orrs	r3, r2
 800d638:	b29a      	uxth	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	330a      	adds	r3, #10
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	b29a      	uxth	r2, r3
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	330b      	adds	r3, #11
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	021b      	lsls	r3, r3, #8
 800d650:	b29b      	uxth	r3, r3
 800d652:	4313      	orrs	r3, r2
 800d654:	b29a      	uxth	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	330c      	adds	r3, #12
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	b29a      	uxth	r2, r3
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	330d      	adds	r3, #13
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	b29b      	uxth	r3, r3
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	4313      	orrs	r3, r2
 800d670:	b29a      	uxth	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	7b9a      	ldrb	r2, [r3, #14]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	7bda      	ldrb	r2, [r3, #15]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	7c1a      	ldrb	r2, [r3, #16]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	7c5a      	ldrb	r2, [r3, #17]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	745a      	strb	r2, [r3, #17]
  }
}
 800d696:	bf00      	nop
 800d698:	3714      	adds	r7, #20
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b08a      	sub	sp, #40	; 0x28
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	781a      	ldrb	r2, [r3, #0]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	785a      	ldrb	r2, [r3, #1]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3302      	adds	r3, #2
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	3303      	adds	r3, #3
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	021b      	lsls	r3, r3, #8
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	791a      	ldrb	r2, [r3, #4]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	795a      	ldrb	r2, [r3, #5]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	799a      	ldrb	r2, [r3, #6]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	79da      	ldrb	r2, [r3, #7]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	7a1a      	ldrb	r2, [r3, #8]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d718:	88fb      	ldrh	r3, [r7, #6]
 800d71a:	2b09      	cmp	r3, #9
 800d71c:	d95f      	bls.n	800d7de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d71e:	2309      	movs	r3, #9
 800d720:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d722:	2300      	movs	r3, #0
 800d724:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d726:	e051      	b.n	800d7cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d728:	f107 0316 	add.w	r3, r7, #22
 800d72c:	4619      	mov	r1, r3
 800d72e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d730:	f000 f8e8 	bl	800d904 <USBH_GetNextDesc>
 800d734:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	d146      	bne.n	800d7cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d73e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d742:	221a      	movs	r2, #26
 800d744:	fb02 f303 	mul.w	r3, r2, r3
 800d748:	3308      	adds	r3, #8
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4413      	add	r3, r2
 800d74e:	3302      	adds	r3, #2
 800d750:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d754:	69f8      	ldr	r0, [r7, #28]
 800d756:	f000 f846 	bl	800d7e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d760:	2300      	movs	r3, #0
 800d762:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d764:	e022      	b.n	800d7ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d766:	f107 0316 	add.w	r3, r7, #22
 800d76a:	4619      	mov	r1, r3
 800d76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d76e:	f000 f8c9 	bl	800d904 <USBH_GetNextDesc>
 800d772:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	785b      	ldrb	r3, [r3, #1]
 800d778:	2b05      	cmp	r3, #5
 800d77a:	d117      	bne.n	800d7ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d77c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d780:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d784:	3201      	adds	r2, #1
 800d786:	00d2      	lsls	r2, r2, #3
 800d788:	211a      	movs	r1, #26
 800d78a:	fb01 f303 	mul.w	r3, r1, r3
 800d78e:	4413      	add	r3, r2
 800d790:	3308      	adds	r3, #8
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	4413      	add	r3, r2
 800d796:	3304      	adds	r3, #4
 800d798:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d79a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d79c:	69b8      	ldr	r0, [r7, #24]
 800d79e:	f000 f851 	bl	800d844 <USBH_ParseEPDesc>
            ep_ix++;
 800d7a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	791b      	ldrb	r3, [r3, #4]
 800d7b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d204      	bcs.n	800d7c2 <USBH_ParseCfgDesc+0x120>
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	885a      	ldrh	r2, [r3, #2]
 800d7bc:	8afb      	ldrh	r3, [r7, #22]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d8d1      	bhi.n	800d766 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d7c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d7cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d804      	bhi.n	800d7de <USBH_ParseCfgDesc+0x13c>
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	885a      	ldrh	r2, [r3, #2]
 800d7d8:	8afb      	ldrh	r3, [r7, #22]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d8a4      	bhi.n	800d728 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d7de:	bf00      	nop
 800d7e0:	3728      	adds	r7, #40	; 0x28
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	781a      	ldrb	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	785a      	ldrb	r2, [r3, #1]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	789a      	ldrb	r2, [r3, #2]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	78da      	ldrb	r2, [r3, #3]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	791a      	ldrb	r2, [r3, #4]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	795a      	ldrb	r2, [r3, #5]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	799a      	ldrb	r2, [r3, #6]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	79da      	ldrb	r2, [r3, #7]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	7a1a      	ldrb	r2, [r3, #8]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	721a      	strb	r2, [r3, #8]
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	781a      	ldrb	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	785a      	ldrb	r2, [r3, #1]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	789a      	ldrb	r2, [r3, #2]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	78da      	ldrb	r2, [r3, #3]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	3304      	adds	r3, #4
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	b29a      	uxth	r2, r3
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	3305      	adds	r3, #5
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	021b      	lsls	r3, r3, #8
 800d880:	b29b      	uxth	r3, r3
 800d882:	4313      	orrs	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	799a      	ldrb	r2, [r3, #6]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	719a      	strb	r2, [r3, #6]
}
 800d892:	bf00      	nop
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b087      	sub	sp, #28
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	60b9      	str	r1, [r7, #8]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d120      	bne.n	800d8f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	1e9a      	subs	r2, r3, #2
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	bf28      	it	cs
 800d8c2:	4613      	movcs	r3, r2
 800d8c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3302      	adds	r3, #2
 800d8ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	82fb      	strh	r3, [r7, #22]
 800d8d0:	e00b      	b.n	800d8ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d8d2:	8afb      	ldrh	r3, [r7, #22]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d8e4:	8afb      	ldrh	r3, [r7, #22]
 800d8e6:	3302      	adds	r3, #2
 800d8e8:	82fb      	strh	r3, [r7, #22]
 800d8ea:	8afa      	ldrh	r2, [r7, #22]
 800d8ec:	8abb      	ldrh	r3, [r7, #20]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d3ef      	bcc.n	800d8d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	701a      	strb	r2, [r3, #0]
  }
}
 800d8f8:	bf00      	nop
 800d8fa:	371c      	adds	r7, #28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	881a      	ldrh	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	4413      	add	r3, r2
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4413      	add	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d92c:	68fb      	ldr	r3, [r7, #12]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b086      	sub	sp, #24
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	60b9      	str	r1, [r7, #8]
 800d944:	4613      	mov	r3, r2
 800d946:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d948:	2301      	movs	r3, #1
 800d94a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	789b      	ldrb	r3, [r3, #2]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d002      	beq.n	800d95a <USBH_CtlReq+0x20>
 800d954:	2b02      	cmp	r3, #2
 800d956:	d00f      	beq.n	800d978 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d958:	e027      	b.n	800d9aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	68ba      	ldr	r2, [r7, #8]
 800d95e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	88fa      	ldrh	r2, [r7, #6]
 800d964:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2201      	movs	r2, #1
 800d96a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2202      	movs	r2, #2
 800d970:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d972:	2301      	movs	r3, #1
 800d974:	75fb      	strb	r3, [r7, #23]
      break;
 800d976:	e018      	b.n	800d9aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f000 f81b 	bl	800d9b4 <USBH_HandleControl>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <USBH_CtlReq+0x54>
 800d988:	7dfb      	ldrb	r3, [r7, #23]
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d106      	bne.n	800d99c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2201      	movs	r2, #1
 800d992:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	761a      	strb	r2, [r3, #24]
      break;
 800d99a:	e005      	b.n	800d9a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d102      	bne.n	800d9a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	709a      	strb	r2, [r3, #2]
      break;
 800d9a8:	bf00      	nop
  }
  return status;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af02      	add	r7, sp, #8
 800d9ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7e1b      	ldrb	r3, [r3, #24]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	2b0a      	cmp	r3, #10
 800d9cc:	f200 8156 	bhi.w	800dc7c <USBH_HandleControl+0x2c8>
 800d9d0:	a201      	add	r2, pc, #4	; (adr r2, 800d9d8 <USBH_HandleControl+0x24>)
 800d9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d6:	bf00      	nop
 800d9d8:	0800da05 	.word	0x0800da05
 800d9dc:	0800da1f 	.word	0x0800da1f
 800d9e0:	0800da89 	.word	0x0800da89
 800d9e4:	0800daaf 	.word	0x0800daaf
 800d9e8:	0800dae7 	.word	0x0800dae7
 800d9ec:	0800db11 	.word	0x0800db11
 800d9f0:	0800db63 	.word	0x0800db63
 800d9f4:	0800db85 	.word	0x0800db85
 800d9f8:	0800dbc1 	.word	0x0800dbc1
 800d9fc:	0800dbe7 	.word	0x0800dbe7
 800da00:	0800dc25 	.word	0x0800dc25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f103 0110 	add.w	r1, r3, #16
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	795b      	ldrb	r3, [r3, #5]
 800da0e:	461a      	mov	r2, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f943 	bl	800dc9c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2202      	movs	r2, #2
 800da1a:	761a      	strb	r2, [r3, #24]
      break;
 800da1c:	e139      	b.n	800dc92 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	795b      	ldrb	r3, [r3, #5]
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f003 f857 	bl	8010ad8 <USBH_LL_GetURBState>
 800da2a:	4603      	mov	r3, r0
 800da2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800da2e:	7bbb      	ldrb	r3, [r7, #14]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d11e      	bne.n	800da72 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	7c1b      	ldrb	r3, [r3, #16]
 800da38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	8adb      	ldrh	r3, [r3, #22]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800da46:	7b7b      	ldrb	r3, [r7, #13]
 800da48:	2b80      	cmp	r3, #128	; 0x80
 800da4a:	d103      	bne.n	800da54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2203      	movs	r2, #3
 800da50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da52:	e115      	b.n	800dc80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2205      	movs	r2, #5
 800da58:	761a      	strb	r2, [r3, #24]
      break;
 800da5a:	e111      	b.n	800dc80 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800da5c:	7b7b      	ldrb	r3, [r7, #13]
 800da5e:	2b80      	cmp	r3, #128	; 0x80
 800da60:	d103      	bne.n	800da6a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2209      	movs	r2, #9
 800da66:	761a      	strb	r2, [r3, #24]
      break;
 800da68:	e10a      	b.n	800dc80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2207      	movs	r2, #7
 800da6e:	761a      	strb	r2, [r3, #24]
      break;
 800da70:	e106      	b.n	800dc80 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800da72:	7bbb      	ldrb	r3, [r7, #14]
 800da74:	2b04      	cmp	r3, #4
 800da76:	d003      	beq.n	800da80 <USBH_HandleControl+0xcc>
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	f040 8100 	bne.w	800dc80 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	220b      	movs	r2, #11
 800da84:	761a      	strb	r2, [r3, #24]
      break;
 800da86:	e0fb      	b.n	800dc80 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6899      	ldr	r1, [r3, #8]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	899a      	ldrh	r2, [r3, #12]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	791b      	ldrb	r3, [r3, #4]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f93a 	bl	800dd1a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2204      	movs	r2, #4
 800daaa:	761a      	strb	r2, [r3, #24]
      break;
 800daac:	e0f1      	b.n	800dc92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	791b      	ldrb	r3, [r3, #4]
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f003 f80f 	bl	8010ad8 <USBH_LL_GetURBState>
 800daba:	4603      	mov	r3, r0
 800dabc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d102      	bne.n	800daca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2209      	movs	r2, #9
 800dac8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800daca:	7bbb      	ldrb	r3, [r7, #14]
 800dacc:	2b05      	cmp	r3, #5
 800dace:	d102      	bne.n	800dad6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dad0:	2303      	movs	r3, #3
 800dad2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dad4:	e0d6      	b.n	800dc84 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b04      	cmp	r3, #4
 800dada:	f040 80d3 	bne.w	800dc84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	220b      	movs	r2, #11
 800dae2:	761a      	strb	r2, [r3, #24]
      break;
 800dae4:	e0ce      	b.n	800dc84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6899      	ldr	r1, [r3, #8]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	899a      	ldrh	r2, [r3, #12]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	795b      	ldrb	r3, [r3, #5]
 800daf2:	2001      	movs	r0, #1
 800daf4:	9000      	str	r0, [sp, #0]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f8ea 	bl	800dcd0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2206      	movs	r2, #6
 800db0c:	761a      	strb	r2, [r3, #24]
      break;
 800db0e:	e0c0      	b.n	800dc92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	795b      	ldrb	r3, [r3, #5]
 800db14:	4619      	mov	r1, r3
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f002 ffde 	bl	8010ad8 <USBH_LL_GetURBState>
 800db1c:	4603      	mov	r3, r0
 800db1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d103      	bne.n	800db2e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2207      	movs	r2, #7
 800db2a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db2c:	e0ac      	b.n	800dc88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	2b05      	cmp	r3, #5
 800db32:	d105      	bne.n	800db40 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	220c      	movs	r2, #12
 800db38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800db3a:	2303      	movs	r3, #3
 800db3c:	73fb      	strb	r3, [r7, #15]
      break;
 800db3e:	e0a3      	b.n	800dc88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db40:	7bbb      	ldrb	r3, [r7, #14]
 800db42:	2b02      	cmp	r3, #2
 800db44:	d103      	bne.n	800db4e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2205      	movs	r2, #5
 800db4a:	761a      	strb	r2, [r3, #24]
      break;
 800db4c:	e09c      	b.n	800dc88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800db4e:	7bbb      	ldrb	r3, [r7, #14]
 800db50:	2b04      	cmp	r3, #4
 800db52:	f040 8099 	bne.w	800dc88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	220b      	movs	r2, #11
 800db5a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800db5c:	2302      	movs	r3, #2
 800db5e:	73fb      	strb	r3, [r7, #15]
      break;
 800db60:	e092      	b.n	800dc88 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	791b      	ldrb	r3, [r3, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f8d5 	bl	800dd1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db76:	b29a      	uxth	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2208      	movs	r2, #8
 800db80:	761a      	strb	r2, [r3, #24]

      break;
 800db82:	e086      	b.n	800dc92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	791b      	ldrb	r3, [r3, #4]
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f002 ffa4 	bl	8010ad8 <USBH_LL_GetURBState>
 800db90:	4603      	mov	r3, r0
 800db92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db94:	7bbb      	ldrb	r3, [r7, #14]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d105      	bne.n	800dba6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	220d      	movs	r2, #13
 800db9e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dba4:	e072      	b.n	800dc8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	d103      	bne.n	800dbb4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	220b      	movs	r2, #11
 800dbb0:	761a      	strb	r2, [r3, #24]
      break;
 800dbb2:	e06b      	b.n	800dc8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dbb4:	7bbb      	ldrb	r3, [r7, #14]
 800dbb6:	2b05      	cmp	r3, #5
 800dbb8:	d168      	bne.n	800dc8c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	73fb      	strb	r3, [r7, #15]
      break;
 800dbbe:	e065      	b.n	800dc8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	795b      	ldrb	r3, [r3, #5]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	9200      	str	r2, [sp, #0]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f87f 	bl	800dcd0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	220a      	movs	r2, #10
 800dbe2:	761a      	strb	r2, [r3, #24]
      break;
 800dbe4:	e055      	b.n	800dc92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	795b      	ldrb	r3, [r3, #5]
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f002 ff73 	bl	8010ad8 <USBH_LL_GetURBState>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d105      	bne.n	800dc08 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	220d      	movs	r2, #13
 800dc04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dc06:	e043      	b.n	800dc90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d103      	bne.n	800dc16 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2209      	movs	r2, #9
 800dc12:	761a      	strb	r2, [r3, #24]
      break;
 800dc14:	e03c      	b.n	800dc90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	2b04      	cmp	r3, #4
 800dc1a:	d139      	bne.n	800dc90 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	220b      	movs	r2, #11
 800dc20:	761a      	strb	r2, [r3, #24]
      break;
 800dc22:	e035      	b.n	800dc90 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	7e5b      	ldrb	r3, [r3, #25]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	765a      	strb	r2, [r3, #25]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	7e5b      	ldrb	r3, [r3, #25]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d806      	bhi.n	800dc46 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dc44:	e025      	b.n	800dc92 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc4c:	2106      	movs	r1, #6
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	795b      	ldrb	r3, [r3, #5]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f90c 	bl	800de7c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	791b      	ldrb	r3, [r3, #4]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f906 	bl	800de7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dc76:	2302      	movs	r3, #2
 800dc78:	73fb      	strb	r3, [r7, #15]
      break;
 800dc7a:	e00a      	b.n	800dc92 <USBH_HandleControl+0x2de>

    default:
      break;
 800dc7c:	bf00      	nop
 800dc7e:	e008      	b.n	800dc92 <USBH_HandleControl+0x2de>
      break;
 800dc80:	bf00      	nop
 800dc82:	e006      	b.n	800dc92 <USBH_HandleControl+0x2de>
      break;
 800dc84:	bf00      	nop
 800dc86:	e004      	b.n	800dc92 <USBH_HandleControl+0x2de>
      break;
 800dc88:	bf00      	nop
 800dc8a:	e002      	b.n	800dc92 <USBH_HandleControl+0x2de>
      break;
 800dc8c:	bf00      	nop
 800dc8e:	e000      	b.n	800dc92 <USBH_HandleControl+0x2de>
      break;
 800dc90:	bf00      	nop
  }

  return status;
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	4613      	mov	r3, r2
 800dca8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcaa:	79f9      	ldrb	r1, [r7, #7]
 800dcac:	2300      	movs	r3, #0
 800dcae:	9303      	str	r3, [sp, #12]
 800dcb0:	2308      	movs	r3, #8
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f002 fed8 	bl	8010a76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af04      	add	r7, sp, #16
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4611      	mov	r1, r2
 800dcdc:	461a      	mov	r2, r3
 800dcde:	460b      	mov	r3, r1
 800dce0:	80fb      	strh	r3, [r7, #6]
 800dce2:	4613      	mov	r3, r2
 800dce4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcf4:	7979      	ldrb	r1, [r7, #5]
 800dcf6:	7e3b      	ldrb	r3, [r7, #24]
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	88fb      	ldrh	r3, [r7, #6]
 800dcfc:	9302      	str	r3, [sp, #8]
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	2301      	movs	r3, #1
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	2300      	movs	r3, #0
 800dd08:	2200      	movs	r2, #0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f002 feb3 	bl	8010a76 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b088      	sub	sp, #32
 800dd1e:	af04      	add	r7, sp, #16
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	4611      	mov	r1, r2
 800dd26:	461a      	mov	r2, r3
 800dd28:	460b      	mov	r3, r1
 800dd2a:	80fb      	strh	r3, [r7, #6]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd30:	7979      	ldrb	r1, [r7, #5]
 800dd32:	2300      	movs	r3, #0
 800dd34:	9303      	str	r3, [sp, #12]
 800dd36:	88fb      	ldrh	r3, [r7, #6]
 800dd38:	9302      	str	r3, [sp, #8]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	2300      	movs	r3, #0
 800dd44:	2201      	movs	r2, #1
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f002 fe95 	bl	8010a76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd4c:	2300      	movs	r3, #0

}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b088      	sub	sp, #32
 800dd5a:	af04      	add	r7, sp, #16
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	4611      	mov	r1, r2
 800dd62:	461a      	mov	r2, r3
 800dd64:	460b      	mov	r3, r1
 800dd66:	80fb      	strh	r3, [r7, #6]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd7a:	7979      	ldrb	r1, [r7, #5]
 800dd7c:	7e3b      	ldrb	r3, [r7, #24]
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	2200      	movs	r2, #0
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f002 fe70 	bl	8010a76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af04      	add	r7, sp, #16
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	4611      	mov	r1, r2
 800ddac:	461a      	mov	r2, r3
 800ddae:	460b      	mov	r3, r1
 800ddb0:	80fb      	strh	r3, [r7, #6]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ddb6:	7979      	ldrb	r1, [r7, #5]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9303      	str	r3, [sp, #12]
 800ddbc:	88fb      	ldrh	r3, [r7, #6]
 800ddbe:	9302      	str	r3, [sp, #8]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	9301      	str	r3, [sp, #4]
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	2302      	movs	r3, #2
 800ddca:	2201      	movs	r2, #1
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f002 fe52 	bl	8010a76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af04      	add	r7, sp, #16
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	4608      	mov	r0, r1
 800dde6:	4611      	mov	r1, r2
 800dde8:	461a      	mov	r2, r3
 800ddea:	4603      	mov	r3, r0
 800ddec:	70fb      	strb	r3, [r7, #3]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	70bb      	strb	r3, [r7, #2]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ddf6:	7878      	ldrb	r0, [r7, #1]
 800ddf8:	78ba      	ldrb	r2, [r7, #2]
 800ddfa:	78f9      	ldrb	r1, [r7, #3]
 800ddfc:	8b3b      	ldrh	r3, [r7, #24]
 800ddfe:	9302      	str	r3, [sp, #8]
 800de00:	7d3b      	ldrb	r3, [r7, #20]
 800de02:	9301      	str	r3, [sp, #4]
 800de04:	7c3b      	ldrb	r3, [r7, #16]
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	4603      	mov	r3, r0
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f002 fde5 	bl	80109da <USBH_LL_OpenPipe>

  return USBH_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800de26:	78fb      	ldrb	r3, [r7, #3]
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f002 fe04 	bl	8010a38 <USBH_LL_ClosePipe>

  return USBH_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	460b      	mov	r3, r1
 800de44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f836 	bl	800deb8 <USBH_GetFreePipe>
 800de4c:	4603      	mov	r3, r0
 800de4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800de50:	89fb      	ldrh	r3, [r7, #14]
 800de52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de56:	4293      	cmp	r3, r2
 800de58:	d00a      	beq.n	800de70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800de5a:	78fa      	ldrb	r2, [r7, #3]
 800de5c:	89fb      	ldrh	r3, [r7, #14]
 800de5e:	f003 030f 	and.w	r3, r3, #15
 800de62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	33e0      	adds	r3, #224	; 0xe0
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	440b      	add	r3, r1
 800de6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800de70:	89fb      	ldrh	r3, [r7, #14]
 800de72:	b2db      	uxtb	r3, r3
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	460b      	mov	r3, r1
 800de86:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800de88:	78fb      	ldrb	r3, [r7, #3]
 800de8a:	2b0a      	cmp	r3, #10
 800de8c:	d80d      	bhi.n	800deaa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800de8e:	78fb      	ldrb	r3, [r7, #3]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	33e0      	adds	r3, #224	; 0xe0
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	78fb      	ldrb	r3, [r7, #3]
 800de9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	33e0      	adds	r3, #224	; 0xe0
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	440b      	add	r3, r1
 800dea8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
 800dec8:	e00f      	b.n	800deea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	33e0      	adds	r3, #224	; 0xe0
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d102      	bne.n	800dee4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	e007      	b.n	800def4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	3301      	adds	r3, #1
 800dee8:	73fb      	strb	r3, [r7, #15]
 800deea:	7bfb      	ldrb	r3, [r7, #15]
 800deec:	2b0a      	cmp	r3, #10
 800deee:	d9ec      	bls.n	800deca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800def0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	4a08      	ldr	r2, [pc, #32]	; (800df30 <disk_status+0x30>)
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	79fa      	ldrb	r2, [r7, #7]
 800df18:	4905      	ldr	r1, [pc, #20]	; (800df30 <disk_status+0x30>)
 800df1a:	440a      	add	r2, r1
 800df1c:	7a12      	ldrb	r2, [r2, #8]
 800df1e:	4610      	mov	r0, r2
 800df20:	4798      	blx	r3
 800df22:	4603      	mov	r3, r0
 800df24:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df26:	7bfb      	ldrb	r3, [r7, #15]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	240001b4 	.word	0x240001b4

0800df34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	4a0d      	ldr	r2, [pc, #52]	; (800df7c <disk_initialize+0x48>)
 800df46:	5cd3      	ldrb	r3, [r2, r3]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d111      	bne.n	800df70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	4a0b      	ldr	r2, [pc, #44]	; (800df7c <disk_initialize+0x48>)
 800df50:	2101      	movs	r1, #1
 800df52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	4a09      	ldr	r2, [pc, #36]	; (800df7c <disk_initialize+0x48>)
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	79fa      	ldrb	r2, [r7, #7]
 800df62:	4906      	ldr	r1, [pc, #24]	; (800df7c <disk_initialize+0x48>)
 800df64:	440a      	add	r2, r1
 800df66:	7a12      	ldrb	r2, [r2, #8]
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800df70:	7bfb      	ldrb	r3, [r7, #15]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	240001b4 	.word	0x240001b4

0800df80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df80:	b590      	push	{r4, r7, lr}
 800df82:	b087      	sub	sp, #28
 800df84:	af00      	add	r7, sp, #0
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	4a0a      	ldr	r2, [pc, #40]	; (800dfbc <disk_read+0x3c>)
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	689c      	ldr	r4, [r3, #8]
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
 800df9e:	4a07      	ldr	r2, [pc, #28]	; (800dfbc <disk_read+0x3c>)
 800dfa0:	4413      	add	r3, r2
 800dfa2:	7a18      	ldrb	r0, [r3, #8]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	68b9      	ldr	r1, [r7, #8]
 800dfaa:	47a0      	blx	r4
 800dfac:	4603      	mov	r3, r0
 800dfae:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd90      	pop	{r4, r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	240001b4 	.word	0x240001b4

0800dfc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dfc0:	b590      	push	{r4, r7, lr}
 800dfc2:	b087      	sub	sp, #28
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	4a0a      	ldr	r2, [pc, #40]	; (800dffc <disk_write+0x3c>)
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	68dc      	ldr	r4, [r3, #12]
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	4a07      	ldr	r2, [pc, #28]	; (800dffc <disk_write+0x3c>)
 800dfe0:	4413      	add	r3, r2
 800dfe2:	7a18      	ldrb	r0, [r3, #8]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	47a0      	blx	r4
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
  return res;
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	371c      	adds	r7, #28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd90      	pop	{r4, r7, pc}
 800dffa:	bf00      	nop
 800dffc:	240001b4 	.word	0x240001b4

0800e000 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	603a      	str	r2, [r7, #0]
 800e00a:	71fb      	strb	r3, [r7, #7]
 800e00c:	460b      	mov	r3, r1
 800e00e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	4a09      	ldr	r2, [pc, #36]	; (800e038 <disk_ioctl+0x38>)
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	79fa      	ldrb	r2, [r7, #7]
 800e01e:	4906      	ldr	r1, [pc, #24]	; (800e038 <disk_ioctl+0x38>)
 800e020:	440a      	add	r2, r1
 800e022:	7a10      	ldrb	r0, [r2, #8]
 800e024:	79b9      	ldrb	r1, [r7, #6]
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	4798      	blx	r3
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	240001b4 	.word	0x240001b4

0800e03c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3301      	adds	r3, #1
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e04c:	89fb      	ldrh	r3, [r7, #14]
 800e04e:	021b      	lsls	r3, r3, #8
 800e050:	b21a      	sxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	b21b      	sxth	r3, r3
 800e058:	4313      	orrs	r3, r2
 800e05a:	b21b      	sxth	r3, r3
 800e05c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e05e:	89fb      	ldrh	r3, [r7, #14]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3303      	adds	r3, #3
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	021b      	lsls	r3, r3, #8
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	3202      	adds	r2, #2
 800e084:	7812      	ldrb	r2, [r2, #0]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	3201      	adds	r2, #1
 800e092:	7812      	ldrb	r2, [r2, #0]
 800e094:	4313      	orrs	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	7812      	ldrb	r2, [r2, #0]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	b083      	sub	sp, #12
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	607a      	str	r2, [r7, #4]
 800e0c4:	887a      	ldrh	r2, [r7, #2]
 800e0c6:	b2d2      	uxtb	r2, r2
 800e0c8:	701a      	strb	r2, [r3, #0]
 800e0ca:	887b      	ldrh	r3, [r7, #2]
 800e0cc:	0a1b      	lsrs	r3, r3, #8
 800e0ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	607a      	str	r2, [r7, #4]
 800e0d6:	887a      	ldrh	r2, [r7, #2]
 800e0d8:	b2d2      	uxtb	r2, r2
 800e0da:	701a      	strb	r2, [r3, #0]
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	0a1b      	lsrs	r3, r3, #8
 800e102:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	607a      	str	r2, [r7, #4]
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	b2d2      	uxtb	r2, r2
 800e10e:	701a      	strb	r2, [r3, #0]
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	0a1b      	lsrs	r3, r3, #8
 800e114:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	1c5a      	adds	r2, r3, #1
 800e11a:	607a      	str	r2, [r7, #4]
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	b2d2      	uxtb	r2, r2
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	0a1b      	lsrs	r3, r3, #8
 800e126:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	607a      	str	r2, [r7, #4]
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e140:	b480      	push	{r7}
 800e142:	b087      	sub	sp, #28
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00d      	beq.n	800e176 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e15a:	693a      	ldr	r2, [r7, #16]
 800e15c:	1c53      	adds	r3, r2, #1
 800e15e:	613b      	str	r3, [r7, #16]
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	1c59      	adds	r1, r3, #1
 800e164:	6179      	str	r1, [r7, #20]
 800e166:	7812      	ldrb	r2, [r2, #0]
 800e168:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	607b      	str	r3, [r7, #4]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1f1      	bne.n	800e15a <mem_cpy+0x1a>
	}
}
 800e176:	bf00      	nop
 800e178:	371c      	adds	r7, #28
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e182:	b480      	push	{r7}
 800e184:	b087      	sub	sp, #28
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	617a      	str	r2, [r7, #20]
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	b2d2      	uxtb	r2, r2
 800e19c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	607b      	str	r3, [r7, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1f3      	bne.n	800e192 <mem_set+0x10>
}
 800e1aa:	bf00      	nop
 800e1ac:	bf00      	nop
 800e1ae:	371c      	adds	r7, #28
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e1b8:	b480      	push	{r7}
 800e1ba:	b089      	sub	sp, #36	; 0x24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	61fb      	str	r3, [r7, #28]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	61fa      	str	r2, [r7, #28]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	1c5a      	adds	r2, r3, #1
 800e1de:	61ba      	str	r2, [r7, #24]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	1acb      	subs	r3, r1, r3
 800e1e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	607b      	str	r3, [r7, #4]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <mem_cmp+0x40>
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0eb      	beq.n	800e1d0 <mem_cmp+0x18>

	return r;
 800e1f8:	697b      	ldr	r3, [r7, #20]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3724      	adds	r7, #36	; 0x24
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e210:	e002      	b.n	800e218 <chk_chr+0x12>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	3301      	adds	r3, #1
 800e216:	607b      	str	r3, [r7, #4]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d005      	beq.n	800e22c <chk_chr+0x26>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	461a      	mov	r2, r3
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	4293      	cmp	r3, r2
 800e22a:	d1f2      	bne.n	800e212 <chk_chr+0xc>
	return *str;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	781b      	ldrb	r3, [r3, #0]
}
 800e230:	4618      	mov	r0, r3
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e246:	2300      	movs	r3, #0
 800e248:	60bb      	str	r3, [r7, #8]
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	60fb      	str	r3, [r7, #12]
 800e24e:	e029      	b.n	800e2a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e250:	4a27      	ldr	r2, [pc, #156]	; (800e2f0 <chk_lock+0xb4>)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	011b      	lsls	r3, r3, #4
 800e256:	4413      	add	r3, r2
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d01d      	beq.n	800e29a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e25e:	4a24      	ldr	r2, [pc, #144]	; (800e2f0 <chk_lock+0xb4>)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	4413      	add	r3, r2
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d116      	bne.n	800e29e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e270:	4a1f      	ldr	r2, [pc, #124]	; (800e2f0 <chk_lock+0xb4>)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	011b      	lsls	r3, r3, #4
 800e276:	4413      	add	r3, r2
 800e278:	3304      	adds	r3, #4
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e280:	429a      	cmp	r2, r3
 800e282:	d10c      	bne.n	800e29e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e284:	4a1a      	ldr	r2, [pc, #104]	; (800e2f0 <chk_lock+0xb4>)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	011b      	lsls	r3, r3, #4
 800e28a:	4413      	add	r3, r2
 800e28c:	3308      	adds	r3, #8
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e294:	429a      	cmp	r2, r3
 800e296:	d102      	bne.n	800e29e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e298:	e007      	b.n	800e2aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e29a:	2301      	movs	r3, #1
 800e29c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d9d2      	bls.n	800e250 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d109      	bne.n	800e2c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d102      	bne.n	800e2bc <chk_lock+0x80>
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d101      	bne.n	800e2c0 <chk_lock+0x84>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e010      	b.n	800e2e2 <chk_lock+0xa6>
 800e2c0:	2312      	movs	r3, #18
 800e2c2:	e00e      	b.n	800e2e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d108      	bne.n	800e2dc <chk_lock+0xa0>
 800e2ca:	4a09      	ldr	r2, [pc, #36]	; (800e2f0 <chk_lock+0xb4>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	011b      	lsls	r3, r3, #4
 800e2d0:	4413      	add	r3, r2
 800e2d2:	330c      	adds	r3, #12
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2da:	d101      	bne.n	800e2e0 <chk_lock+0xa4>
 800e2dc:	2310      	movs	r3, #16
 800e2de:	e000      	b.n	800e2e2 <chk_lock+0xa6>
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	24000194 	.word	0x24000194

0800e2f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	e002      	b.n	800e306 <enq_lock+0x12>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3301      	adds	r3, #1
 800e304:	607b      	str	r3, [r7, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d806      	bhi.n	800e31a <enq_lock+0x26>
 800e30c:	4a09      	ldr	r2, [pc, #36]	; (800e334 <enq_lock+0x40>)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	011b      	lsls	r3, r3, #4
 800e312:	4413      	add	r3, r2
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1f2      	bne.n	800e300 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	bf14      	ite	ne
 800e320:	2301      	movne	r3, #1
 800e322:	2300      	moveq	r3, #0
 800e324:	b2db      	uxtb	r3, r3
}
 800e326:	4618      	mov	r0, r3
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	24000194 	.word	0x24000194

0800e338 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e342:	2300      	movs	r3, #0
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	e01f      	b.n	800e388 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e348:	4a41      	ldr	r2, [pc, #260]	; (800e450 <inc_lock+0x118>)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	4413      	add	r3, r2
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d113      	bne.n	800e382 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e35a:	4a3d      	ldr	r2, [pc, #244]	; (800e450 <inc_lock+0x118>)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	011b      	lsls	r3, r3, #4
 800e360:	4413      	add	r3, r2
 800e362:	3304      	adds	r3, #4
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d109      	bne.n	800e382 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e36e:	4a38      	ldr	r2, [pc, #224]	; (800e450 <inc_lock+0x118>)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	011b      	lsls	r3, r3, #4
 800e374:	4413      	add	r3, r2
 800e376:	3308      	adds	r3, #8
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e37e:	429a      	cmp	r2, r3
 800e380:	d006      	beq.n	800e390 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3301      	adds	r3, #1
 800e386:	60fb      	str	r3, [r7, #12]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d9dc      	bls.n	800e348 <inc_lock+0x10>
 800e38e:	e000      	b.n	800e392 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e390:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b02      	cmp	r3, #2
 800e396:	d132      	bne.n	800e3fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e398:	2300      	movs	r3, #0
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	e002      	b.n	800e3a4 <inc_lock+0x6c>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d806      	bhi.n	800e3b8 <inc_lock+0x80>
 800e3aa:	4a29      	ldr	r2, [pc, #164]	; (800e450 <inc_lock+0x118>)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	4413      	add	r3, r2
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1f2      	bne.n	800e39e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d101      	bne.n	800e3c2 <inc_lock+0x8a>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	e040      	b.n	800e444 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	4922      	ldr	r1, [pc, #136]	; (800e450 <inc_lock+0x118>)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	011b      	lsls	r3, r3, #4
 800e3cc:	440b      	add	r3, r1
 800e3ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	689a      	ldr	r2, [r3, #8]
 800e3d4:	491e      	ldr	r1, [pc, #120]	; (800e450 <inc_lock+0x118>)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	011b      	lsls	r3, r3, #4
 800e3da:	440b      	add	r3, r1
 800e3dc:	3304      	adds	r3, #4
 800e3de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	695a      	ldr	r2, [r3, #20]
 800e3e4:	491a      	ldr	r1, [pc, #104]	; (800e450 <inc_lock+0x118>)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	011b      	lsls	r3, r3, #4
 800e3ea:	440b      	add	r3, r1
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e3f0:	4a17      	ldr	r2, [pc, #92]	; (800e450 <inc_lock+0x118>)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	011b      	lsls	r3, r3, #4
 800e3f6:	4413      	add	r3, r2
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d009      	beq.n	800e418 <inc_lock+0xe0>
 800e404:	4a12      	ldr	r2, [pc, #72]	; (800e450 <inc_lock+0x118>)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	4413      	add	r3, r2
 800e40c:	330c      	adds	r3, #12
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <inc_lock+0xe0>
 800e414:	2300      	movs	r3, #0
 800e416:	e015      	b.n	800e444 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d108      	bne.n	800e430 <inc_lock+0xf8>
 800e41e:	4a0c      	ldr	r2, [pc, #48]	; (800e450 <inc_lock+0x118>)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	011b      	lsls	r3, r3, #4
 800e424:	4413      	add	r3, r2
 800e426:	330c      	adds	r3, #12
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	3301      	adds	r3, #1
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	e001      	b.n	800e434 <inc_lock+0xfc>
 800e430:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e434:	4906      	ldr	r1, [pc, #24]	; (800e450 <inc_lock+0x118>)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	440b      	add	r3, r1
 800e43c:	330c      	adds	r3, #12
 800e43e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3301      	adds	r3, #1
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr
 800e450:	24000194 	.word	0x24000194

0800e454 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3b01      	subs	r3, #1
 800e460:	607b      	str	r3, [r7, #4]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d825      	bhi.n	800e4b4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e468:	4a17      	ldr	r2, [pc, #92]	; (800e4c8 <dec_lock+0x74>)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	011b      	lsls	r3, r3, #4
 800e46e:	4413      	add	r3, r2
 800e470:	330c      	adds	r3, #12
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e476:	89fb      	ldrh	r3, [r7, #14]
 800e478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e47c:	d101      	bne.n	800e482 <dec_lock+0x2e>
 800e47e:	2300      	movs	r3, #0
 800e480:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e482:	89fb      	ldrh	r3, [r7, #14]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <dec_lock+0x3a>
 800e488:	89fb      	ldrh	r3, [r7, #14]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e48e:	4a0e      	ldr	r2, [pc, #56]	; (800e4c8 <dec_lock+0x74>)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	011b      	lsls	r3, r3, #4
 800e494:	4413      	add	r3, r2
 800e496:	330c      	adds	r3, #12
 800e498:	89fa      	ldrh	r2, [r7, #14]
 800e49a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e49c:	89fb      	ldrh	r3, [r7, #14]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d105      	bne.n	800e4ae <dec_lock+0x5a>
 800e4a2:	4a09      	ldr	r2, [pc, #36]	; (800e4c8 <dec_lock+0x74>)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	011b      	lsls	r3, r3, #4
 800e4a8:	4413      	add	r3, r2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	737b      	strb	r3, [r7, #13]
 800e4b2:	e001      	b.n	800e4b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e4b8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	24000194 	.word	0x24000194

0800e4cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e010      	b.n	800e4fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e4da:	4a0d      	ldr	r2, [pc, #52]	; (800e510 <clear_lock+0x44>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	011b      	lsls	r3, r3, #4
 800e4e0:	4413      	add	r3, r2
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d105      	bne.n	800e4f6 <clear_lock+0x2a>
 800e4ea:	4a09      	ldr	r2, [pc, #36]	; (800e510 <clear_lock+0x44>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	011b      	lsls	r3, r3, #4
 800e4f0:	4413      	add	r3, r2
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d9eb      	bls.n	800e4da <clear_lock+0xe>
	}
}
 800e502:	bf00      	nop
 800e504:	bf00      	nop
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	24000194 	.word	0x24000194

0800e514 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	78db      	ldrb	r3, [r3, #3]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d034      	beq.n	800e592 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	7858      	ldrb	r0, [r3, #1]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e538:	2301      	movs	r3, #1
 800e53a:	697a      	ldr	r2, [r7, #20]
 800e53c:	f7ff fd40 	bl	800dfc0 <disk_write>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e546:	2301      	movs	r3, #1
 800e548:	73fb      	strb	r3, [r7, #15]
 800e54a:	e022      	b.n	800e592 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	697a      	ldr	r2, [r7, #20]
 800e558:	1ad2      	subs	r2, r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	699b      	ldr	r3, [r3, #24]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d217      	bcs.n	800e592 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	789b      	ldrb	r3, [r3, #2]
 800e566:	613b      	str	r3, [r7, #16]
 800e568:	e010      	b.n	800e58c <sync_window+0x78>
					wsect += fs->fsize;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	699b      	ldr	r3, [r3, #24]
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	4413      	add	r3, r2
 800e572:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7858      	ldrb	r0, [r3, #1]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e57e:	2301      	movs	r3, #1
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	f7ff fd1d 	bl	800dfc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	3b01      	subs	r3, #1
 800e58a:	613b      	str	r3, [r7, #16]
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d8eb      	bhi.n	800e56a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e592:	7bfb      	ldrb	r3, [r7, #15]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d01b      	beq.n	800e5ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff ffad 	bl	800e514 <sync_window>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d113      	bne.n	800e5ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	7858      	ldrb	r0, [r3, #1]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	f7ff fcd5 	bl	800df80 <disk_read>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d004      	beq.n	800e5e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
	...

0800e5f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ff87 	bl	800e514 <sync_window>
 800e606:	4603      	mov	r3, r0
 800e608:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d158      	bne.n	800e6c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2b03      	cmp	r3, #3
 800e616:	d148      	bne.n	800e6aa <sync_fs+0xb2>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	791b      	ldrb	r3, [r3, #4]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d144      	bne.n	800e6aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3330      	adds	r3, #48	; 0x30
 800e624:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e628:	2100      	movs	r1, #0
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fda9 	bl	800e182 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3330      	adds	r3, #48	; 0x30
 800e634:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e638:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fd38 	bl	800e0b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3330      	adds	r3, #48	; 0x30
 800e646:	4921      	ldr	r1, [pc, #132]	; (800e6cc <sync_fs+0xd4>)
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff fd4d 	bl	800e0e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3330      	adds	r3, #48	; 0x30
 800e652:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e656:	491e      	ldr	r1, [pc, #120]	; (800e6d0 <sync_fs+0xd8>)
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff fd45 	bl	800e0e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3330      	adds	r3, #48	; 0x30
 800e662:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	4619      	mov	r1, r3
 800e66c:	4610      	mov	r0, r2
 800e66e:	f7ff fd3b 	bl	800e0e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3330      	adds	r3, #48	; 0x30
 800e676:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f7ff fd31 	bl	800e0e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	7858      	ldrb	r0, [r3, #1]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69e:	2301      	movs	r3, #1
 800e6a0:	f7ff fc8e 	bl	800dfc0 <disk_write>
			fs->fsi_flag = 0;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	785b      	ldrb	r3, [r3, #1]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7ff fca4 	bl	800e000 <disk_ioctl>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <sync_fs+0xca>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	41615252 	.word	0x41615252
 800e6d0:	61417272 	.word	0x61417272

0800e6d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	3b02      	subs	r3, #2
 800e6e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	3b02      	subs	r3, #2
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d301      	bcc.n	800e6f4 <clust2sect+0x20>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e008      	b.n	800e706 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	895b      	ldrh	r3, [r3, #10]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	fb03 f202 	mul.w	r2, r3, r2
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	4413      	add	r3, r2
}
 800e706:	4618      	mov	r0, r3
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b086      	sub	sp, #24
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d904      	bls.n	800e732 <get_fat+0x20>
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d302      	bcc.n	800e738 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e732:	2301      	movs	r3, #1
 800e734:	617b      	str	r3, [r7, #20]
 800e736:	e08f      	b.n	800e858 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
 800e73c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	2b03      	cmp	r3, #3
 800e744:	d062      	beq.n	800e80c <get_fat+0xfa>
 800e746:	2b03      	cmp	r3, #3
 800e748:	dc7c      	bgt.n	800e844 <get_fat+0x132>
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d002      	beq.n	800e754 <get_fat+0x42>
 800e74e:	2b02      	cmp	r3, #2
 800e750:	d042      	beq.n	800e7d8 <get_fat+0xc6>
 800e752:	e077      	b.n	800e844 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	60fb      	str	r3, [r7, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	085b      	lsrs	r3, r3, #1
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	4413      	add	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6a1a      	ldr	r2, [r3, #32]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	0a5b      	lsrs	r3, r3, #9
 800e76a:	4413      	add	r3, r2
 800e76c:	4619      	mov	r1, r3
 800e76e:	6938      	ldr	r0, [r7, #16]
 800e770:	f7ff ff14 	bl	800e59c <move_window>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d167      	bne.n	800e84a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	1c5a      	adds	r2, r3, #1
 800e77e:	60fa      	str	r2, [r7, #12]
 800e780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	4413      	add	r3, r2
 800e788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e78c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	6a1a      	ldr	r2, [r3, #32]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	0a5b      	lsrs	r3, r3, #9
 800e796:	4413      	add	r3, r2
 800e798:	4619      	mov	r1, r3
 800e79a:	6938      	ldr	r0, [r7, #16]
 800e79c:	f7ff fefe 	bl	800e59c <move_window>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d153      	bne.n	800e84e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d002      	beq.n	800e7ce <get_fat+0xbc>
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	091b      	lsrs	r3, r3, #4
 800e7cc:	e002      	b.n	800e7d4 <get_fat+0xc2>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7d4:	617b      	str	r3, [r7, #20]
			break;
 800e7d6:	e03f      	b.n	800e858 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	6a1a      	ldr	r2, [r3, #32]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	0a1b      	lsrs	r3, r3, #8
 800e7e0:	4413      	add	r3, r2
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6938      	ldr	r0, [r7, #16]
 800e7e6:	f7ff fed9 	bl	800e59c <move_window>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d130      	bne.n	800e852 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e7fe:	4413      	add	r3, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fc1b 	bl	800e03c <ld_word>
 800e806:	4603      	mov	r3, r0
 800e808:	617b      	str	r3, [r7, #20]
			break;
 800e80a:	e025      	b.n	800e858 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6a1a      	ldr	r2, [r3, #32]
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	09db      	lsrs	r3, r3, #7
 800e814:	4413      	add	r3, r2
 800e816:	4619      	mov	r1, r3
 800e818:	6938      	ldr	r0, [r7, #16]
 800e81a:	f7ff febf 	bl	800e59c <move_window>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d118      	bne.n	800e856 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e832:	4413      	add	r3, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fc19 	bl	800e06c <ld_dword>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e840:	617b      	str	r3, [r7, #20]
			break;
 800e842:	e009      	b.n	800e858 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e844:	2301      	movs	r3, #1
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	e006      	b.n	800e858 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e84a:	bf00      	nop
 800e84c:	e004      	b.n	800e858 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e84e:	bf00      	nop
 800e850:	e002      	b.n	800e858 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e852:	bf00      	nop
 800e854:	e000      	b.n	800e858 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e856:	bf00      	nop
		}
	}

	return val;
 800e858:	697b      	ldr	r3, [r7, #20]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e862:	b590      	push	{r4, r7, lr}
 800e864:	b089      	sub	sp, #36	; 0x24
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e86e:	2302      	movs	r3, #2
 800e870:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	2b01      	cmp	r3, #1
 800e876:	f240 80d2 	bls.w	800ea1e <put_fat+0x1bc>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	429a      	cmp	r2, r3
 800e882:	f080 80cc 	bcs.w	800ea1e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	f000 8096 	beq.w	800e9bc <put_fat+0x15a>
 800e890:	2b03      	cmp	r3, #3
 800e892:	f300 80cd 	bgt.w	800ea30 <put_fat+0x1ce>
 800e896:	2b01      	cmp	r3, #1
 800e898:	d002      	beq.n	800e8a0 <put_fat+0x3e>
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d06e      	beq.n	800e97c <put_fat+0x11a>
 800e89e:	e0c7      	b.n	800ea30 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	61bb      	str	r3, [r7, #24]
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	085b      	lsrs	r3, r3, #1
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6a1a      	ldr	r2, [r3, #32]
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	0a5b      	lsrs	r3, r3, #9
 800e8b6:	4413      	add	r3, r2
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fe6e 	bl	800e59c <move_window>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8c4:	7ffb      	ldrb	r3, [r7, #31]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f040 80ab 	bne.w	800ea22 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	1c59      	adds	r1, r3, #1
 800e8d6:	61b9      	str	r1, [r7, #24]
 800e8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8dc:	4413      	add	r3, r2
 800e8de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00d      	beq.n	800e906 <put_fat+0xa4>
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	b25b      	sxtb	r3, r3
 800e8f0:	f003 030f 	and.w	r3, r3, #15
 800e8f4:	b25a      	sxtb	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	011b      	lsls	r3, r3, #4
 800e8fc:	b25b      	sxtb	r3, r3
 800e8fe:	4313      	orrs	r3, r2
 800e900:	b25b      	sxtb	r3, r3
 800e902:	b2db      	uxtb	r3, r3
 800e904:	e001      	b.n	800e90a <put_fat+0xa8>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2201      	movs	r2, #1
 800e912:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6a1a      	ldr	r2, [r3, #32]
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	0a5b      	lsrs	r3, r3, #9
 800e91c:	4413      	add	r3, r2
 800e91e:	4619      	mov	r1, r3
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f7ff fe3b 	bl	800e59c <move_window>
 800e926:	4603      	mov	r3, r0
 800e928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e92a:	7ffb      	ldrb	r3, [r7, #31]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d17a      	bne.n	800ea26 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e93c:	4413      	add	r3, r2
 800e93e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	d003      	beq.n	800e952 <put_fat+0xf0>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	091b      	lsrs	r3, r3, #4
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	e00e      	b.n	800e970 <put_fat+0x10e>
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	b25b      	sxtb	r3, r3
 800e958:	f023 030f 	bic.w	r3, r3, #15
 800e95c:	b25a      	sxtb	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	0a1b      	lsrs	r3, r3, #8
 800e962:	b25b      	sxtb	r3, r3
 800e964:	f003 030f 	and.w	r3, r3, #15
 800e968:	b25b      	sxtb	r3, r3
 800e96a:	4313      	orrs	r3, r2
 800e96c:	b25b      	sxtb	r3, r3
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	697a      	ldr	r2, [r7, #20]
 800e972:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2201      	movs	r2, #1
 800e978:	70da      	strb	r2, [r3, #3]
			break;
 800e97a:	e059      	b.n	800ea30 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6a1a      	ldr	r2, [r3, #32]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	0a1b      	lsrs	r3, r3, #8
 800e984:	4413      	add	r3, r2
 800e986:	4619      	mov	r1, r3
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f7ff fe07 	bl	800e59c <move_window>
 800e98e:	4603      	mov	r3, r0
 800e990:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e992:	7ffb      	ldrb	r3, [r7, #31]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d148      	bne.n	800ea2a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	005b      	lsls	r3, r3, #1
 800e9a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e9a6:	4413      	add	r3, r2
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	b292      	uxth	r2, r2
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7ff fb7f 	bl	800e0b2 <st_word>
			fs->wflag = 1;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	70da      	strb	r2, [r3, #3]
			break;
 800e9ba:	e039      	b.n	800ea30 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a1a      	ldr	r2, [r3, #32]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	09db      	lsrs	r3, r3, #7
 800e9c4:	4413      	add	r3, r2
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f7ff fde7 	bl	800e59c <move_window>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9d2:	7ffb      	ldrb	r3, [r7, #31]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d12a      	bne.n	800ea2e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e9ec:	4413      	add	r3, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fb3c 	bl	800e06c <ld_dword>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e9fa:	4323      	orrs	r3, r4
 800e9fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea0c:	4413      	add	r3, r2
 800ea0e:	6879      	ldr	r1, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7ff fb69 	bl	800e0e8 <st_dword>
			fs->wflag = 1;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	70da      	strb	r2, [r3, #3]
			break;
 800ea1c:	e008      	b.n	800ea30 <put_fat+0x1ce>
		}
	}
 800ea1e:	bf00      	nop
 800ea20:	e006      	b.n	800ea30 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ea22:	bf00      	nop
 800ea24:	e004      	b.n	800ea30 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ea26:	bf00      	nop
 800ea28:	e002      	b.n	800ea30 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ea2a:	bf00      	nop
 800ea2c:	e000      	b.n	800ea30 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ea2e:	bf00      	nop
	return res;
 800ea30:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3724      	adds	r7, #36	; 0x24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd90      	pop	{r4, r7, pc}

0800ea3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b088      	sub	sp, #32
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	60f8      	str	r0, [r7, #12]
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d904      	bls.n	800ea60 <remove_chain+0x26>
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	695b      	ldr	r3, [r3, #20]
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d301      	bcc.n	800ea64 <remove_chain+0x2a>
 800ea60:	2302      	movs	r3, #2
 800ea62:	e04b      	b.n	800eafc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00c      	beq.n	800ea84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ea6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	69b8      	ldr	r0, [r7, #24]
 800ea72:	f7ff fef6 	bl	800e862 <put_fat>
 800ea76:	4603      	mov	r3, r0
 800ea78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ea7a:	7ffb      	ldrb	r3, [r7, #31]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <remove_chain+0x4a>
 800ea80:	7ffb      	ldrb	r3, [r7, #31]
 800ea82:	e03b      	b.n	800eafc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ea84:	68b9      	ldr	r1, [r7, #8]
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fe43 	bl	800e712 <get_fat>
 800ea8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d031      	beq.n	800eaf8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d101      	bne.n	800ea9e <remove_chain+0x64>
 800ea9a:	2302      	movs	r3, #2
 800ea9c:	e02e      	b.n	800eafc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa4:	d101      	bne.n	800eaaa <remove_chain+0x70>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e028      	b.n	800eafc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eaaa:	2200      	movs	r2, #0
 800eaac:	68b9      	ldr	r1, [r7, #8]
 800eaae:	69b8      	ldr	r0, [r7, #24]
 800eab0:	f7ff fed7 	bl	800e862 <put_fat>
 800eab4:	4603      	mov	r3, r0
 800eab6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eab8:	7ffb      	ldrb	r3, [r7, #31]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <remove_chain+0x88>
 800eabe:	7ffb      	ldrb	r3, [r7, #31]
 800eac0:	e01c      	b.n	800eafc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	691a      	ldr	r2, [r3, #16]
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	3b02      	subs	r3, #2
 800eacc:	429a      	cmp	r2, r3
 800eace:	d20b      	bcs.n	800eae8 <remove_chain+0xae>
			fs->free_clst++;
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	791b      	ldrb	r3, [r3, #4]
 800eade:	f043 0301 	orr.w	r3, r3, #1
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d3c6      	bcc.n	800ea84 <remove_chain+0x4a>
 800eaf6:	e000      	b.n	800eafa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eaf8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10d      	bne.n	800eb36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d004      	beq.n	800eb30 <create_chain+0x2c>
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d31b      	bcc.n	800eb68 <create_chain+0x64>
 800eb30:	2301      	movs	r3, #1
 800eb32:	61bb      	str	r3, [r7, #24]
 800eb34:	e018      	b.n	800eb68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff fdea 	bl	800e712 <get_fat>
 800eb3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d801      	bhi.n	800eb4a <create_chain+0x46>
 800eb46:	2301      	movs	r3, #1
 800eb48:	e070      	b.n	800ec2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb50:	d101      	bne.n	800eb56 <create_chain+0x52>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	e06a      	b.n	800ec2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	695b      	ldr	r3, [r3, #20]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d201      	bcs.n	800eb64 <create_chain+0x60>
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	e063      	b.n	800ec2c <create_chain+0x128>
		scl = clst;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	69fa      	ldr	r2, [r7, #28]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d307      	bcc.n	800eb8c <create_chain+0x88>
				ncl = 2;
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eb80:	69fa      	ldr	r2, [r7, #28]
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d901      	bls.n	800eb8c <create_chain+0x88>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e04f      	b.n	800ec2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eb8c:	69f9      	ldr	r1, [r7, #28]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7ff fdbf 	bl	800e712 <get_fat>
 800eb94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00e      	beq.n	800ebba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d003      	beq.n	800ebaa <create_chain+0xa6>
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d101      	bne.n	800ebae <create_chain+0xaa>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	e03e      	b.n	800ec2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ebae:	69fa      	ldr	r2, [r7, #28]
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d1da      	bne.n	800eb6c <create_chain+0x68>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e038      	b.n	800ec2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ebba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ebbc:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc0:	69f9      	ldr	r1, [r7, #28]
 800ebc2:	6938      	ldr	r0, [r7, #16]
 800ebc4:	f7ff fe4d 	bl	800e862 <put_fat>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ebcc:	7dfb      	ldrb	r3, [r7, #23]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <create_chain+0xe2>
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ebd8:	69fa      	ldr	r2, [r7, #28]
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	6938      	ldr	r0, [r7, #16]
 800ebde:	f7ff fe40 	bl	800e862 <put_fat>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d116      	bne.n	800ec1a <create_chain+0x116>
		fs->last_clst = ncl;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	691a      	ldr	r2, [r3, #16]
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	695b      	ldr	r3, [r3, #20]
 800ebfa:	3b02      	subs	r3, #2
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d804      	bhi.n	800ec0a <create_chain+0x106>
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	1e5a      	subs	r2, r3, #1
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	791b      	ldrb	r3, [r3, #4]
 800ec0e:	f043 0301 	orr.w	r3, r3, #1
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	711a      	strb	r2, [r3, #4]
 800ec18:	e007      	b.n	800ec2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d102      	bne.n	800ec26 <create_chain+0x122>
 800ec20:	f04f 33ff 	mov.w	r3, #4294967295
 800ec24:	e000      	b.n	800ec28 <create_chain+0x124>
 800ec26:	2301      	movs	r3, #1
 800ec28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec2a:	69fb      	ldr	r3, [r7, #28]
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3720      	adds	r7, #32
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b087      	sub	sp, #28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec48:	3304      	adds	r3, #4
 800ec4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	0a5b      	lsrs	r3, r3, #9
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	8952      	ldrh	r2, [r2, #10]
 800ec54:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	1d1a      	adds	r2, r3, #4
 800ec5e:	613a      	str	r2, [r7, #16]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <clmt_clust+0x3a>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e010      	b.n	800ec90 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d307      	bcc.n	800ec86 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	617b      	str	r3, [r7, #20]
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	3304      	adds	r3, #4
 800ec82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec84:	e7e9      	b.n	800ec5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ec86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	4413      	add	r3, r2
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	371c      	adds	r7, #28
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecb2:	d204      	bcs.n	800ecbe <dir_sdi+0x22>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	f003 031f 	and.w	r3, r3, #31
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	e063      	b.n	800ed8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	683a      	ldr	r2, [r7, #0]
 800ecc6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d106      	bne.n	800ece2 <dir_sdi+0x46>
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d902      	bls.n	800ece2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10c      	bne.n	800ed02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	095b      	lsrs	r3, r3, #5
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	8912      	ldrh	r2, [r2, #8]
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d301      	bcc.n	800ecf8 <dir_sdi+0x5c>
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	e048      	b.n	800ed8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	61da      	str	r2, [r3, #28]
 800ed00:	e029      	b.n	800ed56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	895b      	ldrh	r3, [r3, #10]
 800ed06:	025b      	lsls	r3, r3, #9
 800ed08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed0a:	e019      	b.n	800ed40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6979      	ldr	r1, [r7, #20]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff fcfe 	bl	800e712 <get_fat>
 800ed16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1e:	d101      	bne.n	800ed24 <dir_sdi+0x88>
 800ed20:	2301      	movs	r3, #1
 800ed22:	e032      	b.n	800ed8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d904      	bls.n	800ed34 <dir_sdi+0x98>
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d301      	bcc.n	800ed38 <dir_sdi+0x9c>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e028      	b.n	800ed8a <dir_sdi+0xee>
			ofs -= csz;
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed40:	683a      	ldr	r2, [r7, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d2e1      	bcs.n	800ed0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ed48:	6979      	ldr	r1, [r7, #20]
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f7ff fcc2 	bl	800e6d4 <clust2sect>
 800ed50:	4602      	mov	r2, r0
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	697a      	ldr	r2, [r7, #20]
 800ed5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <dir_sdi+0xcc>
 800ed64:	2302      	movs	r3, #2
 800ed66:	e010      	b.n	800ed8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69da      	ldr	r2, [r3, #28]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	0a5b      	lsrs	r3, r3, #9
 800ed70:	441a      	add	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed82:	441a      	add	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3718      	adds	r7, #24
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b086      	sub	sp, #24
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	3320      	adds	r3, #32
 800eda8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	69db      	ldr	r3, [r3, #28]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <dir_next+0x28>
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edb8:	d301      	bcc.n	800edbe <dir_next+0x2c>
 800edba:	2304      	movs	r3, #4
 800edbc:	e0aa      	b.n	800ef14 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 8098 	bne.w	800eefa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	69db      	ldr	r3, [r3, #28]
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10b      	bne.n	800edf4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	095b      	lsrs	r3, r3, #5
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	8912      	ldrh	r2, [r2, #8]
 800ede4:	4293      	cmp	r3, r2
 800ede6:	f0c0 8088 	bcc.w	800eefa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	61da      	str	r2, [r3, #28]
 800edf0:	2304      	movs	r3, #4
 800edf2:	e08f      	b.n	800ef14 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	0a5b      	lsrs	r3, r3, #9
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	8952      	ldrh	r2, [r2, #10]
 800edfc:	3a01      	subs	r2, #1
 800edfe:	4013      	ands	r3, r2
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d17a      	bne.n	800eefa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	f7ff fc80 	bl	800e712 <get_fat>
 800ee12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d801      	bhi.n	800ee1e <dir_next+0x8c>
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	e07a      	b.n	800ef14 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee24:	d101      	bne.n	800ee2a <dir_next+0x98>
 800ee26:	2301      	movs	r3, #1
 800ee28:	e074      	b.n	800ef14 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d358      	bcc.n	800eee6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d104      	bne.n	800ee44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	61da      	str	r2, [r3, #28]
 800ee40:	2304      	movs	r3, #4
 800ee42:	e067      	b.n	800ef14 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7ff fe59 	bl	800eb04 <create_chain>
 800ee52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d101      	bne.n	800ee5e <dir_next+0xcc>
 800ee5a:	2307      	movs	r3, #7
 800ee5c:	e05a      	b.n	800ef14 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d101      	bne.n	800ee68 <dir_next+0xd6>
 800ee64:	2302      	movs	r3, #2
 800ee66:	e055      	b.n	800ef14 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6e:	d101      	bne.n	800ee74 <dir_next+0xe2>
 800ee70:	2301      	movs	r3, #1
 800ee72:	e04f      	b.n	800ef14 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff fb4d 	bl	800e514 <sync_window>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <dir_next+0xf2>
 800ee80:	2301      	movs	r3, #1
 800ee82:	e047      	b.n	800ef14 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	3330      	adds	r3, #48	; 0x30
 800ee88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff f977 	bl	800e182 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ee94:	2300      	movs	r3, #0
 800ee96:	613b      	str	r3, [r7, #16]
 800ee98:	6979      	ldr	r1, [r7, #20]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fc1a 	bl	800e6d4 <clust2sect>
 800eea0:	4602      	mov	r2, r0
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	62da      	str	r2, [r3, #44]	; 0x2c
 800eea6:	e012      	b.n	800eece <dir_next+0x13c>
						fs->wflag = 1;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7ff fb30 	bl	800e514 <sync_window>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <dir_next+0x12c>
 800eeba:	2301      	movs	r3, #1
 800eebc:	e02a      	b.n	800ef14 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	3301      	adds	r3, #1
 800eec2:	613b      	str	r3, [r7, #16]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec8:	1c5a      	adds	r2, r3, #1
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	62da      	str	r2, [r3, #44]	; 0x2c
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	895b      	ldrh	r3, [r3, #10]
 800eed2:	461a      	mov	r2, r3
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d3e6      	bcc.n	800eea8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	1ad2      	subs	r2, r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	697a      	ldr	r2, [r7, #20]
 800eeea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eeec:	6979      	ldr	r1, [r7, #20]
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff fbf0 	bl	800e6d4 <clust2sect>
 800eef4:	4602      	mov	r2, r0
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef0c:	441a      	add	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7ff feb4 	bl	800ec9c <dir_sdi>
 800ef34:	4603      	mov	r3, r0
 800ef36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef38:	7dfb      	ldrb	r3, [r7, #23]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d12b      	bne.n	800ef96 <dir_alloc+0x7a>
		n = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	69db      	ldr	r3, [r3, #28]
 800ef46:	4619      	mov	r1, r3
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7ff fb27 	bl	800e59c <move_window>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef52:	7dfb      	ldrb	r3, [r7, #23]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d11d      	bne.n	800ef94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2be5      	cmp	r3, #229	; 0xe5
 800ef60:	d004      	beq.n	800ef6c <dir_alloc+0x50>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d107      	bne.n	800ef7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	3301      	adds	r3, #1
 800ef70:	613b      	str	r3, [r7, #16]
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d102      	bne.n	800ef80 <dir_alloc+0x64>
 800ef7a:	e00c      	b.n	800ef96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ef80:	2101      	movs	r1, #1
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff ff05 	bl	800ed92 <dir_next>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ef8c:	7dfb      	ldrb	r3, [r7, #23]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0d7      	beq.n	800ef42 <dir_alloc+0x26>
 800ef92:	e000      	b.n	800ef96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ef94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	d101      	bne.n	800efa0 <dir_alloc+0x84>
 800ef9c:	2307      	movs	r3, #7
 800ef9e:	75fb      	strb	r3, [r7, #23]
	return res;
 800efa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b084      	sub	sp, #16
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	331a      	adds	r3, #26
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff f83f 	bl	800e03c <ld_word>
 800efbe:	4603      	mov	r3, r0
 800efc0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d109      	bne.n	800efde <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	3314      	adds	r3, #20
 800efce:	4618      	mov	r0, r3
 800efd0:	f7ff f834 	bl	800e03c <ld_word>
 800efd4:	4603      	mov	r3, r0
 800efd6:	041b      	lsls	r3, r3, #16
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	4313      	orrs	r3, r2
 800efdc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800efde:	68fb      	ldr	r3, [r7, #12]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	331a      	adds	r3, #26
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	b292      	uxth	r2, r2
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff f857 	bl	800e0b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	2b03      	cmp	r3, #3
 800f00a:	d109      	bne.n	800f020 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f103 0214 	add.w	r2, r3, #20
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	0c1b      	lsrs	r3, r3, #16
 800f016:	b29b      	uxth	r3, r3
 800f018:	4619      	mov	r1, r3
 800f01a:	4610      	mov	r0, r2
 800f01c:	f7ff f849 	bl	800e0b2 <st_word>
	}
}
 800f020:	bf00      	nop
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f036:	2100      	movs	r1, #0
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7ff fe2f 	bl	800ec9c <dir_sdi>
 800f03e:	4603      	mov	r3, r0
 800f040:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f042:	7dfb      	ldrb	r3, [r7, #23]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d001      	beq.n	800f04c <dir_find+0x24>
 800f048:	7dfb      	ldrb	r3, [r7, #23]
 800f04a:	e03e      	b.n	800f0ca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	4619      	mov	r1, r3
 800f052:	6938      	ldr	r0, [r7, #16]
 800f054:	f7ff faa2 	bl	800e59c <move_window>
 800f058:	4603      	mov	r3, r0
 800f05a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d12f      	bne.n	800f0c2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a1b      	ldr	r3, [r3, #32]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f06a:	7bfb      	ldrb	r3, [r7, #15]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d102      	bne.n	800f076 <dir_find+0x4e>
 800f070:	2304      	movs	r3, #4
 800f072:	75fb      	strb	r3, [r7, #23]
 800f074:	e028      	b.n	800f0c8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a1b      	ldr	r3, [r3, #32]
 800f07a:	330b      	adds	r3, #11
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f082:	b2da      	uxtb	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a1b      	ldr	r3, [r3, #32]
 800f08c:	330b      	adds	r3, #11
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 0308 	and.w	r3, r3, #8
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10a      	bne.n	800f0ae <dir_find+0x86>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6a18      	ldr	r0, [r3, #32]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3324      	adds	r3, #36	; 0x24
 800f0a0:	220b      	movs	r2, #11
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	f7ff f888 	bl	800e1b8 <mem_cmp>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00b      	beq.n	800f0c6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff fe6e 	bl	800ed92 <dir_next>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d0c5      	beq.n	800f04c <dir_find+0x24>
 800f0c0:	e002      	b.n	800f0c8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f0c2:	bf00      	nop
 800f0c4:	e000      	b.n	800f0c8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0c6:	bf00      	nop

	return res;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f7ff ff1a 	bl	800ef1c <dir_alloc>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d11c      	bne.n	800f12c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	69db      	ldr	r3, [r3, #28]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	f7ff fa4f 	bl	800e59c <move_window>
 800f0fe:	4603      	mov	r3, r0
 800f100:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f102:	7bfb      	ldrb	r3, [r7, #15]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d111      	bne.n	800f12c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6a1b      	ldr	r3, [r3, #32]
 800f10c:	2220      	movs	r2, #32
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff f836 	bl	800e182 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a18      	ldr	r0, [r3, #32]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3324      	adds	r3, #36	; 0x24
 800f11e:	220b      	movs	r2, #11
 800f120:	4619      	mov	r1, r3
 800f122:	f7ff f80d 	bl	800e140 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	2201      	movs	r2, #1
 800f12a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3324      	adds	r3, #36	; 0x24
 800f14c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f14e:	220b      	movs	r2, #11
 800f150:	2120      	movs	r1, #32
 800f152:	68b8      	ldr	r0, [r7, #8]
 800f154:	f7ff f815 	bl	800e182 <mem_set>
	si = i = 0; ni = 8;
 800f158:	2300      	movs	r3, #0
 800f15a:	613b      	str	r3, [r7, #16]
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	61fb      	str	r3, [r7, #28]
 800f160:	2308      	movs	r3, #8
 800f162:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	61fa      	str	r2, [r7, #28]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	4413      	add	r3, r2
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f172:	7efb      	ldrb	r3, [r7, #27]
 800f174:	2b20      	cmp	r3, #32
 800f176:	d94e      	bls.n	800f216 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f178:	7efb      	ldrb	r3, [r7, #27]
 800f17a:	2b2f      	cmp	r3, #47	; 0x2f
 800f17c:	d006      	beq.n	800f18c <create_name+0x54>
 800f17e:	7efb      	ldrb	r3, [r7, #27]
 800f180:	2b5c      	cmp	r3, #92	; 0x5c
 800f182:	d110      	bne.n	800f1a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f184:	e002      	b.n	800f18c <create_name+0x54>
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	3301      	adds	r3, #1
 800f18a:	61fb      	str	r3, [r7, #28]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	4413      	add	r3, r2
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b2f      	cmp	r3, #47	; 0x2f
 800f196:	d0f6      	beq.n	800f186 <create_name+0x4e>
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	4413      	add	r3, r2
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f1a2:	d0f0      	beq.n	800f186 <create_name+0x4e>
			break;
 800f1a4:	e038      	b.n	800f218 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f1a6:	7efb      	ldrb	r3, [r7, #27]
 800f1a8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1aa:	d003      	beq.n	800f1b4 <create_name+0x7c>
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d30c      	bcc.n	800f1ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	2b0b      	cmp	r3, #11
 800f1b8:	d002      	beq.n	800f1c0 <create_name+0x88>
 800f1ba:	7efb      	ldrb	r3, [r7, #27]
 800f1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f1be:	d001      	beq.n	800f1c4 <create_name+0x8c>
 800f1c0:	2306      	movs	r3, #6
 800f1c2:	e044      	b.n	800f24e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f1c4:	2308      	movs	r3, #8
 800f1c6:	613b      	str	r3, [r7, #16]
 800f1c8:	230b      	movs	r3, #11
 800f1ca:	617b      	str	r3, [r7, #20]
			continue;
 800f1cc:	e022      	b.n	800f214 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f1ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	da04      	bge.n	800f1e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f1d6:	7efb      	ldrb	r3, [r7, #27]
 800f1d8:	3b80      	subs	r3, #128	; 0x80
 800f1da:	4a1f      	ldr	r2, [pc, #124]	; (800f258 <create_name+0x120>)
 800f1dc:	5cd3      	ldrb	r3, [r2, r3]
 800f1de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f1e0:	7efb      	ldrb	r3, [r7, #27]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	481d      	ldr	r0, [pc, #116]	; (800f25c <create_name+0x124>)
 800f1e6:	f7ff f80e 	bl	800e206 <chk_chr>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <create_name+0xbc>
 800f1f0:	2306      	movs	r3, #6
 800f1f2:	e02c      	b.n	800f24e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f1f4:	7efb      	ldrb	r3, [r7, #27]
 800f1f6:	2b60      	cmp	r3, #96	; 0x60
 800f1f8:	d905      	bls.n	800f206 <create_name+0xce>
 800f1fa:	7efb      	ldrb	r3, [r7, #27]
 800f1fc:	2b7a      	cmp	r3, #122	; 0x7a
 800f1fe:	d802      	bhi.n	800f206 <create_name+0xce>
 800f200:	7efb      	ldrb	r3, [r7, #27]
 800f202:	3b20      	subs	r3, #32
 800f204:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	613a      	str	r2, [r7, #16]
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	4413      	add	r3, r2
 800f210:	7efa      	ldrb	r2, [r7, #27]
 800f212:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f214:	e7a6      	b.n	800f164 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f216:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	441a      	add	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <create_name+0xf4>
 800f228:	2306      	movs	r3, #6
 800f22a:	e010      	b.n	800f24e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2be5      	cmp	r3, #229	; 0xe5
 800f232:	d102      	bne.n	800f23a <create_name+0x102>
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	2205      	movs	r2, #5
 800f238:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f23a:	7efb      	ldrb	r3, [r7, #27]
 800f23c:	2b20      	cmp	r3, #32
 800f23e:	d801      	bhi.n	800f244 <create_name+0x10c>
 800f240:	2204      	movs	r2, #4
 800f242:	e000      	b.n	800f246 <create_name+0x10e>
 800f244:	2200      	movs	r2, #0
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	330b      	adds	r3, #11
 800f24a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f24c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3720      	adds	r7, #32
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	08010fac 	.word	0x08010fac
 800f25c:	08010f2c 	.word	0x08010f2c

0800f260 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f274:	e002      	b.n	800f27c <follow_path+0x1c>
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	3301      	adds	r3, #1
 800f27a:	603b      	str	r3, [r7, #0]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	2b2f      	cmp	r3, #47	; 0x2f
 800f282:	d0f8      	beq.n	800f276 <follow_path+0x16>
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b5c      	cmp	r3, #92	; 0x5c
 800f28a:	d0f4      	beq.n	800f276 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	2200      	movs	r2, #0
 800f290:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b1f      	cmp	r3, #31
 800f298:	d80a      	bhi.n	800f2b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2280      	movs	r2, #128	; 0x80
 800f29e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff fcf9 	bl	800ec9c <dir_sdi>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	75fb      	strb	r3, [r7, #23]
 800f2ae:	e043      	b.n	800f338 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2b0:	463b      	mov	r3, r7
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7ff ff3f 	bl	800f138 <create_name>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d134      	bne.n	800f32e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff feaf 	bl	800f028 <dir_find>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00a      	beq.n	800f2f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	2b04      	cmp	r3, #4
 800f2e0:	d127      	bne.n	800f332 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2e2:	7afb      	ldrb	r3, [r7, #11]
 800f2e4:	f003 0304 	and.w	r3, r3, #4
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d122      	bne.n	800f332 <follow_path+0xd2>
 800f2ec:	2305      	movs	r3, #5
 800f2ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2f0:	e01f      	b.n	800f332 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2f2:	7afb      	ldrb	r3, [r7, #11]
 800f2f4:	f003 0304 	and.w	r3, r3, #4
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d11c      	bne.n	800f336 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	799b      	ldrb	r3, [r3, #6]
 800f300:	f003 0310 	and.w	r3, r3, #16
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f308:	2305      	movs	r3, #5
 800f30a:	75fb      	strb	r3, [r7, #23]
 800f30c:	e014      	b.n	800f338 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	695b      	ldr	r3, [r3, #20]
 800f318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f31c:	4413      	add	r3, r2
 800f31e:	4619      	mov	r1, r3
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f7ff fe42 	bl	800efaa <ld_clust>
 800f326:	4602      	mov	r2, r0
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f32c:	e7c0      	b.n	800f2b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f32e:	bf00      	nop
 800f330:	e002      	b.n	800f338 <follow_path+0xd8>
				break;
 800f332:	bf00      	nop
 800f334:	e000      	b.n	800f338 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f336:	bf00      	nop
			}
		}
	}

	return res;
 800f338:	7dfb      	ldrb	r3, [r7, #23]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f342:	b480      	push	{r7}
 800f344:	b087      	sub	sp, #28
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f34a:	f04f 33ff 	mov.w	r3, #4294967295
 800f34e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d031      	beq.n	800f3bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	617b      	str	r3, [r7, #20]
 800f35e:	e002      	b.n	800f366 <get_ldnumber+0x24>
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	3301      	adds	r3, #1
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b20      	cmp	r3, #32
 800f36c:	d903      	bls.n	800f376 <get_ldnumber+0x34>
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b3a      	cmp	r3, #58	; 0x3a
 800f374:	d1f4      	bne.n	800f360 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b3a      	cmp	r3, #58	; 0x3a
 800f37c:	d11c      	bne.n	800f3b8 <get_ldnumber+0x76>
			tp = *path;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	1c5a      	adds	r2, r3, #1
 800f388:	60fa      	str	r2, [r7, #12]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	3b30      	subs	r3, #48	; 0x30
 800f38e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b09      	cmp	r3, #9
 800f394:	d80e      	bhi.n	800f3b4 <get_ldnumber+0x72>
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d10a      	bne.n	800f3b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d107      	bne.n	800f3b4 <get_ldnumber+0x72>
					vol = (int)i;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	617b      	str	r3, [r7, #20]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	e002      	b.n	800f3be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3bc:	693b      	ldr	r3, [r7, #16]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	371c      	adds	r7, #28
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr
	...

0800f3cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	70da      	strb	r2, [r3, #3]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff f8d8 	bl	800e59c <move_window>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <check_fs+0x2a>
 800f3f2:	2304      	movs	r3, #4
 800f3f4:	e038      	b.n	800f468 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3330      	adds	r3, #48	; 0x30
 800f3fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe fe1c 	bl	800e03c <ld_word>
 800f404:	4603      	mov	r3, r0
 800f406:	461a      	mov	r2, r3
 800f408:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d001      	beq.n	800f414 <check_fs+0x48>
 800f410:	2303      	movs	r3, #3
 800f412:	e029      	b.n	800f468 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f41a:	2be9      	cmp	r3, #233	; 0xe9
 800f41c:	d009      	beq.n	800f432 <check_fs+0x66>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f424:	2beb      	cmp	r3, #235	; 0xeb
 800f426:	d11e      	bne.n	800f466 <check_fs+0x9a>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f42e:	2b90      	cmp	r3, #144	; 0x90
 800f430:	d119      	bne.n	800f466 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3330      	adds	r3, #48	; 0x30
 800f436:	3336      	adds	r3, #54	; 0x36
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fe fe17 	bl	800e06c <ld_dword>
 800f43e:	4603      	mov	r3, r0
 800f440:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f444:	4a0a      	ldr	r2, [pc, #40]	; (800f470 <check_fs+0xa4>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d101      	bne.n	800f44e <check_fs+0x82>
 800f44a:	2300      	movs	r3, #0
 800f44c:	e00c      	b.n	800f468 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	3330      	adds	r3, #48	; 0x30
 800f452:	3352      	adds	r3, #82	; 0x52
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe fe09 	bl	800e06c <ld_dword>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a05      	ldr	r2, [pc, #20]	; (800f474 <check_fs+0xa8>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d101      	bne.n	800f466 <check_fs+0x9a>
 800f462:	2300      	movs	r3, #0
 800f464:	e000      	b.n	800f468 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f466:	2302      	movs	r3, #2
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	00544146 	.word	0x00544146
 800f474:	33544146 	.word	0x33544146

0800f478 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b096      	sub	sp, #88	; 0x58
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	4613      	mov	r3, r2
 800f484:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2200      	movs	r2, #0
 800f48a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7ff ff58 	bl	800f342 <get_ldnumber>
 800f492:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f496:	2b00      	cmp	r3, #0
 800f498:	da01      	bge.n	800f49e <find_volume+0x26>
 800f49a:	230b      	movs	r3, #11
 800f49c:	e22e      	b.n	800f8fc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f49e:	4aa8      	ldr	r2, [pc, #672]	; (800f740 <find_volume+0x2c8>)
 800f4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d101      	bne.n	800f4b2 <find_volume+0x3a>
 800f4ae:	230c      	movs	r3, #12
 800f4b0:	e224      	b.n	800f8fc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	f023 0301 	bic.w	r3, r3, #1
 800f4be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d01a      	beq.n	800f4fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	785b      	ldrb	r3, [r3, #1]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fe fd17 	bl	800df00 <disk_status>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10c      	bne.n	800f4fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d007      	beq.n	800f4fa <find_volume+0x82>
 800f4ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4ee:	f003 0304 	and.w	r3, r3, #4
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d001      	beq.n	800f4fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f4f6:	230a      	movs	r3, #10
 800f4f8:	e200      	b.n	800f8fc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e1fe      	b.n	800f8fc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f500:	2200      	movs	r2, #0
 800f502:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f506:	b2da      	uxtb	r2, r3
 800f508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	785b      	ldrb	r3, [r3, #1]
 800f510:	4618      	mov	r0, r3
 800f512:	f7fe fd0f 	bl	800df34 <disk_initialize>
 800f516:	4603      	mov	r3, r0
 800f518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f51c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f528:	2303      	movs	r3, #3
 800f52a:	e1e7      	b.n	800f8fc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f52c:	79fb      	ldrb	r3, [r7, #7]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <find_volume+0xca>
 800f532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f536:	f003 0304 	and.w	r3, r3, #4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f53e:	230a      	movs	r3, #10
 800f540:	e1dc      	b.n	800f8fc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f54a:	f7ff ff3f 	bl	800f3cc <check_fs>
 800f54e:	4603      	mov	r3, r0
 800f550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d14b      	bne.n	800f5f4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f55c:	2300      	movs	r3, #0
 800f55e:	643b      	str	r3, [r7, #64]	; 0x40
 800f560:	e01f      	b.n	800f5a2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f56a:	011b      	lsls	r3, r3, #4
 800f56c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f570:	4413      	add	r3, r2
 800f572:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	3304      	adds	r3, #4
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d006      	beq.n	800f58c <find_volume+0x114>
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	3308      	adds	r3, #8
 800f582:	4618      	mov	r0, r3
 800f584:	f7fe fd72 	bl	800e06c <ld_dword>
 800f588:	4602      	mov	r2, r0
 800f58a:	e000      	b.n	800f58e <find_volume+0x116>
 800f58c:	2200      	movs	r2, #0
 800f58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f596:	440b      	add	r3, r1
 800f598:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f59e:	3301      	adds	r3, #1
 800f5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800f5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d9dc      	bls.n	800f562 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <find_volume+0x140>
 800f5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f5c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d005      	beq.n	800f5da <find_volume+0x162>
 800f5ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5d2:	f7ff fefb 	bl	800f3cc <check_fs>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	e000      	b.n	800f5dc <find_volume+0x164>
 800f5da:	2303      	movs	r3, #3
 800f5dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d905      	bls.n	800f5f4 <find_volume+0x17c>
 800f5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	643b      	str	r3, [r7, #64]	; 0x40
 800f5ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	d9e1      	bls.n	800f5b8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f5f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d101      	bne.n	800f600 <find_volume+0x188>
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e17d      	b.n	800f8fc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f604:	2b01      	cmp	r3, #1
 800f606:	d901      	bls.n	800f60c <find_volume+0x194>
 800f608:	230d      	movs	r3, #13
 800f60a:	e177      	b.n	800f8fc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	3330      	adds	r3, #48	; 0x30
 800f610:	330b      	adds	r3, #11
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fd12 	bl	800e03c <ld_word>
 800f618:	4603      	mov	r3, r0
 800f61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f61e:	d001      	beq.n	800f624 <find_volume+0x1ac>
 800f620:	230d      	movs	r3, #13
 800f622:	e16b      	b.n	800f8fc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f626:	3330      	adds	r3, #48	; 0x30
 800f628:	3316      	adds	r3, #22
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fd06 	bl	800e03c <ld_word>
 800f630:	4603      	mov	r3, r0
 800f632:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f636:	2b00      	cmp	r3, #0
 800f638:	d106      	bne.n	800f648 <find_volume+0x1d0>
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	3330      	adds	r3, #48	; 0x30
 800f63e:	3324      	adds	r3, #36	; 0x24
 800f640:	4618      	mov	r0, r3
 800f642:	f7fe fd13 	bl	800e06c <ld_dword>
 800f646:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f64c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	789b      	ldrb	r3, [r3, #2]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d005      	beq.n	800f66c <find_volume+0x1f4>
 800f660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f662:	789b      	ldrb	r3, [r3, #2]
 800f664:	2b02      	cmp	r3, #2
 800f666:	d001      	beq.n	800f66c <find_volume+0x1f4>
 800f668:	230d      	movs	r3, #13
 800f66a:	e147      	b.n	800f8fc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	789b      	ldrb	r3, [r3, #2]
 800f670:	461a      	mov	r2, r3
 800f672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f674:	fb02 f303 	mul.w	r3, r2, r3
 800f678:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f680:	b29a      	uxth	r2, r3
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	895b      	ldrh	r3, [r3, #10]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d008      	beq.n	800f6a0 <find_volume+0x228>
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	895b      	ldrh	r3, [r3, #10]
 800f692:	461a      	mov	r2, r3
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	895b      	ldrh	r3, [r3, #10]
 800f698:	3b01      	subs	r3, #1
 800f69a:	4013      	ands	r3, r2
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <find_volume+0x22c>
 800f6a0:	230d      	movs	r3, #13
 800f6a2:	e12b      	b.n	800f8fc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	3330      	adds	r3, #48	; 0x30
 800f6a8:	3311      	adds	r3, #17
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe fcc6 	bl	800e03c <ld_word>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ba:	891b      	ldrh	r3, [r3, #8]
 800f6bc:	f003 030f 	and.w	r3, r3, #15
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <find_volume+0x252>
 800f6c6:	230d      	movs	r3, #13
 800f6c8:	e118      	b.n	800f8fc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6cc:	3330      	adds	r3, #48	; 0x30
 800f6ce:	3313      	adds	r3, #19
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fe fcb3 	bl	800e03c <ld_word>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d106      	bne.n	800f6ee <find_volume+0x276>
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	3330      	adds	r3, #48	; 0x30
 800f6e4:	3320      	adds	r3, #32
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fe fcc0 	bl	800e06c <ld_dword>
 800f6ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f0:	3330      	adds	r3, #48	; 0x30
 800f6f2:	330e      	adds	r3, #14
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fca1 	bl	800e03c <ld_word>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f6fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <find_volume+0x290>
 800f704:	230d      	movs	r3, #13
 800f706:	e0f9      	b.n	800f8fc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f708:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f70c:	4413      	add	r3, r2
 800f70e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f710:	8912      	ldrh	r2, [r2, #8]
 800f712:	0912      	lsrs	r2, r2, #4
 800f714:	b292      	uxth	r2, r2
 800f716:	4413      	add	r3, r2
 800f718:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f71a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71e:	429a      	cmp	r2, r3
 800f720:	d201      	bcs.n	800f726 <find_volume+0x2ae>
 800f722:	230d      	movs	r3, #13
 800f724:	e0ea      	b.n	800f8fc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f72e:	8952      	ldrh	r2, [r2, #10]
 800f730:	fbb3 f3f2 	udiv	r3, r3, r2
 800f734:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d103      	bne.n	800f744 <find_volume+0x2cc>
 800f73c:	230d      	movs	r3, #13
 800f73e:	e0dd      	b.n	800f8fc <find_volume+0x484>
 800f740:	2400018c 	.word	0x2400018c
		fmt = FS_FAT32;
 800f744:	2303      	movs	r3, #3
 800f746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f750:	4293      	cmp	r3, r2
 800f752:	d802      	bhi.n	800f75a <find_volume+0x2e2>
 800f754:	2302      	movs	r3, #2
 800f756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f760:	4293      	cmp	r3, r2
 800f762:	d802      	bhi.n	800f76a <find_volume+0x2f2>
 800f764:	2301      	movs	r3, #1
 800f766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	1c9a      	adds	r2, r3, #2
 800f76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f770:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f776:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f778:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f77c:	441a      	add	r2, r3
 800f77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f780:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f782:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	441a      	add	r2, r3
 800f788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800f78c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f790:	2b03      	cmp	r3, #3
 800f792:	d11e      	bne.n	800f7d2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	3330      	adds	r3, #48	; 0x30
 800f798:	332a      	adds	r3, #42	; 0x2a
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fe fc4e 	bl	800e03c <ld_word>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <find_volume+0x332>
 800f7a6:	230d      	movs	r3, #13
 800f7a8:	e0a8      	b.n	800f8fc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ac:	891b      	ldrh	r3, [r3, #8]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <find_volume+0x33e>
 800f7b2:	230d      	movs	r3, #13
 800f7b4:	e0a2      	b.n	800f8fc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b8:	3330      	adds	r3, #48	; 0x30
 800f7ba:	332c      	adds	r3, #44	; 0x2c
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fe fc55 	bl	800e06c <ld_dword>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	647b      	str	r3, [r7, #68]	; 0x44
 800f7d0:	e01f      	b.n	800f812 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	891b      	ldrh	r3, [r3, #8]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d101      	bne.n	800f7de <find_volume+0x366>
 800f7da:	230d      	movs	r3, #13
 800f7dc:	e08e      	b.n	800f8fc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	6a1a      	ldr	r2, [r3, #32]
 800f7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e4:	441a      	add	r2, r3
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f7ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d103      	bne.n	800f7fa <find_volume+0x382>
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	e00a      	b.n	800f810 <find_volume+0x398>
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	695a      	ldr	r2, [r3, #20]
 800f7fe:	4613      	mov	r3, r2
 800f800:	005b      	lsls	r3, r3, #1
 800f802:	4413      	add	r3, r2
 800f804:	085a      	lsrs	r2, r3, #1
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f810:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	699a      	ldr	r2, [r3, #24]
 800f816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f818:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f81c:	0a5b      	lsrs	r3, r3, #9
 800f81e:	429a      	cmp	r2, r3
 800f820:	d201      	bcs.n	800f826 <find_volume+0x3ae>
 800f822:	230d      	movs	r3, #13
 800f824:	e06a      	b.n	800f8fc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	f04f 32ff 	mov.w	r2, #4294967295
 800f82c:	611a      	str	r2, [r3, #16]
 800f82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f830:	691a      	ldr	r2, [r3, #16]
 800f832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f834:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	2280      	movs	r2, #128	; 0x80
 800f83a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f83c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f840:	2b03      	cmp	r3, #3
 800f842:	d149      	bne.n	800f8d8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	3330      	adds	r3, #48	; 0x30
 800f848:	3330      	adds	r3, #48	; 0x30
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fe fbf6 	bl	800e03c <ld_word>
 800f850:	4603      	mov	r3, r0
 800f852:	2b01      	cmp	r3, #1
 800f854:	d140      	bne.n	800f8d8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f858:	3301      	adds	r3, #1
 800f85a:	4619      	mov	r1, r3
 800f85c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f85e:	f7fe fe9d 	bl	800e59c <move_window>
 800f862:	4603      	mov	r3, r0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d137      	bne.n	800f8d8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800f868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86a:	2200      	movs	r2, #0
 800f86c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	3330      	adds	r3, #48	; 0x30
 800f872:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f876:	4618      	mov	r0, r3
 800f878:	f7fe fbe0 	bl	800e03c <ld_word>
 800f87c:	4603      	mov	r3, r0
 800f87e:	461a      	mov	r2, r3
 800f880:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f884:	429a      	cmp	r2, r3
 800f886:	d127      	bne.n	800f8d8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	3330      	adds	r3, #48	; 0x30
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fe fbed 	bl	800e06c <ld_dword>
 800f892:	4603      	mov	r3, r0
 800f894:	4a1b      	ldr	r2, [pc, #108]	; (800f904 <find_volume+0x48c>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d11e      	bne.n	800f8d8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	3330      	adds	r3, #48	; 0x30
 800f89e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fe fbe2 	bl	800e06c <ld_dword>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4a17      	ldr	r2, [pc, #92]	; (800f908 <find_volume+0x490>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d113      	bne.n	800f8d8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	3330      	adds	r3, #48	; 0x30
 800f8b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fe fbd7 	bl	800e06c <ld_dword>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	3330      	adds	r3, #48	; 0x30
 800f8c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fe fbcd 	bl	800e06c <ld_dword>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f8de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f8e0:	4b0a      	ldr	r3, [pc, #40]	; (800f90c <find_volume+0x494>)
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	4b08      	ldr	r3, [pc, #32]	; (800f90c <find_volume+0x494>)
 800f8ea:	801a      	strh	r2, [r3, #0]
 800f8ec:	4b07      	ldr	r3, [pc, #28]	; (800f90c <find_volume+0x494>)
 800f8ee:	881a      	ldrh	r2, [r3, #0]
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f8f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8f6:	f7fe fde9 	bl	800e4cc <clear_lock>
#endif
	return FR_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3758      	adds	r7, #88	; 0x58
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	41615252 	.word	0x41615252
 800f908:	61417272 	.word	0x61417272
 800f90c:	24000190 	.word	0x24000190

0800f910 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f91a:	2309      	movs	r3, #9
 800f91c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01c      	beq.n	800f95e <validate+0x4e>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d018      	beq.n	800f95e <validate+0x4e>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d013      	beq.n	800f95e <validate+0x4e>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	889a      	ldrh	r2, [r3, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	88db      	ldrh	r3, [r3, #6]
 800f940:	429a      	cmp	r2, r3
 800f942:	d10c      	bne.n	800f95e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	785b      	ldrb	r3, [r3, #1]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fe fad8 	bl	800df00 <disk_status>
 800f950:	4603      	mov	r3, r0
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <validate+0x4e>
			res = FR_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d102      	bne.n	800f96a <validate+0x5a>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	e000      	b.n	800f96c <validate+0x5c>
 800f96a:	2300      	movs	r3, #0
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	6013      	str	r3, [r2, #0]
	return res;
 800f970:	7bfb      	ldrb	r3, [r7, #15]
}
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
	...

0800f97c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b088      	sub	sp, #32
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	4613      	mov	r3, r2
 800f988:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f98e:	f107 0310 	add.w	r3, r7, #16
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff fcd5 	bl	800f342 <get_ldnumber>
 800f998:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	da01      	bge.n	800f9a4 <f_mount+0x28>
 800f9a0:	230b      	movs	r3, #11
 800f9a2:	e02b      	b.n	800f9fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f9a4:	4a17      	ldr	r2, [pc, #92]	; (800fa04 <f_mount+0x88>)
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d005      	beq.n	800f9c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f9b4:	69b8      	ldr	r0, [r7, #24]
 800f9b6:	f7fe fd89 	bl	800e4cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	490d      	ldr	r1, [pc, #52]	; (800fa04 <f_mount+0x88>)
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <f_mount+0x66>
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d001      	beq.n	800f9e6 <f_mount+0x6a>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e00a      	b.n	800f9fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f9e6:	f107 010c 	add.w	r1, r7, #12
 800f9ea:	f107 0308 	add.w	r3, r7, #8
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7ff fd41 	bl	800f478 <find_volume>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3720      	adds	r7, #32
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	2400018c 	.word	0x2400018c

0800fa08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b098      	sub	sp, #96	; 0x60
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	4613      	mov	r3, r2
 800fa14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <f_open+0x18>
 800fa1c:	2309      	movs	r3, #9
 800fa1e:	e1ad      	b.n	800fd7c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fa28:	79fa      	ldrb	r2, [r7, #7]
 800fa2a:	f107 0110 	add.w	r1, r7, #16
 800fa2e:	f107 0308 	add.w	r3, r7, #8
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7ff fd20 	bl	800f478 <find_volume>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fa3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f040 8191 	bne.w	800fd6a <f_open+0x362>
		dj.obj.fs = fs;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	f107 0314 	add.w	r3, r7, #20
 800fa52:	4611      	mov	r1, r2
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fc03 	bl	800f260 <follow_path>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fa60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d11a      	bne.n	800fa9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fa68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa6c:	b25b      	sxtb	r3, r3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da03      	bge.n	800fa7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800fa72:	2306      	movs	r3, #6
 800fa74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fa78:	e011      	b.n	800fa9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa7a:	79fb      	ldrb	r3, [r7, #7]
 800fa7c:	f023 0301 	bic.w	r3, r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	bf14      	ite	ne
 800fa84:	2301      	movne	r3, #1
 800fa86:	2300      	moveq	r3, #0
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f107 0314 	add.w	r3, r7, #20
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fbd2 	bl	800e23c <chk_lock>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	f003 031c 	and.w	r3, r3, #28
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d07f      	beq.n	800fba8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800faa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faac:	2b00      	cmp	r3, #0
 800faae:	d017      	beq.n	800fae0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fab4:	2b04      	cmp	r3, #4
 800fab6:	d10e      	bne.n	800fad6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fab8:	f7fe fc1c 	bl	800e2f4 <enq_lock>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d006      	beq.n	800fad0 <f_open+0xc8>
 800fac2:	f107 0314 	add.w	r3, r7, #20
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7ff fb03 	bl	800f0d2 <dir_register>
 800facc:	4603      	mov	r3, r0
 800face:	e000      	b.n	800fad2 <f_open+0xca>
 800fad0:	2312      	movs	r3, #18
 800fad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	f043 0308 	orr.w	r3, r3, #8
 800fadc:	71fb      	strb	r3, [r7, #7]
 800fade:	e010      	b.n	800fb02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fae0:	7ebb      	ldrb	r3, [r7, #26]
 800fae2:	f003 0311 	and.w	r3, r3, #17
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <f_open+0xea>
					res = FR_DENIED;
 800faea:	2307      	movs	r3, #7
 800faec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800faf0:	e007      	b.n	800fb02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	f003 0304 	and.w	r3, r3, #4
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <f_open+0xfa>
 800fafc:	2308      	movs	r3, #8
 800fafe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d168      	bne.n	800fbdc <f_open+0x1d4>
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	f003 0308 	and.w	r3, r3, #8
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d063      	beq.n	800fbdc <f_open+0x1d4>
				dw = GET_FATTIME();
 800fb14:	f7fb f9f8 	bl	800af08 <get_fattime>
 800fb18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1c:	330e      	adds	r3, #14
 800fb1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fe fae1 	bl	800e0e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb28:	3316      	adds	r3, #22
 800fb2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fe fadb 	bl	800e0e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb34:	330b      	adds	r3, #11
 800fb36:	2220      	movs	r2, #32
 800fb38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff fa32 	bl	800efaa <ld_clust>
 800fb46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff fa4a 	bl	800efe8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb56:	331c      	adds	r3, #28
 800fb58:	2100      	movs	r1, #0
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe fac4 	bl	800e0e8 <st_dword>
					fs->wflag = 1;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	2201      	movs	r2, #1
 800fb64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d037      	beq.n	800fbdc <f_open+0x1d4>
						dw = fs->winsect;
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fb72:	f107 0314 	add.w	r3, r7, #20
 800fb76:	2200      	movs	r2, #0
 800fb78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fe ff5d 	bl	800ea3a <remove_chain>
 800fb80:	4603      	mov	r3, r0
 800fb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d126      	bne.n	800fbdc <f_open+0x1d4>
							res = move_window(fs, dw);
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe fd02 	bl	800e59c <move_window>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fba2:	3a01      	subs	r2, #1
 800fba4:	60da      	str	r2, [r3, #12]
 800fba6:	e019      	b.n	800fbdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d115      	bne.n	800fbdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fbb0:	7ebb      	ldrb	r3, [r7, #26]
 800fbb2:	f003 0310 	and.w	r3, r3, #16
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d003      	beq.n	800fbc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fbba:	2304      	movs	r3, #4
 800fbbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fbc0:	e00c      	b.n	800fbdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fbc2:	79fb      	ldrb	r3, [r7, #7]
 800fbc4:	f003 0302 	and.w	r3, r3, #2
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d007      	beq.n	800fbdc <f_open+0x1d4>
 800fbcc:	7ebb      	ldrb	r3, [r7, #26]
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <f_open+0x1d4>
						res = FR_DENIED;
 800fbd6:	2307      	movs	r3, #7
 800fbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fbdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d128      	bne.n	800fc36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fbe4:	79fb      	ldrb	r3, [r7, #7]
 800fbe6:	f003 0308 	and.w	r3, r3, #8
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d003      	beq.n	800fbf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fbee:	79fb      	ldrb	r3, [r7, #7]
 800fbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fbfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc04:	79fb      	ldrb	r3, [r7, #7]
 800fc06:	f023 0301 	bic.w	r3, r3, #1
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	bf14      	ite	ne
 800fc0e:	2301      	movne	r3, #1
 800fc10:	2300      	moveq	r3, #0
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	461a      	mov	r2, r3
 800fc16:	f107 0314 	add.w	r3, r7, #20
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fe fb8b 	bl	800e338 <inc_lock>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d102      	bne.n	800fc36 <f_open+0x22e>
 800fc30:	2302      	movs	r3, #2
 800fc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fc36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f040 8095 	bne.w	800fd6a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc44:	4611      	mov	r1, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff f9af 	bl	800efaa <ld_clust>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc54:	331c      	adds	r3, #28
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fa08 	bl	800e06c <ld_dword>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fc68:	693a      	ldr	r2, [r7, #16]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	88da      	ldrh	r2, [r3, #6]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	79fa      	ldrb	r2, [r7, #7]
 800fc7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3330      	adds	r3, #48	; 0x30
 800fc92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc96:	2100      	movs	r1, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fe fa72 	bl	800e182 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	f003 0320 	and.w	r3, r3, #32
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d060      	beq.n	800fd6a <f_open+0x362>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d05c      	beq.n	800fd6a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	68da      	ldr	r2, [r3, #12]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	025b      	lsls	r3, r3, #9
 800fcbe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	657b      	str	r3, [r7, #84]	; 0x54
 800fccc:	e016      	b.n	800fcfc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe fd1d 	bl	800e712 <get_fat>
 800fcd8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fcda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d802      	bhi.n	800fce6 <f_open+0x2de>
 800fce0:	2302      	movs	r3, #2
 800fce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcec:	d102      	bne.n	800fcf4 <f_open+0x2ec>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fcf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	657b      	str	r3, [r7, #84]	; 0x54
 800fcfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <f_open+0x304>
 800fd04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d8e0      	bhi.n	800fcce <f_open+0x2c6>
				}
				fp->clust = clst;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d127      	bne.n	800fd6a <f_open+0x362>
 800fd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d022      	beq.n	800fd6a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fcd3 	bl	800e6d4 <clust2sect>
 800fd2e:	6478      	str	r0, [r7, #68]	; 0x44
 800fd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d103      	bne.n	800fd3e <f_open+0x336>
						res = FR_INT_ERR;
 800fd36:	2302      	movs	r3, #2
 800fd38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fd3c:	e015      	b.n	800fd6a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fd3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd40:	0a5a      	lsrs	r2, r3, #9
 800fd42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd44:	441a      	add	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	7858      	ldrb	r0, [r3, #1]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6a1a      	ldr	r2, [r3, #32]
 800fd58:	2301      	movs	r3, #1
 800fd5a:	f7fe f911 	bl	800df80 <disk_read>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d002      	beq.n	800fd6a <f_open+0x362>
 800fd64:	2301      	movs	r3, #1
 800fd66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fd6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d002      	beq.n	800fd78 <f_open+0x370>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3760      	adds	r7, #96	; 0x60
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b08e      	sub	sp, #56	; 0x38
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
 800fd90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f107 0214 	add.w	r2, r7, #20
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff fdb3 	bl	800f910 <validate>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fdb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d107      	bne.n	800fdc8 <f_read+0x44>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	7d5b      	ldrb	r3, [r3, #21]
 800fdbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d002      	beq.n	800fdce <f_read+0x4a>
 800fdc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdcc:	e115      	b.n	800fffa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7d1b      	ldrb	r3, [r3, #20]
 800fdd2:	f003 0301 	and.w	r3, r3, #1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <f_read+0x5a>
 800fdda:	2307      	movs	r3, #7
 800fddc:	e10d      	b.n	800fffa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68da      	ldr	r2, [r3, #12]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	6a3b      	ldr	r3, [r7, #32]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	f240 80fe 	bls.w	800fff0 <f_read+0x26c>
 800fdf4:	6a3b      	ldr	r3, [r7, #32]
 800fdf6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fdf8:	e0fa      	b.n	800fff0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	699b      	ldr	r3, [r3, #24]
 800fdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f040 80c6 	bne.w	800ff94 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	0a5b      	lsrs	r3, r3, #9
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	8952      	ldrh	r2, [r2, #10]
 800fe12:	3a01      	subs	r2, #1
 800fe14:	4013      	ands	r3, r2
 800fe16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d12f      	bne.n	800fe7e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d103      	bne.n	800fe2e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	633b      	str	r3, [r7, #48]	; 0x30
 800fe2c:	e013      	b.n	800fe56 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7fe fef9 	bl	800ec34 <clmt_clust>
 800fe42:	6338      	str	r0, [r7, #48]	; 0x30
 800fe44:	e007      	b.n	800fe56 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	69db      	ldr	r3, [r3, #28]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	4610      	mov	r0, r2
 800fe50:	f7fe fc5f 	bl	800e712 <get_fat>
 800fe54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d804      	bhi.n	800fe66 <f_read+0xe2>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2202      	movs	r2, #2
 800fe60:	755a      	strb	r2, [r3, #21]
 800fe62:	2302      	movs	r3, #2
 800fe64:	e0c9      	b.n	800fffa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6c:	d104      	bne.n	800fe78 <f_read+0xf4>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2201      	movs	r2, #1
 800fe72:	755a      	strb	r2, [r3, #21]
 800fe74:	2301      	movs	r3, #1
 800fe76:	e0c0      	b.n	800fffa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	69db      	ldr	r3, [r3, #28]
 800fe84:	4619      	mov	r1, r3
 800fe86:	4610      	mov	r0, r2
 800fe88:	f7fe fc24 	bl	800e6d4 <clust2sect>
 800fe8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d104      	bne.n	800fe9e <f_read+0x11a>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2202      	movs	r2, #2
 800fe98:	755a      	strb	r2, [r3, #21]
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e0ad      	b.n	800fffa <f_read+0x276>
			sect += csect;
 800fe9e:	69ba      	ldr	r2, [r7, #24]
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	4413      	add	r3, r2
 800fea4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	0a5b      	lsrs	r3, r3, #9
 800feaa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d039      	beq.n	800ff26 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800feb2:	69fa      	ldr	r2, [r7, #28]
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	4413      	add	r3, r2
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	8952      	ldrh	r2, [r2, #10]
 800febc:	4293      	cmp	r3, r2
 800febe:	d905      	bls.n	800fecc <f_read+0x148>
					cc = fs->csize - csect;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	461a      	mov	r2, r3
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	7858      	ldrb	r0, [r3, #1]
 800fed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fed6:	f7fe f853 	bl	800df80 <disk_read>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d004      	beq.n	800feea <f_read+0x166>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2201      	movs	r2, #1
 800fee4:	755a      	strb	r2, [r3, #21]
 800fee6:	2301      	movs	r3, #1
 800fee8:	e087      	b.n	800fffa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	7d1b      	ldrb	r3, [r3, #20]
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	da14      	bge.n	800ff1e <f_read+0x19a>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1a      	ldr	r2, [r3, #32]
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d90d      	bls.n	800ff1e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6a1a      	ldr	r2, [r3, #32]
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	025b      	lsls	r3, r3, #9
 800ff0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff0e:	18d0      	adds	r0, r2, r3
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3330      	adds	r3, #48	; 0x30
 800ff14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff18:	4619      	mov	r1, r3
 800ff1a:	f7fe f911 	bl	800e140 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	025b      	lsls	r3, r3, #9
 800ff22:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ff24:	e050      	b.n	800ffc8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	69ba      	ldr	r2, [r7, #24]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d02e      	beq.n	800ff8e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	7d1b      	ldrb	r3, [r3, #20]
 800ff34:	b25b      	sxtb	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	da18      	bge.n	800ff6c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	7858      	ldrb	r0, [r3, #1]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6a1a      	ldr	r2, [r3, #32]
 800ff48:	2301      	movs	r3, #1
 800ff4a:	f7fe f839 	bl	800dfc0 <disk_write>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d004      	beq.n	800ff5e <f_read+0x1da>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2201      	movs	r2, #1
 800ff58:	755a      	strb	r2, [r3, #21]
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e04d      	b.n	800fffa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	7d1b      	ldrb	r3, [r3, #20]
 800ff62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	7858      	ldrb	r0, [r3, #1]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff76:	2301      	movs	r3, #1
 800ff78:	69ba      	ldr	r2, [r7, #24]
 800ff7a:	f7fe f801 	bl	800df80 <disk_read>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <f_read+0x20a>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	755a      	strb	r2, [r3, #21]
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e035      	b.n	800fffa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	69ba      	ldr	r2, [r7, #24]
 800ff92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ffa0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ffa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d901      	bls.n	800ffae <f_read+0x22a>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffbc:	4413      	add	r3, r2
 800ffbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffc4:	f7fe f8bc 	bl	800e140 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ffc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffcc:	4413      	add	r3, r2
 800ffce:	627b      	str	r3, [r7, #36]	; 0x24
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	699a      	ldr	r2, [r3, #24]
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	441a      	add	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	619a      	str	r2, [r3, #24]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	441a      	add	r2, r3
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f47f af01 	bne.w	800fdfa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3738      	adds	r7, #56	; 0x38
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b086      	sub	sp, #24
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f107 0208 	add.w	r2, r7, #8
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff fc7c 	bl	800f910 <validate>
 8010018:	4603      	mov	r3, r0
 801001a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801001c:	7dfb      	ldrb	r3, [r7, #23]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d168      	bne.n	80100f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801002a:	2b00      	cmp	r3, #0
 801002c:	d062      	beq.n	80100f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	b25b      	sxtb	r3, r3
 8010034:	2b00      	cmp	r3, #0
 8010036:	da15      	bge.n	8010064 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	7858      	ldrb	r0, [r3, #1]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1a      	ldr	r2, [r3, #32]
 8010046:	2301      	movs	r3, #1
 8010048:	f7fd ffba 	bl	800dfc0 <disk_write>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <f_sync+0x54>
 8010052:	2301      	movs	r3, #1
 8010054:	e04f      	b.n	80100f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7d1b      	ldrb	r3, [r3, #20]
 801005a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801005e:	b2da      	uxtb	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010064:	f7fa ff50 	bl	800af08 <get_fattime>
 8010068:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7fe fa92 	bl	800e59c <move_window>
 8010078:	4603      	mov	r3, r0
 801007a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801007c:	7dfb      	ldrb	r3, [r7, #23]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d138      	bne.n	80100f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010086:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	330b      	adds	r3, #11
 801008c:	781a      	ldrb	r2, [r3, #0]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	330b      	adds	r3, #11
 8010092:	f042 0220 	orr.w	r2, r2, #32
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6818      	ldr	r0, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	461a      	mov	r2, r3
 80100a4:	68f9      	ldr	r1, [r7, #12]
 80100a6:	f7fe ff9f 	bl	800efe8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f103 021c 	add.w	r2, r3, #28
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	4619      	mov	r1, r3
 80100b6:	4610      	mov	r0, r2
 80100b8:	f7fe f816 	bl	800e0e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3316      	adds	r3, #22
 80100c0:	6939      	ldr	r1, [r7, #16]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fe f810 	bl	800e0e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	3312      	adds	r3, #18
 80100cc:	2100      	movs	r1, #0
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fd ffef 	bl	800e0b2 <st_word>
					fs->wflag = 1;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	2201      	movs	r2, #1
 80100d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fe fa8b 	bl	800e5f8 <sync_fs>
 80100e2:	4603      	mov	r3, r0
 80100e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3718      	adds	r7, #24
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80100fe:	b580      	push	{r7, lr}
 8010100:	b084      	sub	sp, #16
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff ff7b 	bl	8010002 <f_sync>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d118      	bne.n	8010148 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f107 0208 	add.w	r2, r7, #8
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f7ff fbf6 	bl	800f910 <validate>
 8010124:	4603      	mov	r3, r0
 8010126:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10c      	bne.n	8010148 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe f98e 	bl	800e454 <dec_lock>
 8010138:	4603      	mov	r3, r0
 801013a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801013c:	7bfb      	ldrb	r3, [r7, #15]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010148:	7bfb      	ldrb	r3, [r7, #15]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b090      	sub	sp, #64	; 0x40
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f107 0208 	add.w	r2, r7, #8
 8010162:	4611      	mov	r1, r2
 8010164:	4618      	mov	r0, r3
 8010166:	f7ff fbd3 	bl	800f910 <validate>
 801016a:	4603      	mov	r3, r0
 801016c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010170:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010174:	2b00      	cmp	r3, #0
 8010176:	d103      	bne.n	8010180 <f_lseek+0x2e>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	7d5b      	ldrb	r3, [r3, #21]
 801017c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <f_lseek+0x3c>
 8010188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801018c:	e1e6      	b.n	801055c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 80d1 	beq.w	801033a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019e:	d15a      	bne.n	8010256 <f_lseek+0x104>
			tbl = fp->cltbl;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	627a      	str	r2, [r7, #36]	; 0x24
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	617b      	str	r3, [r7, #20]
 80101b0:	2302      	movs	r3, #2
 80101b2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80101ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d03a      	beq.n	8010236 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80101c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	2300      	movs	r3, #0
 80101c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ca:	3302      	adds	r3, #2
 80101cc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80101ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d4:	3301      	adds	r3, #1
 80101d6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fe fa98 	bl	800e712 <get_fat>
 80101e2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d804      	bhi.n	80101f4 <f_lseek+0xa2>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2202      	movs	r2, #2
 80101ee:	755a      	strb	r2, [r3, #21]
 80101f0:	2302      	movs	r3, #2
 80101f2:	e1b3      	b.n	801055c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fa:	d104      	bne.n	8010206 <f_lseek+0xb4>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	755a      	strb	r2, [r3, #21]
 8010202:	2301      	movs	r3, #1
 8010204:	e1aa      	b.n	801055c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3301      	adds	r3, #1
 801020a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801020c:	429a      	cmp	r2, r3
 801020e:	d0de      	beq.n	80101ce <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	429a      	cmp	r2, r3
 8010216:	d809      	bhi.n	801022c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	1d1a      	adds	r2, r3, #4
 801021c:	627a      	str	r2, [r7, #36]	; 0x24
 801021e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010224:	1d1a      	adds	r2, r3, #4
 8010226:	627a      	str	r2, [r7, #36]	; 0x24
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	695b      	ldr	r3, [r3, #20]
 8010230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010232:	429a      	cmp	r2, r3
 8010234:	d3c4      	bcc.n	80101c0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801023c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801023e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	429a      	cmp	r2, r3
 8010244:	d803      	bhi.n	801024e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	2200      	movs	r2, #0
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	e184      	b.n	8010558 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801024e:	2311      	movs	r3, #17
 8010250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010254:	e180      	b.n	8010558 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	429a      	cmp	r2, r3
 801025e:	d902      	bls.n	8010266 <f_lseek+0x114>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 8172 	beq.w	8010558 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	3b01      	subs	r3, #1
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7fe fcda 	bl	800ec34 <clmt_clust>
 8010280:	4602      	mov	r2, r0
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	69db      	ldr	r3, [r3, #28]
 801028c:	4619      	mov	r1, r3
 801028e:	4610      	mov	r0, r2
 8010290:	f7fe fa20 	bl	800e6d4 <clust2sect>
 8010294:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d104      	bne.n	80102a6 <f_lseek+0x154>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2202      	movs	r2, #2
 80102a0:	755a      	strb	r2, [r3, #21]
 80102a2:	2302      	movs	r3, #2
 80102a4:	e15a      	b.n	801055c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	0a5b      	lsrs	r3, r3, #9
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	8952      	ldrh	r2, [r2, #10]
 80102b0:	3a01      	subs	r2, #1
 80102b2:	4013      	ands	r3, r2
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	4413      	add	r3, r2
 80102b8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	699b      	ldr	r3, [r3, #24]
 80102be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 8148 	beq.w	8010558 <f_lseek+0x406>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	69ba      	ldr	r2, [r7, #24]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	f000 8142 	beq.w	8010558 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
 80102d8:	b25b      	sxtb	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	da18      	bge.n	8010310 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	7858      	ldrb	r0, [r3, #1]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6a1a      	ldr	r2, [r3, #32]
 80102ec:	2301      	movs	r3, #1
 80102ee:	f7fd fe67 	bl	800dfc0 <disk_write>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <f_lseek+0x1b0>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	755a      	strb	r2, [r3, #21]
 80102fe:	2301      	movs	r3, #1
 8010300:	e12c      	b.n	801055c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	7d1b      	ldrb	r3, [r3, #20]
 8010306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801030a:	b2da      	uxtb	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	7858      	ldrb	r0, [r3, #1]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801031a:	2301      	movs	r3, #1
 801031c:	69ba      	ldr	r2, [r7, #24]
 801031e:	f7fd fe2f 	bl	800df80 <disk_read>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <f_lseek+0x1e0>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	755a      	strb	r2, [r3, #21]
 801032e:	2301      	movs	r3, #1
 8010330:	e114      	b.n	801055c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	621a      	str	r2, [r3, #32]
 8010338:	e10e      	b.n	8010558 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	429a      	cmp	r2, r3
 8010342:	d908      	bls.n	8010356 <f_lseek+0x204>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	7d1b      	ldrb	r3, [r3, #20]
 8010348:	f003 0302 	and.w	r3, r3, #2
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	699b      	ldr	r3, [r3, #24]
 801035a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	637b      	str	r3, [r7, #52]	; 0x34
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010364:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f000 80a7 	beq.w	80104bc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	895b      	ldrh	r3, [r3, #10]
 8010372:	025b      	lsls	r3, r3, #9
 8010374:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d01b      	beq.n	80103b4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	1e5a      	subs	r2, r3, #1
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	fbb2 f2f3 	udiv	r2, r2, r3
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	1e59      	subs	r1, r3, #1
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010390:	429a      	cmp	r2, r3
 8010392:	d30f      	bcc.n	80103b4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	1e5a      	subs	r2, r3, #1
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	425b      	negs	r3, r3
 801039c:	401a      	ands	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	69db      	ldr	r3, [r3, #28]
 80103b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80103b2:	e022      	b.n	80103fa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80103ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d119      	bne.n	80103f4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2100      	movs	r1, #0
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe fb9d 	bl	800eb04 <create_chain>
 80103ca:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d104      	bne.n	80103dc <f_lseek+0x28a>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2202      	movs	r2, #2
 80103d6:	755a      	strb	r2, [r3, #21]
 80103d8:	2302      	movs	r3, #2
 80103da:	e0bf      	b.n	801055c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e2:	d104      	bne.n	80103ee <f_lseek+0x29c>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	755a      	strb	r2, [r3, #21]
 80103ea:	2301      	movs	r3, #1
 80103ec:	e0b6      	b.n	801055c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d05d      	beq.n	80104bc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010400:	e03a      	b.n	8010478 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	603b      	str	r3, [r7, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	441a      	add	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	7d1b      	ldrb	r3, [r3, #20]
 801041a:	f003 0302 	and.w	r3, r3, #2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fb6c 	bl	800eb04 <create_chain>
 801042c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010430:	2b00      	cmp	r3, #0
 8010432:	d108      	bne.n	8010446 <f_lseek+0x2f4>
							ofs = 0; break;
 8010434:	2300      	movs	r3, #0
 8010436:	603b      	str	r3, [r7, #0]
 8010438:	e022      	b.n	8010480 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801043e:	4618      	mov	r0, r3
 8010440:	f7fe f967 	bl	800e712 <get_fat>
 8010444:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044c:	d104      	bne.n	8010458 <f_lseek+0x306>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	755a      	strb	r2, [r3, #21]
 8010454:	2301      	movs	r3, #1
 8010456:	e081      	b.n	801055c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	2b01      	cmp	r3, #1
 801045c:	d904      	bls.n	8010468 <f_lseek+0x316>
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	695b      	ldr	r3, [r3, #20]
 8010462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010464:	429a      	cmp	r2, r3
 8010466:	d304      	bcc.n	8010472 <f_lseek+0x320>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2202      	movs	r2, #2
 801046c:	755a      	strb	r2, [r3, #21]
 801046e:	2302      	movs	r3, #2
 8010470:	e074      	b.n	801055c <f_lseek+0x40a>
					fp->clust = clst;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010476:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010478:	683a      	ldr	r2, [r7, #0]
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	429a      	cmp	r2, r3
 801047e:	d8c0      	bhi.n	8010402 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	699a      	ldr	r2, [r3, #24]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	441a      	add	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010492:	2b00      	cmp	r3, #0
 8010494:	d012      	beq.n	80104bc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801049a:	4618      	mov	r0, r3
 801049c:	f7fe f91a 	bl	800e6d4 <clust2sect>
 80104a0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80104a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d104      	bne.n	80104b2 <f_lseek+0x360>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2202      	movs	r2, #2
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	2302      	movs	r3, #2
 80104b0:	e054      	b.n	801055c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	0a5b      	lsrs	r3, r3, #9
 80104b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104b8:	4413      	add	r3, r2
 80104ba:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	699a      	ldr	r2, [r3, #24]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d90a      	bls.n	80104de <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	699a      	ldr	r2, [r3, #24]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	699b      	ldr	r3, [r3, #24]
 80104e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d036      	beq.n	8010558 <f_lseek+0x406>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a1b      	ldr	r3, [r3, #32]
 80104ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d031      	beq.n	8010558 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	b25b      	sxtb	r3, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da18      	bge.n	8010530 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	7858      	ldrb	r0, [r3, #1]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a1a      	ldr	r2, [r3, #32]
 801050c:	2301      	movs	r3, #1
 801050e:	f7fd fd57 	bl	800dfc0 <disk_write>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <f_lseek+0x3d0>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	755a      	strb	r2, [r3, #21]
 801051e:	2301      	movs	r3, #1
 8010520:	e01c      	b.n	801055c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801052a:	b2da      	uxtb	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	7858      	ldrb	r0, [r3, #1]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801053a:	2301      	movs	r3, #1
 801053c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801053e:	f7fd fd1f 	bl	800df80 <disk_read>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d004      	beq.n	8010552 <f_lseek+0x400>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	755a      	strb	r2, [r3, #21]
 801054e:	2301      	movs	r3, #1
 8010550:	e004      	b.n	801055c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010556:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801055c:	4618      	mov	r0, r3
 801055e:	3740      	adds	r7, #64	; 0x40
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010564:	b480      	push	{r7}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	4613      	mov	r3, r2
 8010570:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010572:	2301      	movs	r3, #1
 8010574:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801057a:	4b1f      	ldr	r3, [pc, #124]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 801057c:	7a5b      	ldrb	r3, [r3, #9]
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b00      	cmp	r3, #0
 8010582:	d131      	bne.n	80105e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010584:	4b1c      	ldr	r3, [pc, #112]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 8010586:	7a5b      	ldrb	r3, [r3, #9]
 8010588:	b2db      	uxtb	r3, r3
 801058a:	461a      	mov	r2, r3
 801058c:	4b1a      	ldr	r3, [pc, #104]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 801058e:	2100      	movs	r1, #0
 8010590:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010592:	4b19      	ldr	r3, [pc, #100]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 8010594:	7a5b      	ldrb	r3, [r3, #9]
 8010596:	b2db      	uxtb	r3, r3
 8010598:	4a17      	ldr	r2, [pc, #92]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80105a2:	4b15      	ldr	r3, [pc, #84]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105a4:	7a5b      	ldrb	r3, [r3, #9]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	461a      	mov	r2, r3
 80105aa:	4b13      	ldr	r3, [pc, #76]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105ac:	4413      	add	r3, r2
 80105ae:	79fa      	ldrb	r2, [r7, #7]
 80105b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80105b2:	4b11      	ldr	r3, [pc, #68]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105b4:	7a5b      	ldrb	r3, [r3, #9]
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	b2d1      	uxtb	r1, r2
 80105bc:	4a0e      	ldr	r2, [pc, #56]	; (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105be:	7251      	strb	r1, [r2, #9]
 80105c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80105c2:	7dbb      	ldrb	r3, [r7, #22]
 80105c4:	3330      	adds	r3, #48	; 0x30
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	3301      	adds	r3, #1
 80105d0:	223a      	movs	r2, #58	; 0x3a
 80105d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3302      	adds	r3, #2
 80105d8:	222f      	movs	r2, #47	; 0x2f
 80105da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	3303      	adds	r3, #3
 80105e0:	2200      	movs	r2, #0
 80105e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	371c      	adds	r7, #28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	240001b4 	.word	0x240001b4

080105fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010606:	2200      	movs	r2, #0
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff ffaa 	bl	8010564 <FATFS_LinkDriverEx>
 8010610:	4603      	mov	r3, r0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
	...

0801061c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010620:	2200      	movs	r2, #0
 8010622:	490e      	ldr	r1, [pc, #56]	; (801065c <MX_USB_HOST_Init+0x40>)
 8010624:	480e      	ldr	r0, [pc, #56]	; (8010660 <MX_USB_HOST_Init+0x44>)
 8010626:	f7fc f913 	bl	800c850 <USBH_Init>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010630:	f7f0 fb9a 	bl	8000d68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8010634:	490b      	ldr	r1, [pc, #44]	; (8010664 <MX_USB_HOST_Init+0x48>)
 8010636:	480a      	ldr	r0, [pc, #40]	; (8010660 <MX_USB_HOST_Init+0x44>)
 8010638:	f7fc f998 	bl	800c96c <USBH_RegisterClass>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010642:	f7f0 fb91 	bl	8000d68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8010646:	4806      	ldr	r0, [pc, #24]	; (8010660 <MX_USB_HOST_Init+0x44>)
 8010648:	f7fc fa1c 	bl	800ca84 <USBH_Start>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010652:	f7f0 fb89 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010656:	bf00      	nop
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	0801067d 	.word	0x0801067d
 8010660:	2402085c 	.word	0x2402085c
 8010664:	24000098 	.word	0x24000098

08010668 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 801066c:	4802      	ldr	r0, [pc, #8]	; (8010678 <MX_USB_HOST_Process+0x10>)
 801066e:	f7fc fa19 	bl	800caa4 <USBH_Process>
}
 8010672:	bf00      	nop
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	2402085c 	.word	0x2402085c

0801067c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	460b      	mov	r3, r1
 8010686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010688:	78fb      	ldrb	r3, [r7, #3]
 801068a:	3b01      	subs	r3, #1
 801068c:	2b04      	cmp	r3, #4
 801068e:	d826      	bhi.n	80106de <USBH_UserProcess+0x62>
 8010690:	a201      	add	r2, pc, #4	; (adr r2, 8010698 <USBH_UserProcess+0x1c>)
 8010692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010696:	bf00      	nop
 8010698:	080106df 	.word	0x080106df
 801069c:	080106b5 	.word	0x080106b5
 80106a0:	080106df 	.word	0x080106df
 80106a4:	080106d7 	.word	0x080106d7
 80106a8:	080106ad 	.word	0x080106ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80106ac:	4b0e      	ldr	r3, [pc, #56]	; (80106e8 <USBH_UserProcess+0x6c>)
 80106ae:	2203      	movs	r2, #3
 80106b0:	701a      	strb	r2, [r3, #0]
  break;
 80106b2:	e015      	b.n	80106e0 <USBH_UserProcess+0x64>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80106b4:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <USBH_UserProcess+0x6c>)
 80106b6:	2202      	movs	r2, #2
 80106b8:	701a      	strb	r2, [r3, #0]
		//update_app();
		update_source();
 80106ba:	f7f0 fe3b 	bl	8001334 <update_source>
		LED_OFF;
 80106be:	2201      	movs	r2, #1
 80106c0:	2108      	movs	r1, #8
 80106c2:	480a      	ldr	r0, [pc, #40]	; (80106ec <USBH_UserProcess+0x70>)
 80106c4:	f7f3 fe34 	bl	8004330 <HAL_GPIO_WritePin>
 80106c8:	2201      	movs	r2, #1
 80106ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80106ce:	4808      	ldr	r0, [pc, #32]	; (80106f0 <USBH_UserProcess+0x74>)
 80106d0:	f7f3 fe2e 	bl	8004330 <HAL_GPIO_WritePin>
  break;
 80106d4:	e004      	b.n	80106e0 <USBH_UserProcess+0x64>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80106d6:	4b04      	ldr	r3, [pc, #16]	; (80106e8 <USBH_UserProcess+0x6c>)
 80106d8:	2201      	movs	r2, #1
 80106da:	701a      	strb	r2, [r3, #0]
  break;
 80106dc:	e000      	b.n	80106e0 <USBH_UserProcess+0x64>

  default:
  break;
 80106de:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80106e0:	bf00      	nop
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	240001c0 	.word	0x240001c0
 80106ec:	58021000 	.word	0x58021000
 80106f0:	58021800 	.word	0x58021800

080106f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b08a      	sub	sp, #40	; 0x28
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106fc:	f107 0314 	add.w	r3, r7, #20
 8010700:	2200      	movs	r2, #0
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	605a      	str	r2, [r3, #4]
 8010706:	609a      	str	r2, [r3, #8]
 8010708:	60da      	str	r2, [r3, #12]
 801070a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a1e      	ldr	r2, [pc, #120]	; (801078c <HAL_HCD_MspInit+0x98>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d136      	bne.n	8010784 <HAL_HCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010716:	4b1e      	ldr	r3, [pc, #120]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 8010718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801071c:	4a1c      	ldr	r2, [pc, #112]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 801071e:	f043 0302 	orr.w	r3, r3, #2
 8010722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010726:	4b1a      	ldr	r3, [pc, #104]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 8010728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801072c:	f003 0302 	and.w	r3, r3, #2
 8010730:	613b      	str	r3, [r7, #16]
 8010732:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8010734:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8010738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801073a:	2302      	movs	r3, #2
 801073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801073e:	2300      	movs	r3, #0
 8010740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010742:	2302      	movs	r3, #2
 8010744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8010746:	230c      	movs	r3, #12
 8010748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801074a:	f107 0314 	add.w	r3, r7, #20
 801074e:	4619      	mov	r1, r3
 8010750:	4810      	ldr	r0, [pc, #64]	; (8010794 <HAL_HCD_MspInit+0xa0>)
 8010752:	f7f3 fc25 	bl	8003fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010756:	4b0e      	ldr	r3, [pc, #56]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 8010758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801075c:	4a0c      	ldr	r2, [pc, #48]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 801075e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010762:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010766:	4b0a      	ldr	r3, [pc, #40]	; (8010790 <HAL_HCD_MspInit+0x9c>)
 8010768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801076c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8010774:	2200      	movs	r2, #0
 8010776:	2105      	movs	r1, #5
 8010778:	204d      	movs	r0, #77	; 0x4d
 801077a:	f7f3 f9fe 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801077e:	204d      	movs	r0, #77	; 0x4d
 8010780:	f7f3 fa15 	bl	8003bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010784:	bf00      	nop
 8010786:	3728      	adds	r7, #40	; 0x28
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	40040000 	.word	0x40040000
 8010790:	58024400 	.word	0x58024400
 8010794:	58020400 	.word	0x58020400

08010798 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fc fd4f 	bl	800d24a <USBH_LL_IncTimer>
}
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fc fd87 	bl	800d2d6 <USBH_LL_Connect>
}
 80107c8:	bf00      	nop
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fc fd90 	bl	800d304 <USBH_LL_Disconnect>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	70fb      	strb	r3, [r7, #3]
 80107f8:	4613      	mov	r3, r2
 80107fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80107fc:	bf00      	nop
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr

08010808 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010816:	4618      	mov	r0, r3
 8010818:	f7fc fd41 	bl	800d29e <USBH_LL_PortEnabled>
}
 801081c:	bf00      	nop
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010832:	4618      	mov	r0, r3
 8010834:	f7fc fd41 	bl	800d2ba <USBH_LL_PortDisabled>
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801084e:	2b00      	cmp	r3, #0
 8010850:	d12f      	bne.n	80108b2 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8010852:	4a1a      	ldr	r2, [pc, #104]	; (80108bc <USBH_LL_Init+0x7c>)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4a17      	ldr	r2, [pc, #92]	; (80108bc <USBH_LL_Init+0x7c>)
 801085e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010862:	4b16      	ldr	r3, [pc, #88]	; (80108bc <USBH_LL_Init+0x7c>)
 8010864:	4a16      	ldr	r2, [pc, #88]	; (80108c0 <USBH_LL_Init+0x80>)
 8010866:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8010868:	4b14      	ldr	r3, [pc, #80]	; (80108bc <USBH_LL_Init+0x7c>)
 801086a:	2210      	movs	r2, #16
 801086c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <USBH_LL_Init+0x7c>)
 8010870:	2201      	movs	r2, #1
 8010872:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010874:	4b11      	ldr	r3, [pc, #68]	; (80108bc <USBH_LL_Init+0x7c>)
 8010876:	2200      	movs	r2, #0
 8010878:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801087a:	4b10      	ldr	r3, [pc, #64]	; (80108bc <USBH_LL_Init+0x7c>)
 801087c:	2202      	movs	r2, #2
 801087e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010880:	4b0e      	ldr	r3, [pc, #56]	; (80108bc <USBH_LL_Init+0x7c>)
 8010882:	2200      	movs	r2, #0
 8010884:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010886:	4b0d      	ldr	r3, [pc, #52]	; (80108bc <USBH_LL_Init+0x7c>)
 8010888:	2200      	movs	r2, #0
 801088a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801088c:	4b0b      	ldr	r3, [pc, #44]	; (80108bc <USBH_LL_Init+0x7c>)
 801088e:	2200      	movs	r2, #0
 8010890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010892:	480a      	ldr	r0, [pc, #40]	; (80108bc <USBH_LL_Init+0x7c>)
 8010894:	f7f3 fd80 	bl	8004398 <HAL_HCD_Init>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 801089e:	f7f0 fa63 	bl	8000d68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80108a2:	4806      	ldr	r0, [pc, #24]	; (80108bc <USBH_LL_Init+0x7c>)
 80108a4:	f7f4 f984 	bl	8004bb0 <HAL_HCD_GetCurrentFrame>
 80108a8:	4603      	mov	r3, r0
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fc fcbd 	bl	800d22c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	24020c34 	.word	0x24020c34
 80108c0:	40040000 	.word	0x40040000

080108c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108da:	4618      	mov	r0, r3
 80108dc:	f7f4 f8f0 	bl	8004ac0 <HAL_HCD_Start>
 80108e0:	4603      	mov	r3, r0
 80108e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f000 f992 	bl	8010c10 <USBH_Get_USB_Status>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b084      	sub	sp, #16
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010906:	2300      	movs	r3, #0
 8010908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010910:	4618      	mov	r0, r3
 8010912:	f7f4 f8f8 	bl	8004b06 <HAL_HCD_Stop>
 8010916:	4603      	mov	r3, r0
 8010918:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801091a:	7bfb      	ldrb	r3, [r7, #15]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 f977 	bl	8010c10 <USBH_Get_USB_Status>
 8010922:	4603      	mov	r3, r0
 8010924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010926:	7bbb      	ldrb	r3, [r7, #14]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010938:	2301      	movs	r3, #1
 801093a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010942:	4618      	mov	r0, r3
 8010944:	f7f4 f942 	bl	8004bcc <HAL_HCD_GetCurrentSpeed>
 8010948:	4603      	mov	r3, r0
 801094a:	2b02      	cmp	r3, #2
 801094c:	d00c      	beq.n	8010968 <USBH_LL_GetSpeed+0x38>
 801094e:	2b02      	cmp	r3, #2
 8010950:	d80d      	bhi.n	801096e <USBH_LL_GetSpeed+0x3e>
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <USBH_LL_GetSpeed+0x2c>
 8010956:	2b01      	cmp	r3, #1
 8010958:	d003      	beq.n	8010962 <USBH_LL_GetSpeed+0x32>
 801095a:	e008      	b.n	801096e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801095c:	2300      	movs	r3, #0
 801095e:	73fb      	strb	r3, [r7, #15]
    break;
 8010960:	e008      	b.n	8010974 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010962:	2301      	movs	r3, #1
 8010964:	73fb      	strb	r3, [r7, #15]
    break;
 8010966:	e005      	b.n	8010974 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010968:	2302      	movs	r3, #2
 801096a:	73fb      	strb	r3, [r7, #15]
    break;
 801096c:	e002      	b.n	8010974 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801096e:	2301      	movs	r3, #1
 8010970:	73fb      	strb	r3, [r7, #15]
    break;
 8010972:	bf00      	nop
  }
  return  speed;
 8010974:	7bfb      	ldrb	r3, [r7, #15]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b084      	sub	sp, #16
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010986:	2300      	movs	r3, #0
 8010988:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010994:	4618      	mov	r0, r3
 8010996:	f7f4 f8d3 	bl	8004b40 <HAL_HCD_ResetPort>
 801099a:	4603      	mov	r3, r0
 801099c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801099e:	7bfb      	ldrb	r3, [r7, #15]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f000 f935 	bl	8010c10 <USBH_Get_USB_Status>
 80109a6:	4603      	mov	r3, r0
 80109a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3710      	adds	r7, #16
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	460b      	mov	r3, r1
 80109be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109c6:	78fa      	ldrb	r2, [r7, #3]
 80109c8:	4611      	mov	r1, r2
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7f4 f8db 	bl	8004b86 <HAL_HCD_HC_GetXferCount>
 80109d0:	4603      	mov	r3, r0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3708      	adds	r7, #8
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80109da:	b590      	push	{r4, r7, lr}
 80109dc:	b089      	sub	sp, #36	; 0x24
 80109de:	af04      	add	r7, sp, #16
 80109e0:	6078      	str	r0, [r7, #4]
 80109e2:	4608      	mov	r0, r1
 80109e4:	4611      	mov	r1, r2
 80109e6:	461a      	mov	r2, r3
 80109e8:	4603      	mov	r3, r0
 80109ea:	70fb      	strb	r3, [r7, #3]
 80109ec:	460b      	mov	r3, r1
 80109ee:	70bb      	strb	r3, [r7, #2]
 80109f0:	4613      	mov	r3, r2
 80109f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109f8:	2300      	movs	r3, #0
 80109fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a02:	787c      	ldrb	r4, [r7, #1]
 8010a04:	78ba      	ldrb	r2, [r7, #2]
 8010a06:	78f9      	ldrb	r1, [r7, #3]
 8010a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a0a:	9302      	str	r3, [sp, #8]
 8010a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	4623      	mov	r3, r4
 8010a1a:	f7f3 fd1f 	bl	800445c <HAL_HCD_HC_Init>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a22:	7bfb      	ldrb	r3, [r7, #15]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 f8f3 	bl	8010c10 <USBH_Get_USB_Status>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3714      	adds	r7, #20
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd90      	pop	{r4, r7, pc}

08010a38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	460b      	mov	r3, r1
 8010a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a52:	78fa      	ldrb	r2, [r7, #3]
 8010a54:	4611      	mov	r1, r2
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7f3 fd98 	bl	800458c <HAL_HCD_HC_Halt>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f8d4 	bl	8010c10 <USBH_Get_USB_Status>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010a76:	b590      	push	{r4, r7, lr}
 8010a78:	b089      	sub	sp, #36	; 0x24
 8010a7a:	af04      	add	r7, sp, #16
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	4608      	mov	r0, r1
 8010a80:	4611      	mov	r1, r2
 8010a82:	461a      	mov	r2, r3
 8010a84:	4603      	mov	r3, r0
 8010a86:	70fb      	strb	r3, [r7, #3]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70bb      	strb	r3, [r7, #2]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a9e:	787c      	ldrb	r4, [r7, #1]
 8010aa0:	78ba      	ldrb	r2, [r7, #2]
 8010aa2:	78f9      	ldrb	r1, [r7, #3]
 8010aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010aa8:	9303      	str	r3, [sp, #12]
 8010aaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010aac:	9302      	str	r3, [sp, #8]
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	4623      	mov	r3, r4
 8010aba:	f7f3 fd8b 	bl	80045d4 <HAL_HCD_HC_SubmitRequest>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f000 f8a3 	bl	8010c10 <USBH_Get_USB_Status>
 8010aca:	4603      	mov	r3, r0
 8010acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3714      	adds	r7, #20
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd90      	pop	{r4, r7, pc}

08010ad8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010aea:	78fa      	ldrb	r2, [r7, #3]
 8010aec:	4611      	mov	r1, r2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7f4 f834 	bl	8004b5c <HAL_HCD_HC_GetURBState>
 8010af4:	4603      	mov	r3, r0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b082      	sub	sp, #8
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	460b      	mov	r3, r1
 8010b08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d103      	bne.n	8010b1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f000 f8a6 	bl	8010c68 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010b1c:	20c8      	movs	r0, #200	; 0xc8
 8010b1e:	f7f2 fefd 	bl	800391c <HAL_Delay>
  return USBH_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	460b      	mov	r3, r1
 8010b36:	70fb      	strb	r3, [r7, #3]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010b44:	78fa      	ldrb	r2, [r7, #3]
 8010b46:	68f9      	ldr	r1, [r7, #12]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4413      	add	r3, r2
 8010b4e:	00db      	lsls	r3, r3, #3
 8010b50:	440b      	add	r3, r1
 8010b52:	333b      	adds	r3, #59	; 0x3b
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010b5a:	78fa      	ldrb	r2, [r7, #3]
 8010b5c:	68f9      	ldr	r1, [r7, #12]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	4413      	add	r3, r2
 8010b64:	00db      	lsls	r3, r3, #3
 8010b66:	440b      	add	r3, r1
 8010b68:	3350      	adds	r3, #80	; 0x50
 8010b6a:	78ba      	ldrb	r2, [r7, #2]
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	e009      	b.n	8010b84 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010b70:	78fa      	ldrb	r2, [r7, #3]
 8010b72:	68f9      	ldr	r1, [r7, #12]
 8010b74:	4613      	mov	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	4413      	add	r3, r2
 8010b7a:	00db      	lsls	r3, r3, #3
 8010b7c:	440b      	add	r3, r1
 8010b7e:	3351      	adds	r3, #81	; 0x51
 8010b80:	78ba      	ldrb	r2, [r7, #2]
 8010b82:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3714      	adds	r7, #20
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b92:	b480      	push	{r7}
 8010b94:	b085      	sub	sp, #20
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ba8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010baa:	78fa      	ldrb	r2, [r7, #3]
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	00db      	lsls	r3, r3, #3
 8010bb6:	440b      	add	r3, r1
 8010bb8:	333b      	adds	r3, #59	; 0x3b
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00a      	beq.n	8010bd6 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010bc0:	78fa      	ldrb	r2, [r7, #3]
 8010bc2:	68b9      	ldr	r1, [r7, #8]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	4413      	add	r3, r2
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	440b      	add	r3, r1
 8010bce:	3350      	adds	r3, #80	; 0x50
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	73fb      	strb	r3, [r7, #15]
 8010bd4:	e009      	b.n	8010bea <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010bd6:	78fa      	ldrb	r2, [r7, #3]
 8010bd8:	68b9      	ldr	r1, [r7, #8]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	4413      	add	r3, r2
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	440b      	add	r3, r1
 8010be4:	3351      	adds	r3, #81	; 0x51
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7f2 fe8b 	bl	800391c <HAL_Delay>
}
 8010c06:	bf00      	nop
 8010c08:	3708      	adds	r7, #8
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
	...

08010c10 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	d817      	bhi.n	8010c54 <USBH_Get_USB_Status+0x44>
 8010c24:	a201      	add	r2, pc, #4	; (adr r2, 8010c2c <USBH_Get_USB_Status+0x1c>)
 8010c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2a:	bf00      	nop
 8010c2c:	08010c3d 	.word	0x08010c3d
 8010c30:	08010c43 	.word	0x08010c43
 8010c34:	08010c49 	.word	0x08010c49
 8010c38:	08010c4f 	.word	0x08010c4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c40:	e00b      	b.n	8010c5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010c42:	2302      	movs	r3, #2
 8010c44:	73fb      	strb	r3, [r7, #15]
    break;
 8010c46:	e008      	b.n	8010c5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c4c:	e005      	b.n	8010c5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010c4e:	2302      	movs	r3, #2
 8010c50:	73fb      	strb	r3, [r7, #15]
    break;
 8010c52:	e002      	b.n	8010c5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010c54:	2302      	movs	r3, #2
 8010c56:	73fb      	strb	r3, [r7, #15]
    break;
 8010c58:	bf00      	nop
  }
  return usb_status;
 8010c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	4603      	mov	r3, r0
 8010c70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d102      	bne.n	8010c82 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	73fb      	strb	r3, [r7, #15]
 8010c80:	e001      	b.n	8010c86 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010c82:	2300      	movs	r3, #0
 8010c84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,(GPIO_PinState)data);
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c8e:	4803      	ldr	r0, [pc, #12]	; (8010c9c <MX_DriverVbusHS+0x34>)
 8010c90:	f7f3 fb4e 	bl	8004330 <HAL_GPIO_WritePin>
}
 8010c94:	bf00      	nop
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	58020000 	.word	0x58020000

08010ca0 <__errno>:
 8010ca0:	4b01      	ldr	r3, [pc, #4]	; (8010ca8 <__errno+0x8>)
 8010ca2:	6818      	ldr	r0, [r3, #0]
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	240000b8 	.word	0x240000b8

08010cac <__libc_init_array>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4d0d      	ldr	r5, [pc, #52]	; (8010ce4 <__libc_init_array+0x38>)
 8010cb0:	4c0d      	ldr	r4, [pc, #52]	; (8010ce8 <__libc_init_array+0x3c>)
 8010cb2:	1b64      	subs	r4, r4, r5
 8010cb4:	10a4      	asrs	r4, r4, #2
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	42a6      	cmp	r6, r4
 8010cba:	d109      	bne.n	8010cd0 <__libc_init_array+0x24>
 8010cbc:	4d0b      	ldr	r5, [pc, #44]	; (8010cec <__libc_init_array+0x40>)
 8010cbe:	4c0c      	ldr	r4, [pc, #48]	; (8010cf0 <__libc_init_array+0x44>)
 8010cc0:	f000 f906 	bl	8010ed0 <_init>
 8010cc4:	1b64      	subs	r4, r4, r5
 8010cc6:	10a4      	asrs	r4, r4, #2
 8010cc8:	2600      	movs	r6, #0
 8010cca:	42a6      	cmp	r6, r4
 8010ccc:	d105      	bne.n	8010cda <__libc_init_array+0x2e>
 8010cce:	bd70      	pop	{r4, r5, r6, pc}
 8010cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cd4:	4798      	blx	r3
 8010cd6:	3601      	adds	r6, #1
 8010cd8:	e7ee      	b.n	8010cb8 <__libc_init_array+0xc>
 8010cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cde:	4798      	blx	r3
 8010ce0:	3601      	adds	r6, #1
 8010ce2:	e7f2      	b.n	8010cca <__libc_init_array+0x1e>
 8010ce4:	08011034 	.word	0x08011034
 8010ce8:	08011034 	.word	0x08011034
 8010cec:	08011034 	.word	0x08011034
 8010cf0:	08011038 	.word	0x08011038

08010cf4 <malloc>:
 8010cf4:	4b02      	ldr	r3, [pc, #8]	; (8010d00 <malloc+0xc>)
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	f000 b871 	b.w	8010de0 <_malloc_r>
 8010cfe:	bf00      	nop
 8010d00:	240000b8 	.word	0x240000b8

08010d04 <free>:
 8010d04:	4b02      	ldr	r3, [pc, #8]	; (8010d10 <free+0xc>)
 8010d06:	4601      	mov	r1, r0
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	f000 b819 	b.w	8010d40 <_free_r>
 8010d0e:	bf00      	nop
 8010d10:	240000b8 	.word	0x240000b8

08010d14 <memcpy>:
 8010d14:	440a      	add	r2, r1
 8010d16:	4291      	cmp	r1, r2
 8010d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d1c:	d100      	bne.n	8010d20 <memcpy+0xc>
 8010d1e:	4770      	bx	lr
 8010d20:	b510      	push	{r4, lr}
 8010d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d2a:	4291      	cmp	r1, r2
 8010d2c:	d1f9      	bne.n	8010d22 <memcpy+0xe>
 8010d2e:	bd10      	pop	{r4, pc}

08010d30 <memset>:
 8010d30:	4402      	add	r2, r0
 8010d32:	4603      	mov	r3, r0
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d100      	bne.n	8010d3a <memset+0xa>
 8010d38:	4770      	bx	lr
 8010d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d3e:	e7f9      	b.n	8010d34 <memset+0x4>

08010d40 <_free_r>:
 8010d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d42:	2900      	cmp	r1, #0
 8010d44:	d048      	beq.n	8010dd8 <_free_r+0x98>
 8010d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d4a:	9001      	str	r0, [sp, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d52:	bfb8      	it	lt
 8010d54:	18e4      	addlt	r4, r4, r3
 8010d56:	f000 f8ad 	bl	8010eb4 <__malloc_lock>
 8010d5a:	4a20      	ldr	r2, [pc, #128]	; (8010ddc <_free_r+0x9c>)
 8010d5c:	9801      	ldr	r0, [sp, #4]
 8010d5e:	6813      	ldr	r3, [r2, #0]
 8010d60:	4615      	mov	r5, r2
 8010d62:	b933      	cbnz	r3, 8010d72 <_free_r+0x32>
 8010d64:	6063      	str	r3, [r4, #4]
 8010d66:	6014      	str	r4, [r2, #0]
 8010d68:	b003      	add	sp, #12
 8010d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d6e:	f000 b8a7 	b.w	8010ec0 <__malloc_unlock>
 8010d72:	42a3      	cmp	r3, r4
 8010d74:	d90b      	bls.n	8010d8e <_free_r+0x4e>
 8010d76:	6821      	ldr	r1, [r4, #0]
 8010d78:	1862      	adds	r2, r4, r1
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	bf04      	itt	eq
 8010d7e:	681a      	ldreq	r2, [r3, #0]
 8010d80:	685b      	ldreq	r3, [r3, #4]
 8010d82:	6063      	str	r3, [r4, #4]
 8010d84:	bf04      	itt	eq
 8010d86:	1852      	addeq	r2, r2, r1
 8010d88:	6022      	streq	r2, [r4, #0]
 8010d8a:	602c      	str	r4, [r5, #0]
 8010d8c:	e7ec      	b.n	8010d68 <_free_r+0x28>
 8010d8e:	461a      	mov	r2, r3
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	b10b      	cbz	r3, 8010d98 <_free_r+0x58>
 8010d94:	42a3      	cmp	r3, r4
 8010d96:	d9fa      	bls.n	8010d8e <_free_r+0x4e>
 8010d98:	6811      	ldr	r1, [r2, #0]
 8010d9a:	1855      	adds	r5, r2, r1
 8010d9c:	42a5      	cmp	r5, r4
 8010d9e:	d10b      	bne.n	8010db8 <_free_r+0x78>
 8010da0:	6824      	ldr	r4, [r4, #0]
 8010da2:	4421      	add	r1, r4
 8010da4:	1854      	adds	r4, r2, r1
 8010da6:	42a3      	cmp	r3, r4
 8010da8:	6011      	str	r1, [r2, #0]
 8010daa:	d1dd      	bne.n	8010d68 <_free_r+0x28>
 8010dac:	681c      	ldr	r4, [r3, #0]
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	6053      	str	r3, [r2, #4]
 8010db2:	4421      	add	r1, r4
 8010db4:	6011      	str	r1, [r2, #0]
 8010db6:	e7d7      	b.n	8010d68 <_free_r+0x28>
 8010db8:	d902      	bls.n	8010dc0 <_free_r+0x80>
 8010dba:	230c      	movs	r3, #12
 8010dbc:	6003      	str	r3, [r0, #0]
 8010dbe:	e7d3      	b.n	8010d68 <_free_r+0x28>
 8010dc0:	6825      	ldr	r5, [r4, #0]
 8010dc2:	1961      	adds	r1, r4, r5
 8010dc4:	428b      	cmp	r3, r1
 8010dc6:	bf04      	itt	eq
 8010dc8:	6819      	ldreq	r1, [r3, #0]
 8010dca:	685b      	ldreq	r3, [r3, #4]
 8010dcc:	6063      	str	r3, [r4, #4]
 8010dce:	bf04      	itt	eq
 8010dd0:	1949      	addeq	r1, r1, r5
 8010dd2:	6021      	streq	r1, [r4, #0]
 8010dd4:	6054      	str	r4, [r2, #4]
 8010dd6:	e7c7      	b.n	8010d68 <_free_r+0x28>
 8010dd8:	b003      	add	sp, #12
 8010dda:	bd30      	pop	{r4, r5, pc}
 8010ddc:	240001c4 	.word	0x240001c4

08010de0 <_malloc_r>:
 8010de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de2:	1ccd      	adds	r5, r1, #3
 8010de4:	f025 0503 	bic.w	r5, r5, #3
 8010de8:	3508      	adds	r5, #8
 8010dea:	2d0c      	cmp	r5, #12
 8010dec:	bf38      	it	cc
 8010dee:	250c      	movcc	r5, #12
 8010df0:	2d00      	cmp	r5, #0
 8010df2:	4606      	mov	r6, r0
 8010df4:	db01      	blt.n	8010dfa <_malloc_r+0x1a>
 8010df6:	42a9      	cmp	r1, r5
 8010df8:	d903      	bls.n	8010e02 <_malloc_r+0x22>
 8010dfa:	230c      	movs	r3, #12
 8010dfc:	6033      	str	r3, [r6, #0]
 8010dfe:	2000      	movs	r0, #0
 8010e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e02:	f000 f857 	bl	8010eb4 <__malloc_lock>
 8010e06:	4921      	ldr	r1, [pc, #132]	; (8010e8c <_malloc_r+0xac>)
 8010e08:	680a      	ldr	r2, [r1, #0]
 8010e0a:	4614      	mov	r4, r2
 8010e0c:	b99c      	cbnz	r4, 8010e36 <_malloc_r+0x56>
 8010e0e:	4f20      	ldr	r7, [pc, #128]	; (8010e90 <_malloc_r+0xb0>)
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	b923      	cbnz	r3, 8010e1e <_malloc_r+0x3e>
 8010e14:	4621      	mov	r1, r4
 8010e16:	4630      	mov	r0, r6
 8010e18:	f000 f83c 	bl	8010e94 <_sbrk_r>
 8010e1c:	6038      	str	r0, [r7, #0]
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4630      	mov	r0, r6
 8010e22:	f000 f837 	bl	8010e94 <_sbrk_r>
 8010e26:	1c43      	adds	r3, r0, #1
 8010e28:	d123      	bne.n	8010e72 <_malloc_r+0x92>
 8010e2a:	230c      	movs	r3, #12
 8010e2c:	6033      	str	r3, [r6, #0]
 8010e2e:	4630      	mov	r0, r6
 8010e30:	f000 f846 	bl	8010ec0 <__malloc_unlock>
 8010e34:	e7e3      	b.n	8010dfe <_malloc_r+0x1e>
 8010e36:	6823      	ldr	r3, [r4, #0]
 8010e38:	1b5b      	subs	r3, r3, r5
 8010e3a:	d417      	bmi.n	8010e6c <_malloc_r+0x8c>
 8010e3c:	2b0b      	cmp	r3, #11
 8010e3e:	d903      	bls.n	8010e48 <_malloc_r+0x68>
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	441c      	add	r4, r3
 8010e44:	6025      	str	r5, [r4, #0]
 8010e46:	e004      	b.n	8010e52 <_malloc_r+0x72>
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	42a2      	cmp	r2, r4
 8010e4c:	bf0c      	ite	eq
 8010e4e:	600b      	streq	r3, [r1, #0]
 8010e50:	6053      	strne	r3, [r2, #4]
 8010e52:	4630      	mov	r0, r6
 8010e54:	f000 f834 	bl	8010ec0 <__malloc_unlock>
 8010e58:	f104 000b 	add.w	r0, r4, #11
 8010e5c:	1d23      	adds	r3, r4, #4
 8010e5e:	f020 0007 	bic.w	r0, r0, #7
 8010e62:	1ac2      	subs	r2, r0, r3
 8010e64:	d0cc      	beq.n	8010e00 <_malloc_r+0x20>
 8010e66:	1a1b      	subs	r3, r3, r0
 8010e68:	50a3      	str	r3, [r4, r2]
 8010e6a:	e7c9      	b.n	8010e00 <_malloc_r+0x20>
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	6864      	ldr	r4, [r4, #4]
 8010e70:	e7cc      	b.n	8010e0c <_malloc_r+0x2c>
 8010e72:	1cc4      	adds	r4, r0, #3
 8010e74:	f024 0403 	bic.w	r4, r4, #3
 8010e78:	42a0      	cmp	r0, r4
 8010e7a:	d0e3      	beq.n	8010e44 <_malloc_r+0x64>
 8010e7c:	1a21      	subs	r1, r4, r0
 8010e7e:	4630      	mov	r0, r6
 8010e80:	f000 f808 	bl	8010e94 <_sbrk_r>
 8010e84:	3001      	adds	r0, #1
 8010e86:	d1dd      	bne.n	8010e44 <_malloc_r+0x64>
 8010e88:	e7cf      	b.n	8010e2a <_malloc_r+0x4a>
 8010e8a:	bf00      	nop
 8010e8c:	240001c4 	.word	0x240001c4
 8010e90:	240001c8 	.word	0x240001c8

08010e94 <_sbrk_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4d06      	ldr	r5, [pc, #24]	; (8010eb0 <_sbrk_r+0x1c>)
 8010e98:	2300      	movs	r3, #0
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	4608      	mov	r0, r1
 8010e9e:	602b      	str	r3, [r5, #0]
 8010ea0:	f7f0 f892 	bl	8000fc8 <_sbrk>
 8010ea4:	1c43      	adds	r3, r0, #1
 8010ea6:	d102      	bne.n	8010eae <_sbrk_r+0x1a>
 8010ea8:	682b      	ldr	r3, [r5, #0]
 8010eaa:	b103      	cbz	r3, 8010eae <_sbrk_r+0x1a>
 8010eac:	6023      	str	r3, [r4, #0]
 8010eae:	bd38      	pop	{r3, r4, r5, pc}
 8010eb0:	24020ef8 	.word	0x24020ef8

08010eb4 <__malloc_lock>:
 8010eb4:	4801      	ldr	r0, [pc, #4]	; (8010ebc <__malloc_lock+0x8>)
 8010eb6:	f000 b809 	b.w	8010ecc <__retarget_lock_acquire_recursive>
 8010eba:	bf00      	nop
 8010ebc:	24020f00 	.word	0x24020f00

08010ec0 <__malloc_unlock>:
 8010ec0:	4801      	ldr	r0, [pc, #4]	; (8010ec8 <__malloc_unlock+0x8>)
 8010ec2:	f000 b804 	b.w	8010ece <__retarget_lock_release_recursive>
 8010ec6:	bf00      	nop
 8010ec8:	24020f00 	.word	0x24020f00

08010ecc <__retarget_lock_acquire_recursive>:
 8010ecc:	4770      	bx	lr

08010ece <__retarget_lock_release_recursive>:
 8010ece:	4770      	bx	lr

08010ed0 <_init>:
 8010ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed2:	bf00      	nop
 8010ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ed6:	bc08      	pop	{r3}
 8010ed8:	469e      	mov	lr, r3
 8010eda:	4770      	bx	lr

08010edc <_fini>:
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	bf00      	nop
 8010ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee2:	bc08      	pop	{r3}
 8010ee4:	469e      	mov	lr, r3
 8010ee6:	4770      	bx	lr
